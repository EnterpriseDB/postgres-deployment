#! /bin/bash
################################################################################
# Title           : deployment_main.sh making installs the required packages for
#                 : for deployment scripts
# Author          : Doug Ortiz and Co-authored by Vibhor Kumar
# Date            : Sept 7, 2020
# Version         : 1.0
################################################################################


################################################################################
# Quit on any error
set -e
# Verify any  undefined shell variables
set -u

################################################################################
# Source the common lib and config file
################################################################################
DIRECTORY=$(dirname $0)
if [[ "${DIRECTORY}" = "." ]]
then
   DIRECTORY="${PWD}"
fi
BASENAME=$(basename $0)
PLAYBOOK=${DIRECTORY}/playbook/playbook.yml
TERRAFORM_DIRECTORY=${DIRECTORY}/terraform/
PROJECTS_DIRECTORY=${DIRECTORY}/projects/
source ${DIRECTORY}/lib/common_funcs.sh
source ${DIRECTORY}/lib/config_funcs.sh
source ${DIRECTORY}/lib/pre_reqs_funcs.sh
source ${DIRECTORY}/lib/pg_install_funcs.sh
source ${DIRECTORY}/lib/usage_funcs.sh
source ${DIRECTORY}/lib/build_servers.sh

################################################################################
# Verify the arguments and call the config file
################################################################################
AWS_POSTGRES_INSTALL=""
AZURE_POSTGRES_INSTALL=""
GCLOUD_POSTGRES_INSTALL=""
AWS_SERVER=""
AZURE_SERVER=""
GCLOUD_SERVER=""
AWS_CONFIG=""
AZURE_CONFIG=""
GCLOUD_CONFIG=""
AWS_PROJECT=""
AZURE_PROJECT=""
GCLOUD_PROJECT=""
ARGUMENTS="$@"
ARGUMENTS="$(echo ${ARGUMENTS} | sed -e "s/  */ /g" \
                                     -e "s/^ *//g" \
                                     -e "s/ *$//g")"

verify_arguments ${ARGUMENTS}

if [[ "x${PROJECT_NAME}" = "x" ]] 
then
   read -r -e -p "Enter the project name: " PROJECT_NAME
   
   if [[ -z ${PROJECT_NAME} ]]
   then
       exit_on_error "Project name cannot be empty. Try again!"
   fi
fi

################################################################################
# Create resources based on the user input
################################################################################
if [[ "${AWS_SERVER}" = "create" ]]
then
    verify_aws
    
    aws_config_file "${PROJECT_NAME}" \
                    "${PROJECTS_DIRECTORY}/aws/${PROJECT_NAME}"
    
    aws_build_server "${OSNAME}" \
                     "${REGION}" \
                     "${INSTANCE_COUNT}" \
                     "${PUB_FILE_PATH}" \
                     "${PEM_INSTANCE_COUNT}" \
                     "${PROJECT_NAME}" \
                     "${PRIV_FILE_PATH}" \
                     "${PROJECTS_DIRECTORY}/aws/${PROJECT_NAME}" \
                    2>&1 | tee ${TERRAFORM_LOG}    

    copy_files_to_project_folder "aws"
fi


################################################################################
# Install Postgres based on the user input
################################################################################
if [[ "${AWS_POSTGRES_INSTALL}" = "install" ]]
then

    aws_config_file "${PROJECT_NAME}" \
                    "${PROJECTS_DIRECTORY}/aws/${PROJECT_NAME}"
    
    ansible_pg_install "${OSNAME}" \
                       "${PG_TYPE}" \
                       "${PG_VERSION}" \
                       "${YUM_USERNAME}" \
                       "${YUM_PASSWORD}" \
                       "${PRIV_FILE_PATH}" \
                       "${PUB_FILE_PATH}" \
                       "${PROJECT_NAME}" \
                       "${EMAIL_ID}" \
                       "${ROUTE53_ACCESS_KEY}" \
                       "${ROUTE53_SECRET}" \
                       "${PROJECTS_DIRECTORY}/aws/${PROJECT_NAME}" \
                       2>&1 | tee ${PG_INSTALL_LOG}
fi

################################################################################
# Project Management
################################################################################
if [[ "${AWS_CONFIG}" = "show" ]]
then
    aws_show_config_file "${PROJECT_NAME}" \
                         "${PROJECTS_DIRECTORY}/aws/${PROJECT_NAME}"
fi

if [[ "${AWS_CONFIG}" = "update" ]]
then
    aws_update_config_file "${PROJECT_NAME}" \
                           "${PROJECTS_DIRECTORY}/aws/${PROJECT_NAME}"
fi

if [[ "${AWS_PROJECT}" = "list" ]]
then
    aws_list_projects
fi

if [[ "${AWS_PROJECT}" = "switch" ]]
then 
    aws_switch_projects "${PROJECT_NAME}"
fi

################################################################################
# Destroy the Postgres deployment based on the user input
################################################################################
if [[ "${AWS_SERVER}" = "destroy" ]]
then
    RESULT=""
    custom_yesno_prompt \
      "Are you sure you want to destroy project: '${PROJECT_NAME}'?" \
      "Enter: (Y)es/(N)o " RESULT
    if [[ "${RESULT}" = "Yes" ]]
    then
       aws_config_file "${PROJECT_NAME}" \
                       "${PROJECTS_DIRECTORY}/aws/${PROJECT_NAME}"

       aws_destroy_server "${REGION}" \
                          "${PROJECT_NAME}" \
                          "${PROJECTS_DIRECTORY}/aws/${PROJECT_NAME}" \
                          2>&1 | tee  ${TERRAFORM_LOG}
    fi                          
fi

