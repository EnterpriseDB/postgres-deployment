
PLAY [Configure Postgres SQL Replication on Instances] *******************************************************************************************************************************

TASK [Initialize the user defined variables] *****************************************************************************************************************************************
ok: [localhost] => (item={u'key': u'pemserver', u'value': {u'public_ip': u'54.165.62.96', u'node_type': u'pemserver', u'public_dns': u'ec2-54-165-62-96.compute-1.amazonaws.com', u'private_ip': u'10.0.1.153'}})
ok: [localhost] => (item={u'key': u'standby2', u'value': {u'public_ip': u'3.92.47.17', u'pem_agent': True, u'node_type': u'standby', u'private_ip': u'10.0.3.234', u'replication_type': u'asynchronous', u'public_dns': u'ec2-3-92-47-17.compute-1.amazonaws.com'}})
ok: [localhost] => (item={u'key': u'standby3', u'value': {u'public_ip': u'52.55.189.7', u'pem_agent': True, u'node_type': u'standby', u'private_ip': u'10.0.2.72', u'replication_type': u'asynchronous', u'public_dns': u'ec2-52-55-189-7.compute-1.amazonaws.com'}})
ok: [localhost] => (item={u'key': u'primary1', u'value': {u'public_ip': u'18.234.160.148', u'pem_agent': True, u'node_type': u'primary', u'private_ip': u'10.0.0.56', u'replication_type': u'asynchronous', u'public_dns': u'ec2-18-234-160-148.compute-1.amazonaws.com'}})

TASK [Gather primary and standby nodes for EFM] **************************************************************************************************************************************
skipping: [localhost] => (item={u'key': u'pemserver', u'value': {u'public_ip': u'54.165.62.96', u'node_type': u'pemserver', u'public_dns': u'ec2-54-165-62-96.compute-1.amazonaws.com', u'private_ip': u'10.0.1.153'}}) 
ok: [localhost] => (item={u'key': u'standby2', u'value': {u'public_ip': u'3.92.47.17', u'pem_agent': True, u'node_type': u'standby', u'private_ip': u'10.0.3.234', u'replication_type': u'asynchronous', u'public_dns': u'ec2-3-92-47-17.compute-1.amazonaws.com'}})
ok: [localhost] => (item={u'key': u'standby3', u'value': {u'public_ip': u'52.55.189.7', u'pem_agent': True, u'node_type': u'standby', u'private_ip': u'10.0.2.72', u'replication_type': u'asynchronous', u'public_dns': u'ec2-52-55-189-7.compute-1.amazonaws.com'}})
ok: [localhost] => (item={u'key': u'primary1', u'value': {u'public_ip': u'18.234.160.148', u'pem_agent': True, u'node_type': u'primary', u'private_ip': u'10.0.0.56', u'replication_type': u'asynchronous', u'public_dns': u'ec2-18-234-160-148.compute-1.amazonaws.com'}})

TASK [Gather the standby names] ******************************************************************************************************************************************************
skipping: [localhost] => (item={u'key': u'pemserver', u'value': {u'public_ip': u'54.165.62.96', u'node_type': u'pemserver', u'public_dns': u'ec2-54-165-62-96.compute-1.amazonaws.com', u'private_ip': u'10.0.1.153'}}) 
ok: [localhost] => (item={u'key': u'standby2', u'value': {u'public_ip': u'3.92.47.17', u'pem_agent': True, u'node_type': u'standby', u'private_ip': u'10.0.3.234', u'replication_type': u'asynchronous', u'public_dns': u'ec2-3-92-47-17.compute-1.amazonaws.com'}})
ok: [localhost] => (item={u'key': u'standby3', u'value': {u'public_ip': u'52.55.189.7', u'pem_agent': True, u'node_type': u'standby', u'private_ip': u'10.0.2.72', u'replication_type': u'asynchronous', u'public_dns': u'ec2-52-55-189-7.compute-1.amazonaws.com'}})
skipping: [localhost] => (item={u'key': u'primary1', u'value': {u'public_ip': u'18.234.160.148', u'pem_agent': True, u'node_type': u'primary', u'private_ip': u'10.0.0.56', u'replication_type': u'asynchronous', u'public_dns': u'ec2-18-234-160-148.compute-1.amazonaws.com'}}) 

TASK [Iterate through repo role with items from hosts file] **************************************************************************************************************************

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : Set FORCE_INSTALL based on the user input] ************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Database Engine = EPAS, Public IP = 54.165.62.96"
}

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-PG-setuprepos.yml for localhost

TASK [edb_devops.edb_postgres.setup_repo : Install EPEL Repo] ************************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_repo : Install Postgres from Repo] ***************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-EPAS-setuprepos.yml for localhost

TASK [edb_devops.edb_postgres.setup_repo : Install EPEL Repo] ************************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_repo : Install Latest EDB Repo] ******************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_repo : Set Credentials for EDB Yum Repo] *********************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : Set FORCE_INSTALL based on the user input] ************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Database Engine = EPAS, Public IP = 3.92.47.17"
}

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-PG-setuprepos.yml for localhost

TASK [edb_devops.edb_postgres.setup_repo : Install EPEL Repo] ************************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_repo : Install Postgres from Repo] ***************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-EPAS-setuprepos.yml for localhost

TASK [edb_devops.edb_postgres.setup_repo : Install EPEL Repo] ************************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_repo : Install Latest EDB Repo] ******************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_repo : Set Credentials for EDB Yum Repo] *********************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : Set FORCE_INSTALL based on the user input] ************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Database Engine = EPAS, Public IP = 52.55.189.7"
}

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-PG-setuprepos.yml for localhost

TASK [edb_devops.edb_postgres.setup_repo : Install EPEL Repo] ************************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_repo : Install Postgres from Repo] ***************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-EPAS-setuprepos.yml for localhost

TASK [edb_devops.edb_postgres.setup_repo : Install EPEL Repo] ************************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_repo : Install Latest EDB Repo] ******************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_repo : Set Credentials for EDB Yum Repo] *********************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : Set FORCE_INSTALL based on the user input] ************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : debug] ************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Database Engine = EPAS, Public IP = 18.234.160.148"
}

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-PG-setuprepos.yml for localhost

TASK [edb_devops.edb_postgres.setup_repo : Install EPEL Repo] ************************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_repo : Install Postgres from Repo] ***************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_repo : include_tasks] ****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-EPAS-setuprepos.yml for localhost

TASK [edb_devops.edb_postgres.setup_repo : Install EPEL Repo] ************************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_repo : Install Latest EDB Repo] ******************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_repo : Set Credentials for EDB Yum Repo] *********************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [Iterate through install role with items from hosts file] ***********************************************************************************************************************

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : Set force_install based on the user input] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 54.165.62.96"
}

TASK [edb_devops.edb_postgres.install_dbserver : include_tasks] **********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : include_tasks] **********************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/install_dbserver/tasks/C07-RH07-EPAS-install.yml for localhost

TASK [edb_devops.edb_postgres.install_dbserver : Install Additional Python Packages] *************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.install_dbserver : Install EPAS Packages] **************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : Set force_install based on the user input] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 3.92.47.17"
}

TASK [edb_devops.edb_postgres.install_dbserver : include_tasks] **********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : include_tasks] **********************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/install_dbserver/tasks/C07-RH07-EPAS-install.yml for localhost

TASK [edb_devops.edb_postgres.install_dbserver : Install Additional Python Packages] *************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.install_dbserver : Install EPAS Packages] **************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : Set force_install based on the user input] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 52.55.189.7"
}

TASK [edb_devops.edb_postgres.install_dbserver : include_tasks] **********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : include_tasks] **********************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/install_dbserver/tasks/C07-RH07-EPAS-install.yml for localhost

TASK [edb_devops.edb_postgres.install_dbserver : Install Additional Python Packages] *************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.install_dbserver : Install EPAS Packages] **************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : Set force_install based on the user input] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : debug] ******************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 18.234.160.148"
}

TASK [edb_devops.edb_postgres.install_dbserver : include_tasks] **********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.install_dbserver : include_tasks] **********************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/install_dbserver/tasks/C07-RH07-EPAS-install.yml for localhost

TASK [edb_devops.edb_postgres.install_dbserver : Install Additional Python Packages] *************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.install_dbserver : Install EPAS Packages] **************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [Iterate through initialize role with items from hosts file] ********************************************************************************************************************

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 54.165.62.96"
}

TASK [edb_devops.edb_postgres.init_dbserver : Set Node Type] *************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : set FORCE_INITIALIZE based on the user input] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : include_tasks] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Enumerate disks] ***********************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Update the block devices] **************************************************************************************************************
ok: [localhost -> 54.165.62.96] => (item=nvme0n1)

TASK [edb_devops.edb_postgres.init_dbserver : Ensure /etc/tuned/edb directory exists] ************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Create tuned.conf for Postgres] ********************************************************************************************************
ok: [localhost -> 54.165.62.96] => (item=[main])
ok: [localhost -> 54.165.62.96] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server)
ok: [localhost -> 54.165.62.96] => (item=[cpu])
ok: [localhost -> 54.165.62.96] => (item=governor=performance)
ok: [localhost -> 54.165.62.96] => (item=energy_perf_bias=performance)
ok: [localhost -> 54.165.62.96] => (item=min_perf_pct=100)
ok: [localhost -> 54.165.62.96] => (item=[disk])
ok: [localhost -> 54.165.62.96] => (item=readahead=>4096)
ok: [localhost -> 54.165.62.96] => (item=[sysctl])
ok: [localhost -> 54.165.62.96] => (item=vm.overcommit_memory=2)
ok: [localhost -> 54.165.62.96] => (item=vm.swappiness=1)
ok: [localhost -> 54.165.62.96] => (item=vm.dirty_ratio=30)
ok: [localhost -> 54.165.62.96] => (item=vm.dirty_background_ratio=10)
ok: [localhost -> 54.165.62.96] => (item=[vm])
ok: [localhost -> 54.165.62.96] => (item=transparent_hugepages=never)

TASK [edb_devops.edb_postgres.init_dbserver : Enable the tuned] **********************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Load the new settings using tuned] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if Cluster has been initialized] *************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Check if Cluster has been initialized] *************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PGDATA and stop if exists] ******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres Data directory exists] *************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres Log directory exists] **************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres WAL directory exists] **************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Create Unix Socket Domain Directories] *************************************************************************************************
ok: [localhost -> 54.165.62.96] => (item=/var/run/edb)

TASK [edb_devops.edb_postgres.init_dbserver : Create hidden edb directory if not exists] *********************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Define INITDB command.] ****************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_WAL and accordingly add the in the INITDB] ***********************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_ENCODING and accordingly add the in the INITDB] ******************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_LOCALE and accordingly add the in the INITDB] ********************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Add other initdb options] **************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Initialize Database Postgres Service] **************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Update unix_socket_directories if provided] ********************************************************************************************
ok: [localhost -> 54.165.62.96] => (item={u'To': u"unix_socket_directories = '/var/run/edb'", u'From': u'#unix_socket_directories ='})
ok: [localhost -> 54.165.62.96] => (item={u'To': u"shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'", u'From': u'shared_preload_libraries ='})
ok: [localhost -> 54.165.62.96] => (item={u'To': u"shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'", u'From': u'#shared_preload_libraries ='})

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have the service file already created] *************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Copy postgres service file] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update Postgres Service File] **********************************************************************************************************
ok: [localhost -> 54.165.62.96] => (item={u'To': u'Environment=PGDATA=/data/pgdata', u'From': u'Environment=PGDATA=/var/lib/edb/as12/data'})
ok: [localhost -> 54.165.62.96] => (item={u'To': u'PIDFile=/data/pgdata/postmaster.pid', u'From': u'PIDFile=/var/lib/edb/as12/data/postmaster.pid'})

TASK [edb_devops.edb_postgres.init_dbserver : Start the PG Service] ******************************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Set PG_SUPERUSER_PASSWORD if not provided] *********************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Make sure file is has permission for owner only] ***************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Set Postgres Superuser's Database Cluster Password] ************************************************************************************
changed: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Configure unix socket directory] *******************************************************************************************************
ok: [localhost -> 54.165.62.96] => (item={u'name': u'unix_socket_directories', u'value': u'/var/run/edb'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'listen_addresses', u'value': u'*'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'wal_level', u'value': u'replica'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'max_wal_senders', u'value': 10})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'hot_standby', u'value': True})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'max_replication_slots', u'value': 10})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'wal_compression', u'value': True})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'wal_log_hints', u'value': True})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'checkpoint_timeout', u'value': u'15min'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'checkpoint_completion_target', u'value': 0.9})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'archive_mode', u'value': True})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'archive_command', u'value': u'/bin/true'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'random_page_cost', u'value': 1.1})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'cpu_tuple_cost', u'value': 0.03})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'logging_collector', u'value': True})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_line_prefix', u'value': u'%m [%p-%l] %u@%d app=%a '})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_truncate_on_rotation', u'value': True})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_rotation_size', u'value': u'1GB'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_lock_waits', u'value': True})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_connections', u'value': True})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_disconnections', u'value': True})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_error_verbosity', u'value': u'default'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_statement', u'value': u'ddl'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_temp_files', u'value': 0})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_autovacuum_min_duration', u'value': 0})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'autovacuum_max_workers', u'value': 5})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'autovacuum_vacuum_cost_limit', u'value': 3000})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'idle_in_transaction_session_timeout', u'value': u'10 min'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'syslog_ident', u'value': u'edb'})

TASK [edb_devops.edb_postgres.init_dbserver : Configure primary_slot_name] ***********************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Configure log_file_name] ***************************************************************************************************************
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_filename', u'value': u'edb-%a.log'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'log_directory', u'value': u'/var/log/edb'})

TASK [edb_devops.edb_postgres.init_dbserver : Remove default log location] ***********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Make sure we have PG_SSL_DIR] **********************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have CA key exists or not] *************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have CA certificate exists or not] *****************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have root.crt exists or not] ***********************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have root crl exists or not] ***********************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have server.key exists or not] *********************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have server.crt exists or not] *********************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Create ssl extension in PG_DATABASE] ***************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Create SSL cert key] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA key variable] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA Key file in PG_DATA] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a certificate authority key] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA certificate variable] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA certificate file in PG_DATA] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create root.crt using CA certificate file in PG_DATA] **********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a root.crl] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create root.crl] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create SSL Server key] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Server key variable] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Server Key file in PG_DATA] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a Server cert] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA certificate variable] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA certificate file in PG_DATA] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Find the HBA File location] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update localhost addresses entries into pg_hba file] ***********************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'replication'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'replication'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Update localhost addresses entries into pg_hba file] ***********************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'replication'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'replication'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Configure ssl Settings in postgresql.auto.conf] ****************************************************************************************
skipping: [localhost] => (item={u'name': u'ssl', u'value': u'on'}) 
skipping: [localhost] => (item={u'name': u'ssl_ca_file', u'value': u'/etc/edb/certs/root.crt'}) 
skipping: [localhost] => (item={u'name': u'ssl_key_file', u'value': u'/etc/edb/certs/server.key'}) 
skipping: [localhost] => (item={u'name': u'ssl_cert_file', u'value': u'/etc/edb/certs/server.crt'}) 
skipping: [localhost] => (item={u'name': u'ssl_crl_file', u'value': u'/etc/edb/certs/root.crl'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create optional Users] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create optional Databases] *************************************************************************************************************

TASK [edb_devops.edb_postgres.init_dbserver : Check user defined parameters and update] **********************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Find the HBA File location on primary] *************************************************************************************************
changed: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.init_dbserver : Adding IP address entries into pg_hba file on primary] *********************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Adding IP address entries into pg_hba file on primary] *********************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Postgres extensions] ************************************************************************************************************
ok: [localhost -> 54.165.62.96] => (item={u'name': u'edb_wait_states', u'database': u'edb'})
ok: [localhost -> 54.165.62.96] => (item={u'name': u'edb_wait_states', u'database': u'postgres'})

TASK [edb_devops.edb_postgres.init_dbserver : GRANT execute privilege to users] ******************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : GRANT role to users] *******************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Copying the PG_COPY_SQL_SCRIPTS] *******************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Execute PG_SQL_SCRIPTS] ****************************************************************************************************************
skipping: [localhost] => (item=None) 
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reset FORCE/SKIP_INITIALIZE based on the user input] ***********************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 3.92.47.17"
}

TASK [edb_devops.edb_postgres.init_dbserver : Set Node Type] *************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : set FORCE_INITIALIZE based on the user input] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : include_tasks] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Enumerate disks] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update the block devices] **************************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.init_dbserver : Ensure /etc/tuned/edb directory exists] ************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create tuned.conf for Postgres] ********************************************************************************************************
skipping: [localhost] => (item=[main]) 
skipping: [localhost] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server) 
skipping: [localhost] => (item=[cpu]) 
skipping: [localhost] => (item=governor=performance) 
skipping: [localhost] => (item=energy_perf_bias=performance) 
skipping: [localhost] => (item=min_perf_pct=100) 
skipping: [localhost] => (item=[disk]) 
skipping: [localhost] => (item=readahead=>4096) 
skipping: [localhost] => (item=[sysctl]) 
skipping: [localhost] => (item=vm.overcommit_memory=2) 
skipping: [localhost] => (item=vm.swappiness=1) 
skipping: [localhost] => (item=vm.dirty_ratio=30) 
skipping: [localhost] => (item=vm.dirty_background_ratio=10) 
skipping: [localhost] => (item=[vm]) 
skipping: [localhost] => (item=transparent_hugepages=never) 

TASK [edb_devops.edb_postgres.init_dbserver : Enable the tuned] **********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Load the new settings using tuned] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if Cluster has been initialized] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if Cluster has been initialized] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PGDATA and stop if exists] ******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres Data directory exists] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres Log directory exists] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres WAL directory exists] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Unix Socket Domain Directories] *************************************************************************************************
skipping: [localhost] => (item=/var/run/edb) 

TASK [edb_devops.edb_postgres.init_dbserver : Create hidden edb directory if not exists] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Define INITDB command.] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_WAL and accordingly add the in the INITDB] ***********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_ENCODING and accordingly add the in the INITDB] ******************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_LOCALE and accordingly add the in the INITDB] ********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Add other initdb options] **************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Initialize Database Postgres Service] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update unix_socket_directories if provided] ********************************************************************************************
skipping: [localhost] => (item={u'To': u"unix_socket_directories = '/var/run/edb'", u'From': u'#unix_socket_directories ='}) 
skipping: [localhost] => (item={u'To': u"shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'", u'From': u'shared_preload_libraries ='}) 
skipping: [localhost] => (item={u'To': u"shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'", u'From': u'#shared_preload_libraries ='}) 

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have the service file already created] *************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Copy postgres service file] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update Postgres Service File] **********************************************************************************************************
skipping: [localhost] => (item={u'To': u'Environment=PGDATA=/data/pgdata', u'From': u'Environment=PGDATA=/var/lib/edb/as12/data'}) 
skipping: [localhost] => (item={u'To': u'PIDFile=/data/pgdata/postmaster.pid', u'From': u'PIDFile=/var/lib/edb/as12/data/postmaster.pid'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Start the PG Service] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Set PG_SUPERUSER_PASSWORD if not provided] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Make sure file is has permission for owner only] ***************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Set Postgres Superuser's Database Cluster Password] ************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Configure unix socket directory] *******************************************************************************************************
skipping: [localhost] => (item={u'name': u'unix_socket_directories', u'value': u'/var/run/edb'}) 
skipping: [localhost] => (item={u'name': u'listen_addresses', u'value': u'*'}) 
skipping: [localhost] => (item={u'name': u'wal_level', u'value': u'replica'}) 
skipping: [localhost] => (item={u'name': u'max_wal_senders', u'value': 10}) 
skipping: [localhost] => (item={u'name': u'hot_standby', u'value': True}) 
skipping: [localhost] => (item={u'name': u'max_replication_slots', u'value': 10}) 
skipping: [localhost] => (item={u'name': u'wal_compression', u'value': True}) 
skipping: [localhost] => (item={u'name': u'wal_log_hints', u'value': True}) 
skipping: [localhost] => (item={u'name': u'checkpoint_timeout', u'value': u'15min'}) 
skipping: [localhost] => (item={u'name': u'checkpoint_completion_target', u'value': 0.9}) 
skipping: [localhost] => (item={u'name': u'archive_mode', u'value': True}) 
skipping: [localhost] => (item={u'name': u'archive_command', u'value': u'/bin/true'}) 
skipping: [localhost] => (item={u'name': u'random_page_cost', u'value': 1.1}) 
skipping: [localhost] => (item={u'name': u'cpu_tuple_cost', u'value': 0.03}) 
skipping: [localhost] => (item={u'name': u'logging_collector', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_line_prefix', u'value': u'%m [%p-%l] %u@%d app=%a '}) 
skipping: [localhost] => (item={u'name': u'log_truncate_on_rotation', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_rotation_size', u'value': u'1GB'}) 
skipping: [localhost] => (item={u'name': u'log_lock_waits', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_connections', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_disconnections', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_error_verbosity', u'value': u'default'}) 
skipping: [localhost] => (item={u'name': u'log_statement', u'value': u'ddl'}) 
skipping: [localhost] => (item={u'name': u'log_temp_files', u'value': 0}) 
skipping: [localhost] => (item={u'name': u'log_autovacuum_min_duration', u'value': 0}) 
skipping: [localhost] => (item={u'name': u'autovacuum_max_workers', u'value': 5}) 
skipping: [localhost] => (item={u'name': u'autovacuum_vacuum_cost_limit', u'value': 3000}) 
skipping: [localhost] => (item={u'name': u'idle_in_transaction_session_timeout', u'value': u'10 min'}) 
skipping: [localhost] => (item={u'name': u'syslog_ident', u'value': u'edb'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Configure primary_slot_name] ***********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Configure log_file_name] ***************************************************************************************************************
skipping: [localhost] => (item={u'name': u'log_filename', u'value': u'edb-%a.log'}) 
skipping: [localhost] => (item={u'name': u'log_directory', u'value': u'/var/log/edb'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Remove default log location] ***********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Make sure we have PG_SSL_DIR] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have CA key exists or not] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have CA certificate exists or not] *****************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have root.crt exists or not] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have root crl exists or not] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have server.key exists or not] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have server.crt exists or not] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create ssl extension in PG_DATABASE] ***************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create SSL cert key] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA key variable] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA Key file in PG_DATA] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a certificate authority key] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA certificate variable] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA certificate file in PG_DATA] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create root.crt using CA certificate file in PG_DATA] **********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a root.crl] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create root.crl] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create SSL Server key] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Server key variable] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Server Key file in PG_DATA] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a Server cert] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA certificate variable] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA certificate file in PG_DATA] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Find the HBA File location] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update localhost addresses entries into pg_hba file] ***********************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'replication'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'replication'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Update localhost addresses entries into pg_hba file] ***********************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'replication'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'replication'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Configure ssl Settings in postgresql.auto.conf] ****************************************************************************************
skipping: [localhost] => (item={u'name': u'ssl', u'value': u'on'}) 
skipping: [localhost] => (item={u'name': u'ssl_ca_file', u'value': u'/etc/edb/certs/root.crt'}) 
skipping: [localhost] => (item={u'name': u'ssl_key_file', u'value': u'/etc/edb/certs/server.key'}) 
skipping: [localhost] => (item={u'name': u'ssl_cert_file', u'value': u'/etc/edb/certs/server.crt'}) 
skipping: [localhost] => (item={u'name': u'ssl_crl_file', u'value': u'/etc/edb/certs/root.crl'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create optional Users] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create optional Databases] *************************************************************************************************************

TASK [edb_devops.edb_postgres.init_dbserver : Check user defined parameters and update] **********************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Find the HBA File location on primary] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Adding IP address entries into pg_hba file on primary] *********************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Adding IP address entries into pg_hba file on primary] *********************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Postgres extensions] ************************************************************************************************************
skipping: [localhost] => (item={u'name': u'edb_wait_states', u'database': u'edb'}) 
skipping: [localhost] => (item={u'name': u'edb_wait_states', u'database': u'postgres'}) 

TASK [edb_devops.edb_postgres.init_dbserver : GRANT execute privilege to users] ******************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : GRANT role to users] *******************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Copying the PG_COPY_SQL_SCRIPTS] *******************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Execute PG_SQL_SCRIPTS] ****************************************************************************************************************
skipping: [localhost] => (item=None) 
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reset FORCE/SKIP_INITIALIZE based on the user input] ***********************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 52.55.189.7"
}

TASK [edb_devops.edb_postgres.init_dbserver : Set Node Type] *************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : set FORCE_INITIALIZE based on the user input] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : include_tasks] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Enumerate disks] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update the block devices] **************************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.init_dbserver : Ensure /etc/tuned/edb directory exists] ************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create tuned.conf for Postgres] ********************************************************************************************************
skipping: [localhost] => (item=[main]) 
skipping: [localhost] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server) 
skipping: [localhost] => (item=[cpu]) 
skipping: [localhost] => (item=governor=performance) 
skipping: [localhost] => (item=energy_perf_bias=performance) 
skipping: [localhost] => (item=min_perf_pct=100) 
skipping: [localhost] => (item=[disk]) 
skipping: [localhost] => (item=readahead=>4096) 
skipping: [localhost] => (item=[sysctl]) 
skipping: [localhost] => (item=vm.overcommit_memory=2) 
skipping: [localhost] => (item=vm.swappiness=1) 
skipping: [localhost] => (item=vm.dirty_ratio=30) 
skipping: [localhost] => (item=vm.dirty_background_ratio=10) 
skipping: [localhost] => (item=[vm]) 
skipping: [localhost] => (item=transparent_hugepages=never) 

TASK [edb_devops.edb_postgres.init_dbserver : Enable the tuned] **********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Load the new settings using tuned] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if Cluster has been initialized] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if Cluster has been initialized] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PGDATA and stop if exists] ******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres Data directory exists] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres Log directory exists] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres WAL directory exists] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Unix Socket Domain Directories] *************************************************************************************************
skipping: [localhost] => (item=/var/run/edb) 

TASK [edb_devops.edb_postgres.init_dbserver : Create hidden edb directory if not exists] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Define INITDB command.] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_WAL and accordingly add the in the INITDB] ***********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_ENCODING and accordingly add the in the INITDB] ******************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_LOCALE and accordingly add the in the INITDB] ********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Add other initdb options] **************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Initialize Database Postgres Service] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update unix_socket_directories if provided] ********************************************************************************************
skipping: [localhost] => (item={u'To': u"unix_socket_directories = '/var/run/edb'", u'From': u'#unix_socket_directories ='}) 
skipping: [localhost] => (item={u'To': u"shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'", u'From': u'shared_preload_libraries ='}) 
skipping: [localhost] => (item={u'To': u"shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'", u'From': u'#shared_preload_libraries ='}) 

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have the service file already created] *************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Copy postgres service file] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update Postgres Service File] **********************************************************************************************************
skipping: [localhost] => (item={u'To': u'Environment=PGDATA=/data/pgdata', u'From': u'Environment=PGDATA=/var/lib/edb/as12/data'}) 
skipping: [localhost] => (item={u'To': u'PIDFile=/data/pgdata/postmaster.pid', u'From': u'PIDFile=/var/lib/edb/as12/data/postmaster.pid'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Start the PG Service] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Set PG_SUPERUSER_PASSWORD if not provided] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Make sure file is has permission for owner only] ***************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Set Postgres Superuser's Database Cluster Password] ************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Configure unix socket directory] *******************************************************************************************************
skipping: [localhost] => (item={u'name': u'unix_socket_directories', u'value': u'/var/run/edb'}) 
skipping: [localhost] => (item={u'name': u'listen_addresses', u'value': u'*'}) 
skipping: [localhost] => (item={u'name': u'wal_level', u'value': u'replica'}) 
skipping: [localhost] => (item={u'name': u'max_wal_senders', u'value': 10}) 
skipping: [localhost] => (item={u'name': u'hot_standby', u'value': True}) 
skipping: [localhost] => (item={u'name': u'max_replication_slots', u'value': 10}) 
skipping: [localhost] => (item={u'name': u'wal_compression', u'value': True}) 
skipping: [localhost] => (item={u'name': u'wal_log_hints', u'value': True}) 
skipping: [localhost] => (item={u'name': u'checkpoint_timeout', u'value': u'15min'}) 
skipping: [localhost] => (item={u'name': u'checkpoint_completion_target', u'value': 0.9}) 
skipping: [localhost] => (item={u'name': u'archive_mode', u'value': True}) 
skipping: [localhost] => (item={u'name': u'archive_command', u'value': u'/bin/true'}) 
skipping: [localhost] => (item={u'name': u'random_page_cost', u'value': 1.1}) 
skipping: [localhost] => (item={u'name': u'cpu_tuple_cost', u'value': 0.03}) 
skipping: [localhost] => (item={u'name': u'logging_collector', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_line_prefix', u'value': u'%m [%p-%l] %u@%d app=%a '}) 
skipping: [localhost] => (item={u'name': u'log_truncate_on_rotation', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_rotation_size', u'value': u'1GB'}) 
skipping: [localhost] => (item={u'name': u'log_lock_waits', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_connections', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_disconnections', u'value': True}) 
skipping: [localhost] => (item={u'name': u'log_error_verbosity', u'value': u'default'}) 
skipping: [localhost] => (item={u'name': u'log_statement', u'value': u'ddl'}) 
skipping: [localhost] => (item={u'name': u'log_temp_files', u'value': 0}) 
skipping: [localhost] => (item={u'name': u'log_autovacuum_min_duration', u'value': 0}) 
skipping: [localhost] => (item={u'name': u'autovacuum_max_workers', u'value': 5}) 
skipping: [localhost] => (item={u'name': u'autovacuum_vacuum_cost_limit', u'value': 3000}) 
skipping: [localhost] => (item={u'name': u'idle_in_transaction_session_timeout', u'value': u'10 min'}) 
skipping: [localhost] => (item={u'name': u'syslog_ident', u'value': u'edb'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Configure primary_slot_name] ***********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Configure log_file_name] ***************************************************************************************************************
skipping: [localhost] => (item={u'name': u'log_filename', u'value': u'edb-%a.log'}) 
skipping: [localhost] => (item={u'name': u'log_directory', u'value': u'/var/log/edb'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Remove default log location] ***********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Make sure we have PG_SSL_DIR] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have CA key exists or not] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have CA certificate exists or not] *****************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have root.crt exists or not] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have root crl exists or not] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have server.key exists or not] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have server.crt exists or not] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create ssl extension in PG_DATABASE] ***************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create SSL cert key] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA key variable] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA Key file in PG_DATA] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a certificate authority key] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA certificate variable] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA certificate file in PG_DATA] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create root.crt using CA certificate file in PG_DATA] **********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a root.crl] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create root.crl] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create SSL Server key] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Server key variable] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Server Key file in PG_DATA] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a Server cert] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA certificate variable] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA certificate file in PG_DATA] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Find the HBA File location] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update localhost addresses entries into pg_hba file] ***********************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'replication'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'replication'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Update localhost addresses entries into pg_hba file] ***********************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'replication'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'replication'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Configure ssl Settings in postgresql.auto.conf] ****************************************************************************************
skipping: [localhost] => (item={u'name': u'ssl', u'value': u'on'}) 
skipping: [localhost] => (item={u'name': u'ssl_ca_file', u'value': u'/etc/edb/certs/root.crt'}) 
skipping: [localhost] => (item={u'name': u'ssl_key_file', u'value': u'/etc/edb/certs/server.key'}) 
skipping: [localhost] => (item={u'name': u'ssl_cert_file', u'value': u'/etc/edb/certs/server.crt'}) 
skipping: [localhost] => (item={u'name': u'ssl_crl_file', u'value': u'/etc/edb/certs/root.crl'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create optional Users] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create optional Databases] *************************************************************************************************************

TASK [edb_devops.edb_postgres.init_dbserver : Check user defined parameters and update] **********************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Find the HBA File location on primary] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Adding IP address entries into pg_hba file on primary] *********************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Adding IP address entries into pg_hba file on primary] *********************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Postgres extensions] ************************************************************************************************************
skipping: [localhost] => (item={u'name': u'edb_wait_states', u'database': u'edb'}) 
skipping: [localhost] => (item={u'name': u'edb_wait_states', u'database': u'postgres'}) 

TASK [edb_devops.edb_postgres.init_dbserver : GRANT execute privilege to users] ******************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : GRANT role to users] *******************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Copying the PG_COPY_SQL_SCRIPTS] *******************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Execute PG_SQL_SCRIPTS] ****************************************************************************************************************
skipping: [localhost] => (item=None) 
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reset FORCE/SKIP_INITIALIZE based on the user input] ***********************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : debug] *********************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 18.234.160.148"
}

TASK [edb_devops.edb_postgres.init_dbserver : Set Node Type] *************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : set FORCE_INITIALIZE based on the user input] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : include_tasks] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reference EPAS Variables] **************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Enumerate disks] ***********************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Update the block devices] **************************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item=nvme0n1)

TASK [edb_devops.edb_postgres.init_dbserver : Ensure /etc/tuned/edb directory exists] ************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Create tuned.conf for Postgres] ********************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item=[main])
ok: [localhost -> 18.234.160.148] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server)
ok: [localhost -> 18.234.160.148] => (item=[cpu])
ok: [localhost -> 18.234.160.148] => (item=governor=performance)
ok: [localhost -> 18.234.160.148] => (item=energy_perf_bias=performance)
ok: [localhost -> 18.234.160.148] => (item=min_perf_pct=100)
ok: [localhost -> 18.234.160.148] => (item=[disk])
ok: [localhost -> 18.234.160.148] => (item=readahead=>4096)
ok: [localhost -> 18.234.160.148] => (item=[sysctl])
ok: [localhost -> 18.234.160.148] => (item=vm.overcommit_memory=2)
ok: [localhost -> 18.234.160.148] => (item=vm.swappiness=1)
ok: [localhost -> 18.234.160.148] => (item=vm.dirty_ratio=30)
ok: [localhost -> 18.234.160.148] => (item=vm.dirty_background_ratio=10)
ok: [localhost -> 18.234.160.148] => (item=[vm])
ok: [localhost -> 18.234.160.148] => (item=transparent_hugepages=never)

TASK [edb_devops.edb_postgres.init_dbserver : Enable the tuned] **********************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Load the new settings using tuned] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Check if Cluster has been initialized] *************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Check if Cluster has been initialized] *************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PGDATA and stop if exists] ******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres Data directory exists] *************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres Log directory exists] **************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Ensure Postgres WAL directory exists] **************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Create Unix Socket Domain Directories] *************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item=/var/run/edb)

TASK [edb_devops.edb_postgres.init_dbserver : Create hidden edb directory if not exists] *********************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Define INITDB command.] ****************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_WAL and accordingly add the in the INITDB] ***********************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_ENCODING and accordingly add the in the INITDB] ******************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Verify PG_LOCALE and accordingly add the in the INITDB] ********************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Add other initdb options] **************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Initialize Database Postgres Service] **************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Update unix_socket_directories if provided] ********************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'To': u"unix_socket_directories = '/var/run/edb'", u'From': u'#unix_socket_directories ='})
ok: [localhost -> 18.234.160.148] => (item={u'To': u"shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'", u'From': u'shared_preload_libraries ='})
ok: [localhost -> 18.234.160.148] => (item={u'To': u"shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'", u'From': u'#shared_preload_libraries ='})

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have the service file already created] *************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Copy postgres service file] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update Postgres Service File] **********************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'To': u'Environment=PGDATA=/data/pgdata', u'From': u'Environment=PGDATA=/var/lib/edb/as12/data'})
ok: [localhost -> 18.234.160.148] => (item={u'To': u'PIDFile=/data/pgdata/postmaster.pid', u'From': u'PIDFile=/var/lib/edb/as12/data/postmaster.pid'})

TASK [edb_devops.edb_postgres.init_dbserver : Start the PG Service] ******************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Set PG_SUPERUSER_PASSWORD if not provided] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Make sure file is has permission for owner only] ***************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Set Postgres Superuser's Database Cluster Password] ************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Configure unix socket directory] *******************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'name': u'unix_socket_directories', u'value': u'/var/run/edb'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'listen_addresses', u'value': u'*'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'wal_level', u'value': u'replica'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'max_wal_senders', u'value': 10})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'hot_standby', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'max_replication_slots', u'value': 10})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'wal_compression', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'wal_log_hints', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'checkpoint_timeout', u'value': u'15min'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'checkpoint_completion_target', u'value': 0.9})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'archive_mode', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'archive_command', u'value': u'/bin/true'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'random_page_cost', u'value': 1.1})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'cpu_tuple_cost', u'value': 0.03})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'logging_collector', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_line_prefix', u'value': u'%m [%p-%l] %u@%d app=%a '})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_truncate_on_rotation', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_rotation_size', u'value': u'1GB'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_lock_waits', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_connections', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_disconnections', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_error_verbosity', u'value': u'default'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_statement', u'value': u'ddl'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_temp_files', u'value': 0})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_autovacuum_min_duration', u'value': 0})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'autovacuum_max_workers', u'value': 5})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'autovacuum_vacuum_cost_limit', u'value': 3000})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'idle_in_transaction_session_timeout', u'value': u'10 min'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'syslog_ident', u'value': u'edb'})

TASK [edb_devops.edb_postgres.init_dbserver : Configure primary_slot_name] ***********************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Configure log_file_name] ***************************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_filename', u'value': u'edb-%a.log'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'log_directory', u'value': u'/var/log/edb'})

TASK [edb_devops.edb_postgres.init_dbserver : Remove default log location] ***********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Make sure we have PG_SSL_DIR] **********************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have CA key exists or not] *************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have CA certificate exists or not] *****************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have root.crt exists or not] ***********************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have root crl exists or not] ***********************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have server.key exists or not] *********************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Check if we have server.crt exists or not] *********************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Create ssl extension in PG_DATABASE] ***************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Create SSL cert key] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA key variable] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA Key file in PG_DATA] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a certificate authority key] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA certificate variable] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA certificate file in PG_DATA] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create root.crt using CA certificate file in PG_DATA] **********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a root.crl] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create root.crl] ***********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create SSL Server key] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Server key variable] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Server Key file in PG_DATA] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create a Server cert] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : CA certificate variable] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create CA certificate file in PG_DATA] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Find the HBA File location] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Update localhost addresses entries into pg_hba file] ***********************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'replication'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'replication'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Update localhost addresses entries into pg_hba file] ***********************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'replication'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'replication'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Configure ssl Settings in postgresql.auto.conf] ****************************************************************************************
skipping: [localhost] => (item={u'name': u'ssl', u'value': u'on'}) 
skipping: [localhost] => (item={u'name': u'ssl_ca_file', u'value': u'/etc/edb/certs/root.crt'}) 
skipping: [localhost] => (item={u'name': u'ssl_key_file', u'value': u'/etc/edb/certs/server.key'}) 
skipping: [localhost] => (item={u'name': u'ssl_cert_file', u'value': u'/etc/edb/certs/server.crt'}) 
skipping: [localhost] => (item={u'name': u'ssl_crl_file', u'value': u'/etc/edb/certs/root.crl'}) 

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create optional Users] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create optional Databases] *************************************************************************************************************

TASK [edb_devops.edb_postgres.init_dbserver : Check user defined parameters and update] **********************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Find the HBA File location on primary] *************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.init_dbserver : Adding IP address entries into pg_hba file on primary] *********************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Adding IP address entries into pg_hba file on primary] *********************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Reload the PG Service] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Restart the PG Service] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Create Postgres extensions] ************************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'name': u'edb_wait_states', u'database': u'edb'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'edb_wait_states', u'database': u'postgres'})

TASK [edb_devops.edb_postgres.init_dbserver : GRANT execute privilege to users] ******************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : GRANT role to users] *******************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Copying the PG_COPY_SQL_SCRIPTS] *******************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.init_dbserver : Execute PG_SQL_SCRIPTS] ****************************************************************************************************************
skipping: [localhost] => (item=None) 
skipping: [localhost]

TASK [edb_devops.edb_postgres.init_dbserver : Reset FORCE/SKIP_INITIALIZE based on the user input] ***********************************************************************************
ok: [localhost]

TASK [Iterate through replication role with items from hosts file] *******************************************************************************************************************

TASK [edb_devops.edb_postgres.setup_replication : Reference EPAS Variables] **********************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reference EPAS Variables] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set USE_HOSTNAME based on variable condition and users input] **********************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Node Type = pemserver, Public IP = 54.165.62.96, Postgres Type = EPAS, ALL_NODE_IPS = [u'10.0.1.153', u'10.0.3.234', u'10.0.2.72', u'10.0.0.56'], PRIMARY_PRIVATE_IP = 10.0.0.56, PRIMARY_HOST_NAME = , USE_HOSTNAME = False, STANDBY_NAMES = [u'standby2', u'standby3']"
}

TASK [edb_devops.edb_postgres.setup_replication : Assign variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set FORCE_REPLICATION based on the user input] *************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : include_tasks] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : list the ssl file] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : create the local ssl directory] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : create the ssl directory on the server] ********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : fetch ssl to local] ****************************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_replication : Copy the SSL files to standby] *****************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_replication : Change the SSL files permission] ***************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_replication : Create .created_ssl file] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Remove the local ssl directory] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Enumerate disks] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Update the block devices] **********************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_replication : Ensure /etc/tuned/edb directory exists] ********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create tuned.conf for Postgres] ****************************************************************************************************
skipping: [localhost] => (item=[main]) 
skipping: [localhost] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server) 
skipping: [localhost] => (item=[cpu]) 
skipping: [localhost] => (item=governor=performance) 
skipping: [localhost] => (item=energy_perf_bias=performance) 
skipping: [localhost] => (item=min_perf_pct=100) 
skipping: [localhost] => (item=[disk]) 
skipping: [localhost] => (item=readahead=>4096) 
skipping: [localhost] => (item=[sysctl]) 
skipping: [localhost] => (item=vm.overcommit_memory=2) 
skipping: [localhost] => (item=vm.swappiness=1) 
skipping: [localhost] => (item=vm.dirty_ratio=30) 
skipping: [localhost] => (item=vm.dirty_background_ratio=10) 
skipping: [localhost] => (item=[vm]) 
skipping: [localhost] => (item=transparent_hugepages=never) 

TASK [edb_devops.edb_postgres.setup_replication : Enable the tuned] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Load the new settings using tuned] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if Cluster has been initialized] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if Cluster has been initialized] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Verify PGDATA and stop if exists] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres Data directory exists] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres Log directory exists] **********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres WAL directory exists] **********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create Unix Socket Domain Directories] *********************************************************************************************
skipping: [localhost] => (item=/var/run/edb) 

TASK [edb_devops.edb_postgres.setup_replication : Create hidden edb directory if not exists] *****************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set PG_REPLICATION_USER pass file] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set PG_REPLICATION_USER_PASSWORD if not provided] **********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create Replication user] ***********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create a .pgpass on primary] *******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on primary] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Create physical slots for standbys] ************************************************************************************************
skipping: [localhost] => (item=standby2) 
skipping: [localhost] => (item=standby3) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Define pg_basebackup command.] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Verify PG_WAL and accordingly add the in the INITDB] *******************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Add slot_name in pg_basebackup] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set replication user information] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set host and port] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set host and port] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Use other supplied options if given] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create a .pgpass] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create standby] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if we have the service file already created] *********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Copy postgres service file] ********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Update Postgres Service File] ******************************************************************************************************
skipping: [localhost] => (item={u'To': u'Environment=PGDATA=/data/pgdata', u'From': u'Environment=PGDATA=/var/lib/edb/as12/data'}) 
skipping: [localhost] => (item={u'To': u'PIDFile=/data/pgdata/postmaster.pid', u'From': u'PIDFile=/var/lib/edb/as12/data/postmaster.pid'}) 

TASK [edb_devops.edb_postgres.setup_replication : Start the PG Service] **************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Restart the PG Service] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Configure Global Settings in postgresql.auto.conf] *********************************************************************************
skipping: [localhost] => (item={u'name': u'log_filename', u'value': u'edb-%a.log'}) 
skipping: [localhost] => (item={u'name': u'log_directory', u'value': u'/var/log/edb'}) 

TASK [edb_devops.edb_postgres.setup_replication : Remove the default directory based on PG_LOG] **************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on standby] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on standby] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on standby] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set query if snchronous_standby_names is not empty] ********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if we have synchronous_standby_names set] ************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Standby Quorum string] *************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Build synchronous_standby_names] ***************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Build synchronous_standby_names on primary] ****************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set synchronous_standby_names] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set synchronous parameters as per setting on primary] ******************************************************************************
skipping: [localhost] => (item={u'name': u'synchronous_commit', u'value': u'remote_apply'}) 
skipping: [localhost] => (item={u'name': u'synchronous_standby_names', u'value': u''}) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check user defined parameters and update] ******************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on primary] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the PG Service] *************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Restart the PG Service] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reset FORCE_REPLICATION based on the user input] ***********************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reference EPAS Variables] **********************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reference EPAS Variables] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set USE_HOSTNAME based on variable condition and users input] **********************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Node Type = standby, Public IP = 3.92.47.17, Postgres Type = EPAS, ALL_NODE_IPS = [u'10.0.1.153', u'10.0.3.234', u'10.0.2.72', u'10.0.0.56'], PRIMARY_PRIVATE_IP = 10.0.0.56, PRIMARY_HOST_NAME = , USE_HOSTNAME = False, STANDBY_NAMES = [u'standby2', u'standby3']"
}

TASK [edb_devops.edb_postgres.setup_replication : Assign variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set FORCE_REPLICATION based on the user input] *************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : include_tasks] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : list the ssl file] *****************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : create the local ssl directory] ****************************************************************************************************
changed: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : create the ssl directory on the server] ********************************************************************************************
changed: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : fetch ssl to local] ****************************************************************************************************************
changed: [localhost -> 18.234.160.148] => (item=ca_certificate.crt)
changed: [localhost -> 18.234.160.148] => (item=ca_key.key)
changed: [localhost -> 18.234.160.148] => (item=root.crl)
changed: [localhost -> 18.234.160.148] => (item=root.crt)
changed: [localhost -> 18.234.160.148] => (item=server.crt)
changed: [localhost -> 18.234.160.148] => (item=server.key)

TASK [edb_devops.edb_postgres.setup_replication : Copy the SSL files to standby] *****************************************************************************************************
ok: [localhost -> 3.92.47.17] => (item=ca_certificate.crt)
ok: [localhost -> 3.92.47.17] => (item=ca_key.key)
ok: [localhost -> 3.92.47.17] => (item=root.crl)
ok: [localhost -> 3.92.47.17] => (item=root.crt)
ok: [localhost -> 3.92.47.17] => (item=server.crt)
ok: [localhost -> 3.92.47.17] => (item=server.key)

TASK [edb_devops.edb_postgres.setup_replication : Change the SSL files permission] ***************************************************************************************************
ok: [localhost -> 3.92.47.17] => (item=ca_certificate.crt)
ok: [localhost -> 3.92.47.17] => (item=ca_key.key)
ok: [localhost -> 3.92.47.17] => (item=root.crl)
ok: [localhost -> 3.92.47.17] => (item=root.crt)
ok: [localhost -> 3.92.47.17] => (item=server.crt)
ok: [localhost -> 3.92.47.17] => (item=server.key)

TASK [edb_devops.edb_postgres.setup_replication : Create .created_ssl file] **********************************************************************************************************
changed: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Remove the local ssl directory] ****************************************************************************************************
changed: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Enumerate disks] *******************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Update the block devices] **********************************************************************************************************
ok: [localhost -> 3.92.47.17] => (item=nvme0n1)

TASK [edb_devops.edb_postgres.setup_replication : Ensure /etc/tuned/edb directory exists] ********************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Create tuned.conf for Postgres] ****************************************************************************************************
ok: [localhost -> 3.92.47.17] => (item=[main])
ok: [localhost -> 3.92.47.17] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server)
ok: [localhost -> 3.92.47.17] => (item=[cpu])
ok: [localhost -> 3.92.47.17] => (item=governor=performance)
ok: [localhost -> 3.92.47.17] => (item=energy_perf_bias=performance)
ok: [localhost -> 3.92.47.17] => (item=min_perf_pct=100)
ok: [localhost -> 3.92.47.17] => (item=[disk])
ok: [localhost -> 3.92.47.17] => (item=readahead=>4096)
ok: [localhost -> 3.92.47.17] => (item=[sysctl])
ok: [localhost -> 3.92.47.17] => (item=vm.overcommit_memory=2)
ok: [localhost -> 3.92.47.17] => (item=vm.swappiness=1)
ok: [localhost -> 3.92.47.17] => (item=vm.dirty_ratio=30)
ok: [localhost -> 3.92.47.17] => (item=vm.dirty_background_ratio=10)
ok: [localhost -> 3.92.47.17] => (item=[vm])
ok: [localhost -> 3.92.47.17] => (item=transparent_hugepages=never)

TASK [edb_devops.edb_postgres.setup_replication : Enable the tuned] ******************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Load the new settings using tuned] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if Cluster has been initialized] *********************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Check if Cluster has been initialized] *********************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Verify PGDATA and stop if exists] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres Data directory exists] *********************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres Log directory exists] **********************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres WAL directory exists] **********************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Create Unix Socket Domain Directories] *********************************************************************************************
ok: [localhost -> 3.92.47.17] => (item=/var/run/edb)

TASK [edb_devops.edb_postgres.setup_replication : Create hidden edb directory if not exists] *****************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set PG_REPLICATION_USER pass file] *************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Set PG_REPLICATION_USER_PASSWORD if not provided] **********************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create Replication user] ***********************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : Create a .pgpass on primary] *******************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on primary] *********************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
ok: [localhost -> 18.234.160.148] => (item=10.0.1.153)
ok: [localhost -> 18.234.160.148] => (item=10.0.3.234)
ok: [localhost -> 18.234.160.148] => (item=10.0.2.72)
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Create physical slots for standbys] ************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item=standby2)
ok: [localhost -> 18.234.160.148] => (item=standby3)

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Define pg_basebackup command.] *****************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Verify PG_WAL and accordingly add the in the INITDB] *******************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Add slot_name in pg_basebackup] ****************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : set replication user information] **************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : set host and port] *****************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : set host and port] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Use other supplied options if given] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create a .pgpass] ******************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Create standby] ********************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Check if we have the service file already created] *********************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Copy postgres service file] ********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Update Postgres Service File] ******************************************************************************************************
ok: [localhost -> 3.92.47.17] => (item={u'To': u'Environment=PGDATA=/data/pgdata', u'From': u'Environment=PGDATA=/var/lib/edb/as12/data'})
ok: [localhost -> 3.92.47.17] => (item={u'To': u'PIDFile=/data/pgdata/postmaster.pid', u'From': u'PIDFile=/var/lib/edb/as12/data/postmaster.pid'})

TASK [edb_devops.edb_postgres.setup_replication : Start the PG Service] **************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Restart the PG Service] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Configure Global Settings in postgresql.auto.conf] *********************************************************************************
ok: [localhost -> 3.92.47.17] => (item={u'name': u'log_filename', u'value': u'edb-%a.log'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'log_directory', u'value': u'/var/log/edb'})

TASK [edb_devops.edb_postgres.setup_replication : Remove the default directory based on PG_LOG] **************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on standby] *********************************************************************************************
changed: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on standby] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on standby] *********************************************************************
ok: [localhost -> 3.92.47.17] => (item=10.0.1.153)
skipping: [localhost] => (item=10.0.3.234) 
ok: [localhost -> 3.92.47.17] => (item=10.0.2.72)
ok: [localhost -> 3.92.47.17] => (item=10.0.0.56)

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set query if snchronous_standby_names is not empty] ********************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Check if we have synchronous_standby_names set] ************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : Standby Quorum string] *************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Build synchronous_standby_names] ***************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Build synchronous_standby_names on primary] ****************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set synchronous_standby_names] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set synchronous parameters as per setting on primary] ******************************************************************************
skipping: [localhost] => (item={u'name': u'synchronous_commit', u'value': u'remote_apply'}) 
skipping: [localhost] => (item={u'name': u'synchronous_standby_names', u'value': u'ANY 1 (standby2)'}) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check user defined parameters and update] ******************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on primary] *********************************************************************************************
changed: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the PG Service] *************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Restart the PG Service] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reset FORCE_REPLICATION based on the user input] ***********************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reference EPAS Variables] **********************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reference EPAS Variables] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set USE_HOSTNAME based on variable condition and users input] **********************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Node Type = standby, Public IP = 52.55.189.7, Postgres Type = EPAS, ALL_NODE_IPS = [u'10.0.1.153', u'10.0.3.234', u'10.0.2.72', u'10.0.0.56'], PRIMARY_PRIVATE_IP = 10.0.0.56, PRIMARY_HOST_NAME = , USE_HOSTNAME = False, STANDBY_NAMES = [u'standby2', u'standby3']"
}

TASK [edb_devops.edb_postgres.setup_replication : Assign variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set FORCE_REPLICATION based on the user input] *************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : include_tasks] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : list the ssl file] *****************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : create the local ssl directory] ****************************************************************************************************
changed: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : create the ssl directory on the server] ********************************************************************************************
changed: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : fetch ssl to local] ****************************************************************************************************************
changed: [localhost -> 18.234.160.148] => (item=ca_certificate.crt)
changed: [localhost -> 18.234.160.148] => (item=ca_key.key)
changed: [localhost -> 18.234.160.148] => (item=root.crl)
changed: [localhost -> 18.234.160.148] => (item=root.crt)
changed: [localhost -> 18.234.160.148] => (item=server.crt)
changed: [localhost -> 18.234.160.148] => (item=server.key)

TASK [edb_devops.edb_postgres.setup_replication : Copy the SSL files to standby] *****************************************************************************************************
ok: [localhost -> 52.55.189.7] => (item=ca_certificate.crt)
ok: [localhost -> 52.55.189.7] => (item=ca_key.key)
ok: [localhost -> 52.55.189.7] => (item=root.crl)
ok: [localhost -> 52.55.189.7] => (item=root.crt)
ok: [localhost -> 52.55.189.7] => (item=server.crt)
ok: [localhost -> 52.55.189.7] => (item=server.key)

TASK [edb_devops.edb_postgres.setup_replication : Change the SSL files permission] ***************************************************************************************************
ok: [localhost -> 52.55.189.7] => (item=ca_certificate.crt)
ok: [localhost -> 52.55.189.7] => (item=ca_key.key)
ok: [localhost -> 52.55.189.7] => (item=root.crl)
ok: [localhost -> 52.55.189.7] => (item=root.crt)
ok: [localhost -> 52.55.189.7] => (item=server.crt)
ok: [localhost -> 52.55.189.7] => (item=server.key)

TASK [edb_devops.edb_postgres.setup_replication : Create .created_ssl file] **********************************************************************************************************
changed: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Remove the local ssl directory] ****************************************************************************************************
changed: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Enumerate disks] *******************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Update the block devices] **********************************************************************************************************
ok: [localhost -> 52.55.189.7] => (item=nvme0n1)

TASK [edb_devops.edb_postgres.setup_replication : Ensure /etc/tuned/edb directory exists] ********************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Create tuned.conf for Postgres] ****************************************************************************************************
ok: [localhost -> 52.55.189.7] => (item=[main])
ok: [localhost -> 52.55.189.7] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server)
ok: [localhost -> 52.55.189.7] => (item=[cpu])
ok: [localhost -> 52.55.189.7] => (item=governor=performance)
ok: [localhost -> 52.55.189.7] => (item=energy_perf_bias=performance)
ok: [localhost -> 52.55.189.7] => (item=min_perf_pct=100)
ok: [localhost -> 52.55.189.7] => (item=[disk])
ok: [localhost -> 52.55.189.7] => (item=readahead=>4096)
ok: [localhost -> 52.55.189.7] => (item=[sysctl])
ok: [localhost -> 52.55.189.7] => (item=vm.overcommit_memory=2)
ok: [localhost -> 52.55.189.7] => (item=vm.swappiness=1)
ok: [localhost -> 52.55.189.7] => (item=vm.dirty_ratio=30)
ok: [localhost -> 52.55.189.7] => (item=vm.dirty_background_ratio=10)
ok: [localhost -> 52.55.189.7] => (item=[vm])
ok: [localhost -> 52.55.189.7] => (item=transparent_hugepages=never)

TASK [edb_devops.edb_postgres.setup_replication : Enable the tuned] ******************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Load the new settings using tuned] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if Cluster has been initialized] *********************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Check if Cluster has been initialized] *********************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Verify PGDATA and stop if exists] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres Data directory exists] *********************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres Log directory exists] **********************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres WAL directory exists] **********************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Create Unix Socket Domain Directories] *********************************************************************************************
ok: [localhost -> 52.55.189.7] => (item=/var/run/edb)

TASK [edb_devops.edb_postgres.setup_replication : Create hidden edb directory if not exists] *****************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set PG_REPLICATION_USER pass file] *************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Set PG_REPLICATION_USER_PASSWORD if not provided] **********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create Replication user] ***********************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : Create a .pgpass on primary] *******************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on primary] *********************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
ok: [localhost -> 18.234.160.148] => (item=10.0.1.153)
ok: [localhost -> 18.234.160.148] => (item=10.0.3.234)
ok: [localhost -> 18.234.160.148] => (item=10.0.2.72)
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Create physical slots for standbys] ************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item=standby2)
ok: [localhost -> 18.234.160.148] => (item=standby3)

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Define pg_basebackup command.] *****************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Verify PG_WAL and accordingly add the in the INITDB] *******************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Add slot_name in pg_basebackup] ****************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : set replication user information] **************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : set host and port] *****************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : set host and port] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Use other supplied options if given] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create a .pgpass] ******************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Create standby] ********************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Check if we have the service file already created] *********************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Copy postgres service file] ********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Update Postgres Service File] ******************************************************************************************************
ok: [localhost -> 52.55.189.7] => (item={u'To': u'Environment=PGDATA=/data/pgdata', u'From': u'Environment=PGDATA=/var/lib/edb/as12/data'})
ok: [localhost -> 52.55.189.7] => (item={u'To': u'PIDFile=/data/pgdata/postmaster.pid', u'From': u'PIDFile=/var/lib/edb/as12/data/postmaster.pid'})

TASK [edb_devops.edb_postgres.setup_replication : Start the PG Service] **************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Restart the PG Service] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Configure Global Settings in postgresql.auto.conf] *********************************************************************************
ok: [localhost -> 52.55.189.7] => (item={u'name': u'log_filename', u'value': u'edb-%a.log'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'log_directory', u'value': u'/var/log/edb'})

TASK [edb_devops.edb_postgres.setup_replication : Remove the default directory based on PG_LOG] **************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on standby] *********************************************************************************************
changed: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on standby] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on standby] *********************************************************************
ok: [localhost -> 52.55.189.7] => (item=10.0.1.153)
ok: [localhost -> 52.55.189.7] => (item=10.0.3.234)
skipping: [localhost] => (item=10.0.2.72) 
ok: [localhost -> 52.55.189.7] => (item=10.0.0.56)

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set query if snchronous_standby_names is not empty] ********************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Check if we have synchronous_standby_names set] ************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_replication : Standby Quorum string] *************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Build synchronous_standby_names] ***************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Build synchronous_standby_names on primary] ****************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set synchronous_standby_names] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set synchronous parameters as per setting on primary] ******************************************************************************
skipping: [localhost] => (item={u'name': u'synchronous_commit', u'value': u'remote_apply'}) 
skipping: [localhost] => (item={u'name': u'synchronous_standby_names', u'value': u'ANY 1 (standby2)'}) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check user defined parameters and update] ******************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on primary] *********************************************************************************************
changed: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the PG Service] *************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Restart the PG Service] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reset FORCE_REPLICATION based on the user input] ***********************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reference EPAS Variables] **********************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reference EPAS Variables] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set USE_HOSTNAME based on variable condition and users input] **********************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : debug] *****************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Node Type = primary, Public IP = 18.234.160.148, Postgres Type = EPAS, ALL_NODE_IPS = [u'10.0.1.153', u'10.0.3.234', u'10.0.2.72', u'10.0.0.56'], PRIMARY_PRIVATE_IP = 10.0.0.56, PRIMARY_HOST_NAME = , USE_HOSTNAME = False, STANDBY_NAMES = [u'standby2', u'standby3']"
}

TASK [edb_devops.edb_postgres.setup_replication : Assign variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set FORCE_REPLICATION based on the user input] *************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : include_tasks] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : list the ssl file] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : create the local ssl directory] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : create the ssl directory on the server] ********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : fetch ssl to local] ****************************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_replication : Copy the SSL files to standby] *****************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_replication : Change the SSL files permission] ***************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_replication : Create .created_ssl file] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Remove the local ssl directory] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Enumerate disks] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Update the block devices] **********************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_replication : Ensure /etc/tuned/edb directory exists] ********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create tuned.conf for Postgres] ****************************************************************************************************
skipping: [localhost] => (item=[main]) 
skipping: [localhost] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server) 
skipping: [localhost] => (item=[cpu]) 
skipping: [localhost] => (item=governor=performance) 
skipping: [localhost] => (item=energy_perf_bias=performance) 
skipping: [localhost] => (item=min_perf_pct=100) 
skipping: [localhost] => (item=[disk]) 
skipping: [localhost] => (item=readahead=>4096) 
skipping: [localhost] => (item=[sysctl]) 
skipping: [localhost] => (item=vm.overcommit_memory=2) 
skipping: [localhost] => (item=vm.swappiness=1) 
skipping: [localhost] => (item=vm.dirty_ratio=30) 
skipping: [localhost] => (item=vm.dirty_background_ratio=10) 
skipping: [localhost] => (item=[vm]) 
skipping: [localhost] => (item=transparent_hugepages=never) 

TASK [edb_devops.edb_postgres.setup_replication : Enable the tuned] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Load the new settings using tuned] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if Cluster has been initialized] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if Cluster has been initialized] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Verify PGDATA and stop if exists] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres Data directory exists] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres Log directory exists] **********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Ensure Postgres WAL directory exists] **********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create Unix Socket Domain Directories] *********************************************************************************************
skipping: [localhost] => (item=/var/run/edb) 

TASK [edb_devops.edb_postgres.setup_replication : Create hidden edb directory if not exists] *****************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set PG_REPLICATION_USER pass file] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set PG_REPLICATION_USER_PASSWORD if not provided] **********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create Replication user] ***********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create a .pgpass on primary] *******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on primary] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Create physical slots for standbys] ************************************************************************************************
skipping: [localhost] => (item=standby2) 
skipping: [localhost] => (item=standby3) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Define pg_basebackup command.] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Verify PG_WAL and accordingly add the in the INITDB] *******************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Add slot_name in pg_basebackup] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set replication user information] **************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set host and port] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : set host and port] *****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Use other supplied options if given] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create a .pgpass] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Create standby] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if we have the service file already created] *********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Copy postgres service file] ********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Update Postgres Service File] ******************************************************************************************************
skipping: [localhost] => (item={u'To': u'Environment=PGDATA=/data/pgdata', u'From': u'Environment=PGDATA=/var/lib/edb/as12/data'}) 
skipping: [localhost] => (item={u'To': u'PIDFile=/data/pgdata/postmaster.pid', u'From': u'PIDFile=/var/lib/edb/as12/data/postmaster.pid'}) 

TASK [edb_devops.edb_postgres.setup_replication : Start the PG Service] **************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Restart the PG Service] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Configure Global Settings in postgresql.auto.conf] *********************************************************************************
skipping: [localhost] => (item={u'name': u'log_filename', u'value': u'edb-%a.log'}) 
skipping: [localhost] => (item={u'name': u'log_directory', u'value': u'/var/log/edb'}) 

TASK [edb_devops.edb_postgres.setup_replication : Remove the default directory based on PG_LOG] **************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on standby] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on standby] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on standby] *********************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set query if snchronous_standby_names is not empty] ********************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check if we have synchronous_standby_names set] ************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Standby Quorum string] *************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Build synchronous_standby_names] ***************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Build synchronous_standby_names on primary] ****************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set synchronous_standby_names] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Set synchronous parameters as per setting on primary] ******************************************************************************
skipping: [localhost] => (item={u'name': u'synchronous_commit', u'value': u'remote_apply'}) 
skipping: [localhost] => (item={u'name': u'synchronous_standby_names', u'value': u'ANY 1 (standby2)'}) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the Primary PG Service] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Check user defined parameters and update] ******************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Find the HBA File location on primary] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Adding standby IP address entries into pg_hba file on primary] *********************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_replication : Reload the PG Service] *************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Restart the PG Service] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_replication : Reset FORCE_REPLICATION based on the user input] ***********************************************************************************
ok: [localhost]

TASK [Iterate through efm install role with items from hosts file] *******************************************************************************************************************

TASK [edb_devops.edb_postgres.setup_efm : Reference EPAS Variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reference PG Variables] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Set Node Type] *****************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Set EFM nodes and witness Type] ************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Prepare EFM node list] *********************************************************************************************************************
ok: [localhost] => (item=10.0.3.234)
ok: [localhost] => (item=10.0.2.72)
ok: [localhost] => (item=10.0.0.56)

TASK [edb_devops.edb_postgres.setup_efm : Set USE_HOSTNAME based on variable condition and users input] ******************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = pemserver, PG_DATA = /data/pgdata, EFM_SERVICE = edb-efm-4.0, EFM_NODES_LIST = 10.0.3.234:7800 10.0.2.72:7800 10.0.0.56:7800 , USE_HOSTNAME = False, EFM_WITNESS =  False, PG_EFM_USER = efm, Public IP = 54.165.62.96"
}

TASK [edb_devops.edb_postgres.setup_efm : Set FORCE_EFM_INSTALL based on the user input] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Prepare EFM node list based on hostname] ***************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : include_tasks] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : include_tasks] *****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_efm/tasks/C07-RH07-EFM-user.yml for localhost

TASK [edb_devops.edb_postgres.setup_efm : Set PG_REPLICATION_USER_PASSWORD if not provided] ******************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Create EDB efm role if not exists] *********************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : GRANT execute privilege on system functions to EFM user] ***********************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Find the HBA File location on the node] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ****************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ****************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_efm : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Install Software for EFM] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Install EFM dependencies] ******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Check if we have efm.properties file or not] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Check if we have efm.nodes file or not] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Create EFM properties File] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Create EFM nodes File] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Update private IPs in efm.nodes file] ******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Update private IPs in efm.nodes file] ******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Generate EFM encrypted Password] ***********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item={u'name': u'db.user', u'value': u'efm'}) 
skipping: [localhost] => (item={u'name': u'db.port', u'value': 5444}) 
skipping: [localhost] => (item={u'name': u'db.database', u'value': u'edb'}) 
skipping: [localhost] => (item={u'name': u'db.service.owner', u'value': u'enterprisedb'}) 
skipping: [localhost] => (item={u'name': u'db.service.name', u'value': u'edb-as-12'}) 
skipping: [localhost] => (item={u'name': u'db.bin', u'value': u'/usr/edb/as12/bin'}) 
skipping: [localhost] => (item={u'name': u'db.recovery.dir', u'value': u'/data/pgdata'}) 
skipping: [localhost] => (item={u'name': u'db.data.dir', u'value': u'/data/pgdata'}) 
skipping: [localhost] => (item={u'name': u'user.email', u'value': u'unknown@gmail.com'}) 
skipping: [localhost] => (item={u'name': u'auto.allow.hosts', u'value': True}) 
skipping: [localhost] => (item={u'name': u'stable.nodes.file', u'value': True}) 
skipping: [localhost] => (item={u'name': u'update.physical.slots.period', u'value': u'5'}) 
skipping: [localhost] => (item={u'name': u'local.period', u'value': u'3'}) 
skipping: [localhost] => (item={u'name': u'local.timeout', u'value': u'5'}) 
skipping: [localhost] => (item={u'name': u'local.timeout.final', u'value': u'5'}) 
skipping: [localhost] => (item={u'name': u'remote.timeout', u'value': u'5'}) 
skipping: [localhost] => (item={u'name': u'node.timeout', u'value': u'5'}) 

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_efm : Stop the EFM service on all the nodes if change in nodes file or properties] ***************************************************************
skipping: [localhost] => (item=3.92.47.17) 
skipping: [localhost] => (item=52.55.189.7) 
skipping: [localhost] => (item=18.234.160.148) 

TASK [edb_devops.edb_postgres.setup_efm : Start EFM service] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Restart the EFM service] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Allow efm node on all the host] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Allow efm node on all the host] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Copying the scripts] ***********************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : Restart the EFM service] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reset FORCE/SKIPP_EFM_INSTALL based on the user input] *************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reference EPAS Variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reference PG Variables] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Set Node Type] *****************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Set EFM nodes and witness Type] ************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Prepare EFM node list] *********************************************************************************************************************
ok: [localhost] => (item=10.0.3.234)
ok: [localhost] => (item=10.0.2.72)
ok: [localhost] => (item=10.0.0.56)

TASK [edb_devops.edb_postgres.setup_efm : Set USE_HOSTNAME based on variable condition and users input] ******************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = standby, PG_DATA = /data/pgdata, EFM_SERVICE = edb-efm-4.0, EFM_NODES_LIST = 10.0.3.234:7800 10.0.2.72:7800 10.0.0.56:7800 , USE_HOSTNAME = False, EFM_WITNESS =  False, PG_EFM_USER = efm, Public IP = 3.92.47.17"
}

TASK [edb_devops.edb_postgres.setup_efm : Set FORCE_EFM_INSTALL based on the user input] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Prepare EFM node list based on hostname] ***************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : include_tasks] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : include_tasks] *****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_efm/tasks/C07-RH07-EFM-user.yml for localhost

TASK [edb_devops.edb_postgres.setup_efm : Set PG_REPLICATION_USER_PASSWORD if not provided] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Create EDB efm role if not exists] *********************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : GRANT execute privilege on system functions to EFM user] ***********************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Find the HBA File location on the node] ****************************************************************************************************
changed: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ****************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ****************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
ok: [localhost -> 3.92.47.17] => (item=10.0.1.153)
ok: [localhost -> 3.92.47.17] => (item=10.0.3.234)
ok: [localhost -> 3.92.47.17] => (item=10.0.2.72)
ok: [localhost -> 3.92.47.17] => (item=10.0.0.56)

TASK [edb_devops.edb_postgres.setup_efm : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Install Software for EFM] ******************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Install EFM dependencies] ******************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Check if we have efm.properties file or not] ***********************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Check if we have efm.nodes file or not] ****************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Create EFM properties File] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Create EFM nodes File] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Update private IPs in efm.nodes file] ******************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Update private IPs in efm.nodes file] ******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Generate EFM encrypted Password] ***********************************************************************************************************
changed: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
ok: [localhost -> 3.92.47.17] => (item={u'name': u'db.user', u'value': u'efm'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'db.port', u'value': 5444})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'db.database', u'value': u'edb'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'db.service.owner', u'value': u'enterprisedb'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'db.service.name', u'value': u'edb-as-12'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'db.bin', u'value': u'/usr/edb/as12/bin'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'db.recovery.dir', u'value': u'/data/pgdata'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'db.data.dir', u'value': u'/data/pgdata'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'user.email', u'value': u'unknown@gmail.com'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'auto.allow.hosts', u'value': True})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'stable.nodes.file', u'value': True})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'update.physical.slots.period', u'value': u'5'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'local.period', u'value': u'3'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'local.timeout', u'value': u'5'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'local.timeout.final', u'value': u'5'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'remote.timeout', u'value': u'5'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'node.timeout', u'value': u'5'})

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
ok: [localhost -> 3.92.47.17] => (item={u'name': u'db.password.encrypted', u'value': u'c26599df421350696c7c511a1674a14d00aa1381d0f8dd4baf37adf170276763'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'bind.address', u'value': u'10.0.3.234:7800'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'application.name', u'value': u'standby2'})
ok: [localhost -> 3.92.47.17] => (item={u'name': u'is.witness', u'value': False})

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_efm : Stop the EFM service on all the nodes if change in nodes file or properties] ***************************************************************
skipping: [localhost] => (item=3.92.47.17) 
skipping: [localhost] => (item=52.55.189.7) 
skipping: [localhost] => (item=18.234.160.148) 

TASK [edb_devops.edb_postgres.setup_efm : Start EFM service] *************************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Restart the EFM service] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Allow efm node on all the host] ************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_efm : Allow efm node on all the host] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Copying the scripts] ***********************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : Restart the EFM service] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reset FORCE/SKIPP_EFM_INSTALL based on the user input] *************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reference EPAS Variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reference PG Variables] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Set Node Type] *****************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Set EFM nodes and witness Type] ************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Prepare EFM node list] *********************************************************************************************************************
ok: [localhost] => (item=10.0.3.234)
ok: [localhost] => (item=10.0.2.72)
ok: [localhost] => (item=10.0.0.56)

TASK [edb_devops.edb_postgres.setup_efm : Set USE_HOSTNAME based on variable condition and users input] ******************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = standby, PG_DATA = /data/pgdata, EFM_SERVICE = edb-efm-4.0, EFM_NODES_LIST = 10.0.3.234:7800 10.0.2.72:7800 10.0.0.56:7800 , USE_HOSTNAME = False, EFM_WITNESS =  False, PG_EFM_USER = efm, Public IP = 52.55.189.7"
}

TASK [edb_devops.edb_postgres.setup_efm : Set FORCE_EFM_INSTALL based on the user input] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Prepare EFM node list based on hostname] ***************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : include_tasks] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : include_tasks] *****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_efm/tasks/C07-RH07-EFM-user.yml for localhost

TASK [edb_devops.edb_postgres.setup_efm : Set PG_REPLICATION_USER_PASSWORD if not provided] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Create EDB efm role if not exists] *********************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : GRANT execute privilege on system functions to EFM user] ***********************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Find the HBA File location on the node] ****************************************************************************************************
changed: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ****************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ****************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
ok: [localhost -> 52.55.189.7] => (item=10.0.1.153)
ok: [localhost -> 52.55.189.7] => (item=10.0.3.234)
ok: [localhost -> 52.55.189.7] => (item=10.0.2.72)
ok: [localhost -> 52.55.189.7] => (item=10.0.0.56)

TASK [edb_devops.edb_postgres.setup_efm : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Install Software for EFM] ******************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Install EFM dependencies] ******************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Check if we have efm.properties file or not] ***********************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Check if we have efm.nodes file or not] ****************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Create EFM properties File] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Create EFM nodes File] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Update private IPs in efm.nodes file] ******************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Update private IPs in efm.nodes file] ******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Generate EFM encrypted Password] ***********************************************************************************************************
changed: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
ok: [localhost -> 52.55.189.7] => (item={u'name': u'db.user', u'value': u'efm'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'db.port', u'value': 5444})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'db.database', u'value': u'edb'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'db.service.owner', u'value': u'enterprisedb'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'db.service.name', u'value': u'edb-as-12'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'db.bin', u'value': u'/usr/edb/as12/bin'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'db.recovery.dir', u'value': u'/data/pgdata'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'db.data.dir', u'value': u'/data/pgdata'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'user.email', u'value': u'unknown@gmail.com'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'auto.allow.hosts', u'value': True})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'stable.nodes.file', u'value': True})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'update.physical.slots.period', u'value': u'5'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'local.period', u'value': u'3'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'local.timeout', u'value': u'5'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'local.timeout.final', u'value': u'5'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'remote.timeout', u'value': u'5'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'node.timeout', u'value': u'5'})

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
ok: [localhost -> 52.55.189.7] => (item={u'name': u'db.password.encrypted', u'value': u'c26599df421350696c7c511a1674a14d00aa1381d0f8dd4baf37adf170276763'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'bind.address', u'value': u'10.0.2.72:7800'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'application.name', u'value': u'standby3'})
ok: [localhost -> 52.55.189.7] => (item={u'name': u'is.witness', u'value': False})

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_efm : Stop the EFM service on all the nodes if change in nodes file or properties] ***************************************************************
skipping: [localhost] => (item=3.92.47.17) 
skipping: [localhost] => (item=52.55.189.7) 
skipping: [localhost] => (item=18.234.160.148) 

TASK [edb_devops.edb_postgres.setup_efm : Start EFM service] *************************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Restart the EFM service] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Allow efm node on all the host] ************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_efm : Allow efm node on all the host] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Copying the scripts] ***********************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : Restart the EFM service] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reset FORCE/SKIPP_EFM_INSTALL based on the user input] *************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reference EPAS Variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reference PG Variables] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Set Node Type] *****************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Set EFM nodes and witness Type] ************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Prepare EFM node list] *********************************************************************************************************************
ok: [localhost] => (item=10.0.3.234)
ok: [localhost] => (item=10.0.2.72)
ok: [localhost] => (item=10.0.0.56)

TASK [edb_devops.edb_postgres.setup_efm : Set USE_HOSTNAME based on variable condition and users input] ******************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : debug] *************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = primary, PG_DATA = /data/pgdata, EFM_SERVICE = edb-efm-4.0, EFM_NODES_LIST = 10.0.3.234:7800 10.0.2.72:7800 10.0.0.56:7800 , USE_HOSTNAME = False, EFM_WITNESS =  False, PG_EFM_USER = efm, Public IP = 18.234.160.148"
}

TASK [edb_devops.edb_postgres.setup_efm : Set FORCE_EFM_INSTALL based on the user input] *********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Prepare EFM node list based on hostname] ***************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : include_tasks] *****************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : include_tasks] *****************************************************************************************************************************
included: /root/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_efm/tasks/C07-RH07-EFM-user.yml for localhost

TASK [edb_devops.edb_postgres.setup_efm : Set PG_REPLICATION_USER_PASSWORD if not provided] ******************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Create EDB efm role if not exists] *********************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : GRANT execute privilege on system functions to EFM user] ***********************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Find the HBA File location on the node] ****************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ****************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item=10.0.1.153) 
skipping: [localhost] => (item=10.0.3.234) 
skipping: [localhost] => (item=10.0.2.72) 
skipping: [localhost] => (item=10.0.0.56) 

TASK [edb_devops.edb_postgres.setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ****************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
ok: [localhost -> 18.234.160.148] => (item=10.0.1.153)
ok: [localhost -> 18.234.160.148] => (item=10.0.3.234)
ok: [localhost -> 18.234.160.148] => (item=10.0.2.72)
ok: [localhost -> 18.234.160.148] => (item=10.0.0.56)

TASK [edb_devops.edb_postgres.setup_efm : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Install Software for EFM] ******************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Install EFM dependencies] ******************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Check if we have efm.properties file or not] ***********************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Check if we have efm.nodes file or not] ****************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Create EFM properties File] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Create EFM nodes File] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Update private IPs in efm.nodes file] ******************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Update private IPs in efm.nodes file] ******************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Generate EFM encrypted Password] ***********************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'name': u'db.user', u'value': u'efm'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'db.port', u'value': 5444})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'db.database', u'value': u'edb'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'db.service.owner', u'value': u'enterprisedb'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'db.service.name', u'value': u'edb-as-12'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'db.bin', u'value': u'/usr/edb/as12/bin'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'db.recovery.dir', u'value': u'/data/pgdata'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'db.data.dir', u'value': u'/data/pgdata'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'user.email', u'value': u'unknown@gmail.com'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'auto.allow.hosts', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'stable.nodes.file', u'value': True})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'update.physical.slots.period', u'value': u'5'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'local.period', u'value': u'3'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'local.timeout', u'value': u'5'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'local.timeout.final', u'value': u'5'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'remote.timeout', u'value': u'5'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'node.timeout', u'value': u'5'})

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'name': u'db.password.encrypted', u'value': u'c26599df421350696c7c511a1674a14d00aa1381d0f8dd4baf37adf170276763'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'bind.address', u'value': u'10.0.0.56:7800'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'application.name', u'value': u'primary1'})
ok: [localhost -> 18.234.160.148] => (item={u'name': u'is.witness', u'value': False})

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item=None) 

TASK [edb_devops.edb_postgres.setup_efm : Stop the EFM service on all the nodes if change in nodes file or properties] ***************************************************************
skipping: [localhost] => (item=3.92.47.17) 
skipping: [localhost] => (item=52.55.189.7) 
skipping: [localhost] => (item=18.234.160.148) 

TASK [edb_devops.edb_postgres.setup_efm : Start EFM service] *************************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Restart the EFM service] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Allow efm node on all the host] ************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_efm : Allow efm node on all the host] ************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Copying the scripts] ***********************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : Update EFM efm.properties File] ************************************************************************************************************
skipping: [localhost] => (item=) 

TASK [edb_devops.edb_postgres.setup_efm : Restart the EFM service] *******************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_efm : Reset FORCE/SKIPP_EFM_INSTALL based on the user input] *************************************************************************************
ok: [localhost]

TASK [Iterate through pem install role with items from hosts file] *******************************************************************************************************************

TASK [edb_devops.edb_postgres.setup_pem : Reference EPAS Variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reference PG Variables] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set Node Type] *****************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = pemserver, PG_DATA = /data/pgdata, Public IP = 54.165.62.96"
}

TASK [edb_devops.edb_postgres.setup_pem : Set FORCE_INSTALL based on the user input] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set PEM_AGENT based on the user input] *****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Stopped pemagent] **************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove pem ceritficate directory] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove agent.cfg] **************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove worker.log] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set PG_PEM_ADMIN_PASSWORD if not provided] *************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create EDB pem superuser role if not exists] ***********************************************************************************************
changed: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_pem : Check if we PEM server is already configured] **********************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install pem server] ************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update agent to use hostssl] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries for hostssl into pg_hba file] ***************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'10.0.1.153/32', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'10.0.1.153/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Start the PEM agent Service] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Assign pg_monitor to PG_PEM_ADMIN_USER] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reduce the privileges of PEM user] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location on the node] ****************************************************************************************************
changed: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_pem : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
ok: [localhost -> 54.165.62.96] => (item={u'ip_addr': u'10.0.1.153/32', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'})
ok: [localhost -> 54.165.62.96] => (item={u'ip_addr': u'10.0.1.153/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'})
ok: [localhost -> 54.165.62.96] => (item={u'ip_addr': u'127.0.0.1/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'})
ok: [localhost -> 54.165.62.96] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'})
ok: [localhost -> 54.165.62.96] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'})

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set query variables for PEM probe] *********************************************************************************************************
ok: [localhost -> 54.165.62.96]

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
ok: [localhost -> 54.165.62.96] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"})
ok: [localhost -> 54.165.62.96] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"})

TASK [edb_devops.edb_postgres.setup_pem : Set PG_PEM_AGENT_PASSWORD if not provided] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create EDB pem agent role if not exists] ***************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Assign pg_monitor to PG_PEM_AGENT_USER] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'10.0.1.153', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'::1/128', u'database': u'all'}) 
skipping: [localhost] => (item={u'ip_addr': u'10.0.1.153', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Check if agent was registered] *************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Check if agent key was registered] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install pem agent] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create lock file for avoiding duplication] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Register server with agent] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create lock file for avoiding duplication] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Start the PEM Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set query variables for PEM probe] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Reset FORCE/SKIP_PEM_INSTALL based on the user input] **************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reference EPAS Variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reference PG Variables] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set Node Type] *****************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = standby, PG_DATA = /data/pgdata, Public IP = 3.92.47.17"
}

TASK [edb_devops.edb_postgres.setup_pem : Set FORCE_INSTALL based on the user input] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set PEM_AGENT based on the user input] *****************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Stopped pemagent] **************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove pem ceritficate directory] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove agent.cfg] **************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove worker.log] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set PG_PEM_ADMIN_PASSWORD if not provided] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create EDB pem superuser role if not exists] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Check if we PEM server is already configured] **********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install pem server] ************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update agent to use hostssl] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries for hostssl into pg_hba file] ***************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'10.0.3.234/32', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'10.0.3.234/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Start the PEM agent Service] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Assign pg_monitor to PG_PEM_ADMIN_USER] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reduce the privileges of PEM user] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location on the node] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'10.0.3.234/32', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'10.0.3.234/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set query variables for PEM probe] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Set PG_PEM_AGENT_PASSWORD if not provided] *************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create EDB pem agent role if not exists] ***************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Assign pg_monitor to PG_PEM_AGENT_USER] ****************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location] ****************************************************************************************************************
changed: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
ok: [localhost -> 3.92.47.17] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'})
ok: [localhost -> 3.92.47.17] => (item={u'ip_addr': u'::1/128', u'database': u'all'})
ok: [localhost -> 3.92.47.17] => (item={u'ip_addr': u'10.0.1.153', u'database': u'all'})

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
ok: [localhost -> 3.92.47.17] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'})
ok: [localhost -> 3.92.47.17] => (item={u'ip_addr': u'::1/128', u'database': u'all'})
ok: [localhost -> 3.92.47.17] => (item={u'ip_addr': u'10.0.1.153', u'database': u'all'})

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
changed: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_pem : Check if agent was registered] *************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_pem : Check if agent key was registered] *********************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_pem : Install pem agent] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create lock file for avoiding duplication] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Register server with agent] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create lock file for avoiding duplication] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Start the PEM Service] *********************************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_pem : Set query variables for PEM probe] *********************************************************************************************************
ok: [localhost -> 3.92.47.17]

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
ok: [localhost -> 3.92.47.17] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"})
ok: [localhost -> 3.92.47.17] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"})

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Reset FORCE/SKIP_PEM_INSTALL based on the user input] **************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reference EPAS Variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reference PG Variables] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set Node Type] *****************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = standby, PG_DATA = /data/pgdata, Public IP = 52.55.189.7"
}

TASK [edb_devops.edb_postgres.setup_pem : Set FORCE_INSTALL based on the user input] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set PEM_AGENT based on the user input] *****************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Stopped pemagent] **************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove pem ceritficate directory] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove agent.cfg] **************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove worker.log] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set PG_PEM_ADMIN_PASSWORD if not provided] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create EDB pem superuser role if not exists] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Check if we PEM server is already configured] **********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install pem server] ************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update agent to use hostssl] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries for hostssl into pg_hba file] ***************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'10.0.2.72/32', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'10.0.2.72/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Start the PEM agent Service] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Assign pg_monitor to PG_PEM_ADMIN_USER] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reduce the privileges of PEM user] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location on the node] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'10.0.2.72/32', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'10.0.2.72/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set query variables for PEM probe] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Set PG_PEM_AGENT_PASSWORD if not provided] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create EDB pem agent role if not exists] ***************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Assign pg_monitor to PG_PEM_AGENT_USER] ****************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location] ****************************************************************************************************************
changed: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
ok: [localhost -> 52.55.189.7] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'})
ok: [localhost -> 52.55.189.7] => (item={u'ip_addr': u'::1/128', u'database': u'all'})
ok: [localhost -> 52.55.189.7] => (item={u'ip_addr': u'10.0.1.153', u'database': u'all'})

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
ok: [localhost -> 52.55.189.7] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'})
ok: [localhost -> 52.55.189.7] => (item={u'ip_addr': u'::1/128', u'database': u'all'})
ok: [localhost -> 52.55.189.7] => (item={u'ip_addr': u'10.0.1.153', u'database': u'all'})

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
changed: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_pem : Check if agent was registered] *************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_pem : Check if agent key was registered] *********************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_pem : Install pem agent] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create lock file for avoiding duplication] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Register server with agent] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create lock file for avoiding duplication] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Start the PEM Service] *********************************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_pem : Set query variables for PEM probe] *********************************************************************************************************
ok: [localhost -> 52.55.189.7]

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
ok: [localhost -> 52.55.189.7] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"})
ok: [localhost -> 52.55.189.7] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"})

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Reset FORCE/SKIP_PEM_INSTALL based on the user input] **************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reference EPAS Variables] ******************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reference PG Variables] ********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set Node Type] *****************************************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : debug] *************************************************************************************************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = primary, PG_DATA = /data/pgdata, Public IP = 18.234.160.148"
}

TASK [edb_devops.edb_postgres.setup_pem : Set FORCE_INSTALL based on the user input] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set PEM_AGENT based on the user input] *****************************************************************************************************
ok: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Stopped pemagent] **************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove pem ceritficate directory] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove agent.cfg] **************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Remove worker.log] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set PG_PEM_ADMIN_PASSWORD if not provided] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create EDB pem superuser role if not exists] ***********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Check if we PEM server is already configured] **********************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Install pem server] ************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update agent to use hostssl] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries for hostssl into pg_hba file] ***************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'}) 

TASK [edb_devops.edb_postgres.setup_pem : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'10.0.0.56/32', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'10.0.0.56/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Start the PEM agent Service] ***************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Assign pg_monitor to PG_PEM_ADMIN_USER] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Reduce the privileges of PEM user] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location on the node] ****************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Add all node IP address entries into pg_hba file for efm user] *****************************************************************************
skipping: [localhost] => (item={u'ip_addr': u'10.0.0.56/32', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'10.0.0.56/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'127.0.0.1/32', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_user', u'method': u'scram-sha-256', u'database': u'pem'}) 
skipping: [localhost] => (item={u'ip_addr': u'0.0.0.0/0', u'group': u'pem_agent', u'method': u'cert', u'database': u'pem'}) 

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Set query variables for PEM probe] *********************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Set PG_PEM_AGENT_PASSWORD if not provided] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create EDB pem agent role if not exists] ***************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Assign pg_monitor to PG_PEM_AGENT_USER] ****************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Find the HBA File location] ****************************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'})
ok: [localhost -> 18.234.160.148] => (item={u'ip_addr': u'::1/128', u'database': u'all'})
ok: [localhost -> 18.234.160.148] => (item={u'ip_addr': u'10.0.1.153', u'database': u'all'})

TASK [edb_devops.edb_postgres.setup_pem : Update localhost addresses entries into pg_hba file] ***************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'ip_addr': u'127.0.0.1/32', u'database': u'all'})
ok: [localhost -> 18.234.160.148] => (item={u'ip_addr': u'::1/128', u'database': u'all'})
ok: [localhost -> 18.234.160.148] => (item={u'ip_addr': u'10.0.1.153', u'database': u'all'})

TASK [edb_devops.edb_postgres.setup_pem : Reload the PG Service] *********************************************************************************************************************
changed: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Install require packages for PEM] **********************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Check if agent was registered] *************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Check if agent key was registered] *********************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Install pem agent] *************************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create lock file for avoiding duplication] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Register server with agent] ****************************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Create lock file for avoiding duplication] *************************************************************************************************
skipping: [localhost]

TASK [edb_devops.edb_postgres.setup_pem : Start the PEM Service] *********************************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Set query variables for PEM probe] *********************************************************************************************************
ok: [localhost -> 18.234.160.148]

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
ok: [localhost -> 18.234.160.148] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"})
ok: [localhost -> 18.234.160.148] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"})

TASK [edb_devops.edb_postgres.setup_pem : Update PEM Server for unnecessary alerts/probes] *******************************************************************************************
skipping: [localhost] => (item={u'query': u"UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={u'query': u"UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [edb_devops.edb_postgres.setup_pem : Reset FORCE/SKIP_PEM_INSTALL based on the user input] **************************************************************************************
ok: [localhost]

PLAY RECAP ***************************************************************************************************************************************************************************
localhost                  : ok=393  changed=45   unreachable=0    failed=0    skipped=734  rescued=0    ignored=0   

PEM SERVER:
-----------
  PEM URL:	https://54.165.62.96:8443/pem
  Username:	enterprisedb
  Password:	mAHMkVDNQsGljNpKZbQP

PRIMARY SERVER
--------------
  Username:	centos
  Public Ip:	18.234.160.148

STANDBY SERVERS
--------------
  Username:	centos
  Public Ip:	3.92.47.17

  Username:	centos
  Public Ip:	52.55.189.7

