---
 - hosts: all

   tasks:

   - name: Add epel repo
     yum:
       name: epel*
       state: present
     become: yes
     when: inventory_hostname == BART_IP
 
   - name: Install the latest edb repo
     yum:
       name: https://yum.enterprisedb.com/edbrepos/edb-repo-latest.noarch.rpm
       state: present
     become: yes
     when: inventory_hostname == BART_IP

   - name: Configure EDB repo
     replace:
         path: /etc/yum.repos.d/edb.repo
         regexp: "{{item.From}}"
         replace: "{{item.To}}" 
     with_items:
         - { From: '<username>', To: '{{USER}}'} 
         - { From: '<password>', To: '{{PASS}}'} 
     become: yes
     when: inventory_hostname == BART_IP   

   - name: Install bart and db server-client
     yum:
       name: "{{ packages }}"
     vars:
       packages: 
        - edb-as12-server-client
        - edb-bart
       state: present     
     become: yes
     when: inventory_hostname == BART_IP

   - name: Set environment variable for library
     lineinfile:
       path: /etc/bashrc 
       line: "export LD_LIBRARY_PATH=/usr/edb/as12/lib:$LD_LIBRARY_PATH"
       state: present
     become: yes
     when: inventory_hostname == BART_IP  

   - name: Read content of bashrc
     shell: source /etc/bashrc
     become: yes
     when: inventory_hostname == BART_IP
      
   - name: Create folder for backup
     file: 
       path: /opt/backups
       state: directory
       mode: '0700'
       owner: root
       group: root
     become: yes
     when: inventory_hostname == BART_IP

   - name: Create xfs file system on /dev/sdb
     filesystem:
       fstype: xfs
       dev: /dev/sdb
     become: yes
     when: inventory_hostname == BART_IP
 
   - name: mount new drive 
     mount:
       path: /opt/backups
       src: /dev/sdb
       fstype: xfs
       state: mounted
     become: yes 
     when: inventory_hostname == BART_IP

   - name: Replace value as per DB engine for epas10,11,12 DB engine
     shell: echo "{{DB_ENGINE}}"| sed 's/[^0-9]*//g' | sed 's/^/as/' 
     register: epasdbname
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Replace value as per DB engine for pg10,11,12 DB engine
     shell: echo "{{DB_ENGINE}}"| sed 's/[^0-9]*//g' 
     register: pgdbname
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'
  
   - name: Get service name for epas10,11,12 DB engine
     shell: echo "{{DB_ENGINE}}"| sed 's/[^0-9]*//g'
     register: servicename
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Create key-pair
     shell: sudo /sbin/runuser -l root -c 'echo -e "\n"| ssh-keygen -t rsa -N ""'
     become: yes
     become_user: root
     register: ssh_pubkey
     when: inventory_hostname == BART_IP
 
   - name: Make copy of bart config file
     shell: cp -r /usr/edb/bart/etc/bart.cfg.sample /usr/edb/bart/etc/bart.cfg
     become: yes
     when: inventory_hostname == BART_IP

   - name: Configure BART when DB engine is EPAS
     replace: 
       path: /usr/edb/bart/etc/bart.cfg
       regexp: "{{item.From}}"
       replace: "{{item.To}}"
     with_items:
       - { From: '<username>@127.0.0.1', To: 'root@{{ BART_IP }}'}
       - { From: 'as11', To: 'as12'}
       - { From: 'EPAS11', To: 'DBSERVER'}
       - { From: 'host = 127.0.0.1', To: 'host = {{ DB_IP }}'}
       - { From: '<dbuser>', To: '{{ DB_USER }}'}
       - { From: '<cluster_owner>', To: 'enterprisedb'} 
       - { From: 'EPAS 11 Server', To: 'EPAS Server'}
       - { From: 'thread_count = 5', To: 'thread_count = 1'}
     delegate_to: '{{ BART_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'
     become: yes

   - name: Configure BART when DB engine is PG
     replace:
       path: /usr/edb/bart/etc/bart.cfg
       regexp: "{{item.From}}"
       replace: "{{item.To}}"
     with_items:
       - { From: '<username>@127.0.0.1', To: 'root@{{ BART_IP }}'}
       - { From: 'as11', To: 'as12'}
       - { From: 'EPAS11', To: 'DBSERVER'}
       - { From: 'host = 127.0.0.1', To: 'host = {{ DB_IP }}'}
       - { From: 'port = 5444', To: 'port = 5432'}
       - { From: '<dbuser>', To: '{{ DB_USER }}'}
       - { From: '<cluster_owner>', To: 'postgres'}
       - { From: 'EPAS 11 Server', To: 'PG Server'}
       - { From: 'thread_count = 5', To: 'thread_count = 1'}
     delegate_to: '{{ BART_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12' 
     become: yes

   - name: Add line for retension policy
     lineinfile:
        path: /usr/edb/bart/etc/bart.cfg
        insertafter: '^pg_basebackup_path'
        line: 'retention_policy = {{ RETENTION_PERIOD }}'
     become: yes
     delegate_to: '{{ BART_IP }}'
     when: RETENTION_PERIOD|length > 0

   - name: Delete unwanted lines
     shell: sed -i '/EPAS10/,//d' /usr/edb/bart/etc/bart.cfg
     become: yes
     delegate_to: '{{ BART_IP }}'

   - name: create pgpass file
     file: 
       path: /root/.pgpass
       mode: '0600'
       state: touch
       owner: root
       group: root
     become: yes
     when: inventory_hostname == BART_IP  
 
   - name: Add content in .pgpass file
     lineinfile:
       path: /root/.pgpass
       line: "*:5444:*:{{ DB_USER }}:{{ DB_PASSWORD }}"
       create: yes
     become: yes
     delegate_to: '{{ BART_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Add content in .pgpass file
     lineinfile:
       path: /root/.pgpass
       line: "*:5432:*:{{ DB_USER }}:{{ DB_PASSWORD }}"
       create: yes
     become: yes
     delegate_to: '{{ BART_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'


   - name: Create folder on remote server for EPAS
     file:
       path: /var/lib/edb/.ssh
       state: directory
       mode: '0700'
       owner: enterprisedb
       group: enterprisedb
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12' 

   - name: Create file on remote server for EPAS
     file:
       path: /var/lib/edb/.ssh/authorized_keys
       state: touch
       mode: '0600'
       owner: enterprisedb
       group: enterprisedb
     become: yes
     delegate_to: '{{ DB_IP }}'   
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Create folder on remote server for PG
     file:
       path: /var/lib/pgsql/.ssh
       state: directory
       mode: '0700'
       owner: postgres
       group: postgres
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'

   - name: Create file on remote server
     file:
       path: /var/lib/pgsql/.ssh/authorized_keys
       state: touch
       mode: '0600'
       owner: postgres
       group: postgres
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'

   - name: Generate ssh key on remote server
     shell: sudo /sbin/runuser -l enterprisedb -c 'echo -e "\n"| ssh-keygen -t rsa -N ""'
     become: yes
     delegate_to: '{{ DB_IP }}'
     ignore_errors: yes
     run_once: True
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Generate ssh key on remote server
     shell: sudo /sbin/runuser -l postgres -c 'echo -e "\n"| ssh-keygen -t rsa -N ""'
     become: yes
     delegate_to: '{{ DB_IP }}'
     ignore_errors: yes
     run_once: True
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'

   - name: Get line number for epas
     shell: sudo awk '$0 ~ "cp %p /backup" {print NR}' /var/lib/edb/{{epasdbname.stdout}}/data/postgresql.conf 
     register: line_number_epas
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'
     

   - name: Get line number for pg
     shell: sudo awk '$0 ~ "cp %p /backup" {print NR}' /var/lib/pgsql/{{pgdbname.stdout}}/data/postgresql.conf 
     register: line_number_pg
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'

   - name: Remove quote for epas
     command: sed -i -e "{{ line_number_epas.stdout }}s/'$//" /var/lib/edb/{{epasdbname.stdout}}/data/postgresql.conf 
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Remove quote for pg
     command: sed -i -e "{{ line_number_pg.stdout }}s/'$//" /var/lib/pgsql/{{pgdbname.stdout}}/data/postgresql.conf
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'

   - name: Change archive command for epas
     lineinfile:
       path: /var/lib/edb/{{epasdbname.stdout}}/data/postgresql.conf
       regexp: '^(archive_command = .*$)'
       insertafter: '%f'
       backrefs: yes
       line: '\1 && scp -o StrictHostKeyChecking=no %p root@{{ BART_IP }}:/opt/backups/dbserver/archived_wals/%f'
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Change archive command for pg
     lineinfile:
       path: /var/lib/pgsql/{{pgdbname.stdout}}/data/postgresql.conf
       regexp: '^(archive_command = .*$)' 
       insertafter: '%f'
       backrefs: yes
       line: '\1 && scp -o StrictHostKeyChecking=no %p root@{{ BART_IP }}:/opt/backups/dbserver/archived_wals/%f'
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'

   - name: Add Quote
     shell: sed -i -e "{{ line_number_epas.stdout }}s/%f$/%f'/" /var/lib/edb/{{epasdbname.stdout}}/data/postgresql.conf
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Add Quote
     shell: sed -i -e "{{ line_number_pg.stdout }}s/%f$/%f'/" /var/lib/pgsql/{{pgdbname.stdout}}/data/postgresql.conf
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'

   - name: Retrive public key from db server
     shell: cat /var/lib/edb/.ssh/id_rsa.pub
     become: yes
     register: bart_ssh_key_epas
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Retrive public key from db server
     shell: cat /var/lib/pgsql/.ssh/id_rsa.pub
     become: yes
     register: bart_ssh_key_pg
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'

   - name: Add pub key
     copy:
        content: '{{ bart_ssh_key_pg.stdout }}'
        dest: /root/.ssh/authorized_keys
        remote_src: true
     become: yes
     delegate_to: '{{ BART_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'

   - name: Add pub key
     copy:
        content: '{{ bart_ssh_key_epas.stdout }}'
        dest: /root/.ssh/authorized_keys
        remote_src: true
     become: yes
     delegate_to: '{{ BART_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'


 - hosts: "{{BART_IP}}"
   
   tasks:

   - name: Get pub key
     shell: cat /root/.ssh/id_rsa.pub
     become: yes
     register: ssh_key
     when: inventory_hostname == BART_IP

   - name: Add pub key
     copy:
        content: '{{ ssh_key.stdout }}'
        dest: /var/lib/pgsql/.ssh/authorized_keys
        remote_src: true
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'
   
   - name: Add pub key
     copy:
       content: '{{ ssh_key.stdout }}'
       dest: /var/lib/edb/.ssh/authorized_keys
     become: yes
     delegate_to: '{{ DB_IP }}' 
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12' 

   - name: Whitelist bart IP for PG
     blockinfile:
         path: /var/lib/pgsql/{{pgdbname.stdout}}/data/pg_hba.conf
         marker: "# {mark} ANSIBLE MANAGED BLOCK FOR BART"
         insertafter: '^IPv4 local connections'
         block: |
            host    all             {{ DB_USER }}             {{ BART_IP }}/32            trust
            host    replication             {{ DB_USER }}             {{ BART_IP }}/32            trust
     become: yes
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12'
     delegate_to: '{{ DB_IP }}'

   - name: Whitelist bart IP for EPAS
     blockinfile:
         path: /var/lib/edb/{{epasdbname.stdout}}/data/pg_hba.conf
         marker: "# {mark} ANSIBLE MANAGED BLOCK FOR BART"
         block: | 
             host    all             {{ DB_USER }}             {{ BART_IP }}/32            trust
             host    replication             {{ DB_USER }}             {{ BART_IP }}/32            trust
     become: yes
     delegate_to: '{{ DB_IP }}'
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'

   - name: Reload PG service if dbengine is pg10,11,12
     systemd:
          name: postgresql-{{pgdbname.stdout}}
          state: reloaded
     become: yes 
     when: DB_ENGINE == 'pg10' or DB_ENGINE == 'pg11' or DB_ENGINE == 'pg12' 
     delegate_to: '{{ DB_IP }}'

   - name: Reload EPAS service if dbengine is epas10,11,12
     systemd:
          name: edb-as-{{servicename.stdout}}
          state: reloaded
     become: yes
     when: DB_ENGINE == 'epas10' or DB_ENGINE == 'epas11' or DB_ENGINE == 'epas12'
     delegate_to: '{{DB_IP}}'

   - name: Start bart scanner deamon
     shell: /usr/edb/bart/bin/bart-scanner --daemon
     become: yes
     delegate_to: '{{BART_IP}}'
    

   - name: Intialize bart server
     shell: bart init
     become: yes
     when: inventory_hostname == BART_IP

   - name: Sleep time
     command: sleep 30

   - name: Create and add line in file
     blockinfile:
       path: /root/.ssh/config
       block: |
           Host * 
              StrictHostKeyChecking no
       create: yes
     become: yes

   - name: Take backup
     command: bart backup -s DBSERVER
     become: yes
     when: inventory_hostname == BART_IP

   - name: Add cron job for scheduing bart full backup
     cron:
       name: "full backup"
       minute: "5"
       hour: "0"
       weekday: "0"
       job: "bart backup -s DBSERVER > /dev/null"
     become: yes

   - name: Add cron job for incremental backup.
     cron:
       name: "incremental backup"
       minute: "45"
       hour: "0"
       job: "bart backup -s DBSERVER -F p > /dev/null"
     become: yes

 
