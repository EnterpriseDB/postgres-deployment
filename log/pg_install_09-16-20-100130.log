
PLAY [Configure Postgres or EPAS on Instances] *********************************

TASK [Initialize the user defined variables] ***********************************
ok: [localhost] => (item={'key': 'pemserver', 'value': {'node_type': 'pemserver', 'public_ip': '34.94.117.77', 'private_ip': '10.0.0.2'}})
ok: [localhost] => (item={'key': 'primary1', 'value': {'node_type': 'primary', 'public_ip': '35.236.92.243', 'private_ip': '10.0.0.5', 'replication_type': 'asynchronous', 'pem_agent': True}})
ok: [localhost] => (item={'key': 'standby2', 'value': {'node_type': 'standby', 'public_ip': '34.94.18.198', 'private_ip': '10.0.0.4', 'replication_type': 'asynchronous', 'pem_agent': True}})
ok: [localhost] => (item={'key': 'standby3', 'value': {'node_type': 'standby', 'public_ip': '35.236.109.234', 'private_ip': '10.0.0.3', 'replication_type': 'asynchronous', 'pem_agent': True}})

TASK [Gather primary and standby nodes for EFM] ********************************
skipping: [localhost] => (item={'key': 'pemserver', 'value': {'node_type': 'pemserver', 'public_ip': '34.94.117.77', 'private_ip': '10.0.0.2'}}) 
ok: [localhost] => (item={'key': 'primary1', 'value': {'node_type': 'primary', 'public_ip': '35.236.92.243', 'private_ip': '10.0.0.5', 'replication_type': 'asynchronous', 'pem_agent': True}})
ok: [localhost] => (item={'key': 'standby2', 'value': {'node_type': 'standby', 'public_ip': '34.94.18.198', 'private_ip': '10.0.0.4', 'replication_type': 'asynchronous', 'pem_agent': True}})
ok: [localhost] => (item={'key': 'standby3', 'value': {'node_type': 'standby', 'public_ip': '35.236.109.234', 'private_ip': '10.0.0.3', 'replication_type': 'asynchronous', 'pem_agent': True}})

TASK [Gather the standby names] ************************************************
skipping: [localhost] => (item={'key': 'pemserver', 'value': {'node_type': 'pemserver', 'public_ip': '34.94.117.77', 'private_ip': '10.0.0.2'}}) 
skipping: [localhost] => (item={'key': 'primary1', 'value': {'node_type': 'primary', 'public_ip': '35.236.92.243', 'private_ip': '10.0.0.5', 'replication_type': 'asynchronous', 'pem_agent': True}}) 
ok: [localhost] => (item={'key': 'standby2', 'value': {'node_type': 'standby', 'public_ip': '34.94.18.198', 'private_ip': '10.0.0.4', 'replication_type': 'asynchronous', 'pem_agent': True}})
ok: [localhost] => (item={'key': 'standby3', 'value': {'node_type': 'standby', 'public_ip': '35.236.109.234', 'private_ip': '10.0.0.3', 'replication_type': 'asynchronous', 'pem_agent': True}})

TASK [Iterate through repo role with items from hosts file] ********************

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : Set FORCE_INSTALL based on the user input] ******************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Database Engine = EPAS, Public IP = 34.94.117.77"
}

TASK [setup_repo : include_tasks] **********************************************
skipping: [localhost]

TASK [setup_repo : include_tasks] **********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-PG-setuprepos.yml for localhost

TASK [setup_repo : Install EPEL Repo] ******************************************
ok: [localhost -> 34.94.117.77]

TASK [setup_repo : Install Postgres from Repo] *********************************
changed: [localhost -> 34.94.117.77]

TASK [setup_repo : include_tasks] **********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-EPAS-setuprepos.yml for localhost

TASK [setup_repo : Install EPEL Repo] ******************************************
ok: [localhost -> 34.94.117.77]

TASK [setup_repo : Install Latest EDB Repo] ************************************
changed: [localhost -> 34.94.117.77]

TASK [setup_repo : Set Credentials for EDB Yum Repo] ***************************
changed: [localhost -> 34.94.117.77]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : Set FORCE_INSTALL based on the user input] ******************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Database Engine = EPAS, Public IP = 35.236.92.243"
}

TASK [setup_repo : include_tasks] **********************************************
skipping: [localhost]

TASK [setup_repo : include_tasks] **********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-PG-setuprepos.yml for localhost

TASK [setup_repo : Install EPEL Repo] ******************************************
ok: [localhost -> 35.236.92.243]

TASK [setup_repo : Install Postgres from Repo] *********************************
changed: [localhost -> 35.236.92.243]

TASK [setup_repo : include_tasks] **********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-EPAS-setuprepos.yml for localhost

TASK [setup_repo : Install EPEL Repo] ******************************************
ok: [localhost -> 35.236.92.243]

TASK [setup_repo : Install Latest EDB Repo] ************************************
changed: [localhost -> 35.236.92.243]

TASK [setup_repo : Set Credentials for EDB Yum Repo] ***************************
changed: [localhost -> 35.236.92.243]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : Set FORCE_INSTALL based on the user input] ******************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Database Engine = EPAS, Public IP = 34.94.18.198"
}

TASK [setup_repo : include_tasks] **********************************************
skipping: [localhost]

TASK [setup_repo : include_tasks] **********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-PG-setuprepos.yml for localhost

TASK [setup_repo : Install EPEL Repo] ******************************************
ok: [localhost -> 34.94.18.198]

TASK [setup_repo : Install Postgres from Repo] *********************************
changed: [localhost -> 34.94.18.198]

TASK [setup_repo : include_tasks] **********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-EPAS-setuprepos.yml for localhost

TASK [setup_repo : Install EPEL Repo] ******************************************
ok: [localhost -> 34.94.18.198]

TASK [setup_repo : Install Latest EDB Repo] ************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_repo : Set Credentials for EDB Yum Repo] ***************************
changed: [localhost -> 34.94.18.198]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
skipping: [localhost]

TASK [setup_repo : Set FORCE_INSTALL based on the user input] ******************
skipping: [localhost]

TASK [setup_repo : debug] ******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Database Engine = EPAS, Public IP = 35.236.109.234"
}

TASK [setup_repo : include_tasks] **********************************************
skipping: [localhost]

TASK [setup_repo : include_tasks] **********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-PG-setuprepos.yml for localhost

TASK [setup_repo : Install EPEL Repo] ******************************************
ok: [localhost -> 35.236.109.234]

TASK [setup_repo : Install Postgres from Repo] *********************************
changed: [localhost -> 35.236.109.234]

TASK [setup_repo : include_tasks] **********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_repo/tasks/C07-RH07-EPAS-setuprepos.yml for localhost

TASK [setup_repo : Install EPEL Repo] ******************************************
ok: [localhost -> 35.236.109.234]

TASK [setup_repo : Install Latest EDB Repo] ************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_repo : Set Credentials for EDB Yum Repo] ***************************
changed: [localhost -> 35.236.109.234]

TASK [Iterate through install role with items from hosts file] *****************

TASK [install_dbserver : debug] ************************************************
skipping: [localhost]

TASK [install_dbserver : debug] ************************************************
skipping: [localhost]

TASK [install_dbserver : Set force_install based on the user input] ************
skipping: [localhost]

TASK [install_dbserver : debug] ************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 34.94.117.77"
}

TASK [install_dbserver : include_tasks] ****************************************
skipping: [localhost]

TASK [install_dbserver : include_tasks] ****************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/install_dbserver/tasks/C07-RH07-EPAS-install.yml for localhost

TASK [install_dbserver : Install Additional Python Packages] *******************
changed: [localhost -> 34.94.117.77]

TASK [install_dbserver : Install EPAS Packages] ********************************
changed: [localhost -> 34.94.117.77]

TASK [install_dbserver : debug] ************************************************
skipping: [localhost]

TASK [install_dbserver : debug] ************************************************
skipping: [localhost]

TASK [install_dbserver : Set force_install based on the user input] ************
skipping: [localhost]

TASK [install_dbserver : debug] ************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 35.236.92.243"
}

TASK [install_dbserver : include_tasks] ****************************************
skipping: [localhost]

TASK [install_dbserver : include_tasks] ****************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/install_dbserver/tasks/C07-RH07-EPAS-install.yml for localhost

TASK [install_dbserver : Install Additional Python Packages] *******************
changed: [localhost -> 35.236.92.243]

TASK [install_dbserver : Install EPAS Packages] ********************************
changed: [localhost -> 35.236.92.243]

TASK [install_dbserver : debug] ************************************************
skipping: [localhost]

TASK [install_dbserver : debug] ************************************************
skipping: [localhost]

TASK [install_dbserver : Set force_install based on the user input] ************
skipping: [localhost]

TASK [install_dbserver : debug] ************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 34.94.18.198"
}

TASK [install_dbserver : include_tasks] ****************************************
skipping: [localhost]

TASK [install_dbserver : include_tasks] ****************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/install_dbserver/tasks/C07-RH07-EPAS-install.yml for localhost

TASK [install_dbserver : Install Additional Python Packages] *******************
changed: [localhost -> 34.94.18.198]

TASK [install_dbserver : Install EPAS Packages] ********************************
changed: [localhost -> 34.94.18.198]

TASK [install_dbserver : debug] ************************************************
skipping: [localhost]

TASK [install_dbserver : debug] ************************************************
skipping: [localhost]

TASK [install_dbserver : Set force_install based on the user input] ************
skipping: [localhost]

TASK [install_dbserver : debug] ************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 35.236.109.234"
}

TASK [install_dbserver : include_tasks] ****************************************
skipping: [localhost]

TASK [install_dbserver : include_tasks] ****************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/install_dbserver/tasks/C07-RH07-EPAS-install.yml for localhost

TASK [install_dbserver : Install Additional Python Packages] *******************
changed: [localhost -> 35.236.109.234]

TASK [install_dbserver : Install EPAS Packages] ********************************
changed: [localhost -> 35.236.109.234]

TASK [Iterate through initialize role with items from hosts file] **************

TASK [init_dbserver : Reference EPAS Variables] ********************************
ok: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 34.94.117.77"
}

TASK [init_dbserver : Set Node Type] *******************************************
ok: [localhost]

TASK [init_dbserver : set FORCE_INITIALIZE based on the user input] ************
skipping: [localhost]

TASK [init_dbserver : include_tasks] *******************************************
skipping: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
ok: [localhost]

TASK [init_dbserver : Enumerate disks] *****************************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Update the block devices] ********************************
ok: [localhost -> 34.94.117.77] => (item=sda)

TASK [init_dbserver : Ensure /etc/tuned/edb directory exists] ******************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create tuned.conf for Postgres] **************************
changed: [localhost -> 34.94.117.77] => (item=[main])
changed: [localhost -> 34.94.117.77] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server)
changed: [localhost -> 34.94.117.77] => (item=[cpu])
changed: [localhost -> 34.94.117.77] => (item=governor=performance)
changed: [localhost -> 34.94.117.77] => (item=energy_perf_bias=performance)
changed: [localhost -> 34.94.117.77] => (item=min_perf_pct=100)
changed: [localhost -> 34.94.117.77] => (item=[disk])
changed: [localhost -> 34.94.117.77] => (item=readahead=>4096)
changed: [localhost -> 34.94.117.77] => (item=[sysctl])
changed: [localhost -> 34.94.117.77] => (item=vm.overcommit_memory=2)
changed: [localhost -> 34.94.117.77] => (item=vm.swappiness=1)
changed: [localhost -> 34.94.117.77] => (item=vm.dirty_ratio=30)
changed: [localhost -> 34.94.117.77] => (item=vm.dirty_background_ratio=10)
changed: [localhost -> 34.94.117.77] => (item=[vm])
changed: [localhost -> 34.94.117.77] => (item=transparent_hugepages=never)

TASK [init_dbserver : Enable the tuned] ****************************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Load the new settings using tuned] ***********************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Check if Cluster has been initialized] *******************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Check if Cluster has been initialized] *******************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Verify PGDATA and stop if exists] ************************
skipping: [localhost]

TASK [init_dbserver : Ensure Postgres Data directory exists] *******************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Ensure Postgres Log directory exists] ********************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Ensure Postgres WAL directory exists] ********************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create Unix Socket Domain Directories] *******************
changed: [localhost -> 34.94.117.77] => (item=/var/run/edb)

TASK [init_dbserver : Create hidden edb directory if not exists] ***************
ok: [localhost -> localhost]

TASK [init_dbserver : Define INITDB command.] **********************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Verify PG_WAL and accordingly add the in the INITDB] *****
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Verify PG_ENCODING and accordingly add the in the INITDB] ***
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Verify PG_LOCALE and accordingly add the in the INITDB] ***
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Add other initdb options] ********************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Initialize Database Postgres Service] ********************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Update unix_socket_directories if provided] **************
changed: [localhost -> 34.94.117.77] => (item={'From': '#unix_socket_directories =', 'To': "unix_socket_directories = '/var/run/edb'"})
changed: [localhost -> 34.94.117.77] => (item={'From': 'shared_preload_libraries =', 'To': "shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'"})
ok: [localhost -> 34.94.117.77] => (item={'From': '#shared_preload_libraries =', 'To': "shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'"})

TASK [init_dbserver : Check if we have the service file already created] *******
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Copy postgres service file] ******************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Update Postgres Service File] ****************************
changed: [localhost -> 34.94.117.77] => (item={'From': 'Environment=PGDATA=/var/lib/edb/as12/data', 'To': 'Environment=PGDATA=/data/pgdata'})
changed: [localhost -> 34.94.117.77] => (item={'From': 'PIDFile=/var/lib/edb/as12/data/postmaster.pid', 'To': 'PIDFile=/data/pgdata/postmaster.pid'})

TASK [init_dbserver : Start the PG Service] ************************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Restart the PG Service] **********************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Set PG_SUPERUSER_PASSWORD if not provided] ***************
ok: [localhost -> localhost]

TASK [init_dbserver : Make sure file is has permission for owner only] *********
ok: [localhost -> localhost]

TASK [init_dbserver : Set Postgres Superuser's Database Cluster Password] ******
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Configure unix socket directory] *************************
ok: [localhost -> 34.94.117.77] => (item={'name': 'unix_socket_directories', 'value': '/var/run/edb'})
ok: [localhost -> 34.94.117.77] => (item={'name': 'listen_addresses', 'value': '*'})
ok: [localhost -> 34.94.117.77] => (item={'name': 'wal_level', 'value': 'replica'})
ok: [localhost -> 34.94.117.77] => (item={'name': 'max_wal_senders', 'value': 10})
ok: [localhost -> 34.94.117.77] => (item={'name': 'hot_standby', 'value': True})
ok: [localhost -> 34.94.117.77] => (item={'name': 'max_replication_slots', 'value': 10})
changed: [localhost -> 34.94.117.77] => (item={'name': 'wal_compression', 'value': True})
changed: [localhost -> 34.94.117.77] => (item={'name': 'wal_log_hints', 'value': True})
changed: [localhost -> 34.94.117.77] => (item={'name': 'checkpoint_timeout', 'value': '15min'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'checkpoint_completion_target', 'value': 0.9})
changed: [localhost -> 34.94.117.77] => (item={'name': 'archive_mode', 'value': True})
ok: [localhost -> 34.94.117.77] => (item={'name': 'archive_command', 'value': '/bin/true'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'random_page_cost', 'value': 1.1})
changed: [localhost -> 34.94.117.77] => (item={'name': 'cpu_tuple_cost', 'value': 0.03})
ok: [localhost -> 34.94.117.77] => (item={'name': 'logging_collector', 'value': True})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_line_prefix', 'value': '%m [%p-%l] %u@%d app=%a '})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_truncate_on_rotation', 'value': True})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_rotation_size', 'value': '1GB'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_lock_waits', 'value': True})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_connections', 'value': True})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_disconnections', 'value': True})
ok: [localhost -> 34.94.117.77] => (item={'name': 'log_error_verbosity', 'value': 'default'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_statement', 'value': 'ddl'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_temp_files', 'value': 0})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_autovacuum_min_duration', 'value': 0})
changed: [localhost -> 34.94.117.77] => (item={'name': 'autovacuum_max_workers', 'value': 5})
changed: [localhost -> 34.94.117.77] => (item={'name': 'autovacuum_vacuum_cost_limit', 'value': 3000})
changed: [localhost -> 34.94.117.77] => (item={'name': 'idle_in_transaction_session_timeout', 'value': '10 min'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'syslog_ident', 'value': 'edb'})

TASK [init_dbserver : Configure primary_slot_name] *****************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Configure log_file_name] *********************************
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_filename', 'value': 'edb-%a.log'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'log_directory', 'value': '/var/log/edb'})

TASK [init_dbserver : Remove default log location] *****************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Reload the PG Service] ***********************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Restart the PG Service] **********************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Make sure we have PG_SSL_DIR] ****************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Check if we have CA key exists or not] *******************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Check if we have CA certificate exists or not] ***********
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Check if we have root.crt exists or not] *****************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Check if we have root crl exists or not] *****************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Check if we have server.key exists or not] ***************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Check if we have server.crt exists or not] ***************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create ssl extension in PG_DATABASE] *********************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create SSL cert key] *************************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : CA key variable] *****************************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create CA Key file in PG_DATA] ***************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create a certificate authority key] **********************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : CA certificate variable] *********************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create CA certificate file in PG_DATA] *******************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create root.crt using CA certificate file in PG_DATA] ****
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create a root.crl] ***************************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create root.crl] *****************************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create SSL Server key] ***********************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Server key variable] *************************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create Server Key file in PG_DATA] ***********************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create a Server cert] ************************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : CA certificate variable] *********************************
ok: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create CA certificate file in PG_DATA] *******************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Find the HBA File location] ******************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Update localhost addresses entries into pg_hba file] *****
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '127.0.0.1/32', 'database': 'replication'})
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '::1/128', 'database': 'replication'})

TASK [init_dbserver : Update localhost addresses entries into pg_hba file] *****
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '127.0.0.1/32', 'database': 'replication'})
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '::1/128', 'database': 'replication'})

TASK [init_dbserver : Configure ssl Settings in postgresql.auto.conf] **********
changed: [localhost -> 34.94.117.77] => (item={'name': 'ssl', 'value': 'on'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'ssl_ca_file', 'value': '/etc/edb/certs/root.crt'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'ssl_key_file', 'value': '/etc/edb/certs/server.key'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'ssl_cert_file', 'value': '/etc/edb/certs/server.crt'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'ssl_crl_file', 'value': '/etc/edb/certs/root.crl'})

TASK [init_dbserver : Reload the PG Service] ***********************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Restart the PG Service] **********************************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Create optional Users] ***********************************
skipping: [localhost]

TASK [init_dbserver : Create optional Databases] *******************************

TASK [init_dbserver : Check user defined parameters and update] ****************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Find the HBA File location on primary] *******************
changed: [localhost -> 34.94.117.77]

TASK [init_dbserver : Adding IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [init_dbserver : Adding IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [init_dbserver : Reload the PG Service] ***********************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Create Postgres extensions] ******************************
changed: [localhost -> 34.94.117.77] => (item={'name': 'edb_wait_states', 'database': 'edb'})
changed: [localhost -> 34.94.117.77] => (item={'name': 'edb_wait_states', 'database': 'postgres'})

TASK [init_dbserver : GRANT execute privilege to users] ************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : GRANT role to users] *************************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Copying the PG_COPY_SQL_SCRIPTS] *************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Execute PG_SQL_SCRIPTS] **********************************
skipping: [localhost] => (item=None) 
skipping: [localhost]

TASK [init_dbserver : Reset FORCE/SKIP_INITIALIZE based on the user input] *****
ok: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
ok: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 35.236.92.243"
}

TASK [init_dbserver : Set Node Type] *******************************************
ok: [localhost]

TASK [init_dbserver : set FORCE_INITIALIZE based on the user input] ************
skipping: [localhost]

TASK [init_dbserver : include_tasks] *******************************************
skipping: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
ok: [localhost]

TASK [init_dbserver : Enumerate disks] *****************************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Update the block devices] ********************************
ok: [localhost -> 35.236.92.243] => (item=sda)

TASK [init_dbserver : Ensure /etc/tuned/edb directory exists] ******************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create tuned.conf for Postgres] **************************
changed: [localhost -> 35.236.92.243] => (item=[main])
changed: [localhost -> 35.236.92.243] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server)
changed: [localhost -> 35.236.92.243] => (item=[cpu])
changed: [localhost -> 35.236.92.243] => (item=governor=performance)
changed: [localhost -> 35.236.92.243] => (item=energy_perf_bias=performance)
changed: [localhost -> 35.236.92.243] => (item=min_perf_pct=100)
changed: [localhost -> 35.236.92.243] => (item=[disk])
changed: [localhost -> 35.236.92.243] => (item=readahead=>4096)
changed: [localhost -> 35.236.92.243] => (item=[sysctl])
changed: [localhost -> 35.236.92.243] => (item=vm.overcommit_memory=2)
changed: [localhost -> 35.236.92.243] => (item=vm.swappiness=1)
changed: [localhost -> 35.236.92.243] => (item=vm.dirty_ratio=30)
changed: [localhost -> 35.236.92.243] => (item=vm.dirty_background_ratio=10)
changed: [localhost -> 35.236.92.243] => (item=[vm])
changed: [localhost -> 35.236.92.243] => (item=transparent_hugepages=never)

TASK [init_dbserver : Enable the tuned] ****************************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Load the new settings using tuned] ***********************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Check if Cluster has been initialized] *******************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Check if Cluster has been initialized] *******************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Verify PGDATA and stop if exists] ************************
skipping: [localhost]

TASK [init_dbserver : Ensure Postgres Data directory exists] *******************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Ensure Postgres Log directory exists] ********************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Ensure Postgres WAL directory exists] ********************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create Unix Socket Domain Directories] *******************
changed: [localhost -> 35.236.92.243] => (item=/var/run/edb)

TASK [init_dbserver : Create hidden edb directory if not exists] ***************
ok: [localhost -> localhost]

TASK [init_dbserver : Define INITDB command.] **********************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Verify PG_WAL and accordingly add the in the INITDB] *****
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Verify PG_ENCODING and accordingly add the in the INITDB] ***
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Verify PG_LOCALE and accordingly add the in the INITDB] ***
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Add other initdb options] ********************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Initialize Database Postgres Service] ********************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Update unix_socket_directories if provided] **************
changed: [localhost -> 35.236.92.243] => (item={'From': '#unix_socket_directories =', 'To': "unix_socket_directories = '/var/run/edb'"})
changed: [localhost -> 35.236.92.243] => (item={'From': 'shared_preload_libraries =', 'To': "shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'"})
ok: [localhost -> 35.236.92.243] => (item={'From': '#shared_preload_libraries =', 'To': "shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'"})

TASK [init_dbserver : Check if we have the service file already created] *******
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Copy postgres service file] ******************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Update Postgres Service File] ****************************
changed: [localhost -> 35.236.92.243] => (item={'From': 'Environment=PGDATA=/var/lib/edb/as12/data', 'To': 'Environment=PGDATA=/data/pgdata'})
changed: [localhost -> 35.236.92.243] => (item={'From': 'PIDFile=/var/lib/edb/as12/data/postmaster.pid', 'To': 'PIDFile=/data/pgdata/postmaster.pid'})

TASK [init_dbserver : Start the PG Service] ************************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Restart the PG Service] **********************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Set PG_SUPERUSER_PASSWORD if not provided] ***************
skipping: [localhost]

TASK [init_dbserver : Make sure file is has permission for owner only] *********
ok: [localhost -> localhost]

TASK [init_dbserver : Set Postgres Superuser's Database Cluster Password] ******
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Configure unix socket directory] *************************
ok: [localhost -> 35.236.92.243] => (item={'name': 'unix_socket_directories', 'value': '/var/run/edb'})
ok: [localhost -> 35.236.92.243] => (item={'name': 'listen_addresses', 'value': '*'})
ok: [localhost -> 35.236.92.243] => (item={'name': 'wal_level', 'value': 'replica'})
ok: [localhost -> 35.236.92.243] => (item={'name': 'max_wal_senders', 'value': 10})
ok: [localhost -> 35.236.92.243] => (item={'name': 'hot_standby', 'value': True})
ok: [localhost -> 35.236.92.243] => (item={'name': 'max_replication_slots', 'value': 10})
changed: [localhost -> 35.236.92.243] => (item={'name': 'wal_compression', 'value': True})
changed: [localhost -> 35.236.92.243] => (item={'name': 'wal_log_hints', 'value': True})
changed: [localhost -> 35.236.92.243] => (item={'name': 'checkpoint_timeout', 'value': '15min'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'checkpoint_completion_target', 'value': 0.9})
changed: [localhost -> 35.236.92.243] => (item={'name': 'archive_mode', 'value': True})
ok: [localhost -> 35.236.92.243] => (item={'name': 'archive_command', 'value': '/bin/true'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'random_page_cost', 'value': 1.1})
changed: [localhost -> 35.236.92.243] => (item={'name': 'cpu_tuple_cost', 'value': 0.03})
ok: [localhost -> 35.236.92.243] => (item={'name': 'logging_collector', 'value': True})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_line_prefix', 'value': '%m [%p-%l] %u@%d app=%a '})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_truncate_on_rotation', 'value': True})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_rotation_size', 'value': '1GB'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_lock_waits', 'value': True})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_connections', 'value': True})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_disconnections', 'value': True})
ok: [localhost -> 35.236.92.243] => (item={'name': 'log_error_verbosity', 'value': 'default'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_statement', 'value': 'ddl'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_temp_files', 'value': 0})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_autovacuum_min_duration', 'value': 0})
changed: [localhost -> 35.236.92.243] => (item={'name': 'autovacuum_max_workers', 'value': 5})
changed: [localhost -> 35.236.92.243] => (item={'name': 'autovacuum_vacuum_cost_limit', 'value': 3000})
changed: [localhost -> 35.236.92.243] => (item={'name': 'idle_in_transaction_session_timeout', 'value': '10 min'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'syslog_ident', 'value': 'edb'})

TASK [init_dbserver : Configure primary_slot_name] *****************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Configure log_file_name] *********************************
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_filename', 'value': 'edb-%a.log'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'log_directory', 'value': '/var/log/edb'})

TASK [init_dbserver : Remove default log location] *****************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Reload the PG Service] ***********************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Restart the PG Service] **********************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Make sure we have PG_SSL_DIR] ****************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Check if we have CA key exists or not] *******************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Check if we have CA certificate exists or not] ***********
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Check if we have root.crt exists or not] *****************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Check if we have root crl exists or not] *****************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Check if we have server.key exists or not] ***************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Check if we have server.crt exists or not] ***************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create ssl extension in PG_DATABASE] *********************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create SSL cert key] *************************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : CA key variable] *****************************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create CA Key file in PG_DATA] ***************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create a certificate authority key] **********************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : CA certificate variable] *********************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create CA certificate file in PG_DATA] *******************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create root.crt using CA certificate file in PG_DATA] ****
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create a root.crl] ***************************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create root.crl] *****************************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create SSL Server key] ***********************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Server key variable] *************************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create Server Key file in PG_DATA] ***********************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create a Server cert] ************************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : CA certificate variable] *********************************
ok: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create CA certificate file in PG_DATA] *******************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Find the HBA File location] ******************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Update localhost addresses entries into pg_hba file] *****
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '127.0.0.1/32', 'database': 'replication'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '::1/128', 'database': 'replication'})

TASK [init_dbserver : Update localhost addresses entries into pg_hba file] *****
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '127.0.0.1/32', 'database': 'replication'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '::1/128', 'database': 'replication'})

TASK [init_dbserver : Configure ssl Settings in postgresql.auto.conf] **********
changed: [localhost -> 35.236.92.243] => (item={'name': 'ssl', 'value': 'on'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'ssl_ca_file', 'value': '/etc/edb/certs/root.crt'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'ssl_key_file', 'value': '/etc/edb/certs/server.key'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'ssl_cert_file', 'value': '/etc/edb/certs/server.crt'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'ssl_crl_file', 'value': '/etc/edb/certs/root.crl'})

TASK [init_dbserver : Reload the PG Service] ***********************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Restart the PG Service] **********************************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Create optional Users] ***********************************
skipping: [localhost]

TASK [init_dbserver : Create optional Databases] *******************************

TASK [init_dbserver : Check user defined parameters and update] ****************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Find the HBA File location on primary] *******************
changed: [localhost -> 35.236.92.243]

TASK [init_dbserver : Adding IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [init_dbserver : Adding IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [init_dbserver : Reload the PG Service] ***********************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Create Postgres extensions] ******************************
changed: [localhost -> 35.236.92.243] => (item={'name': 'edb_wait_states', 'database': 'edb'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'edb_wait_states', 'database': 'postgres'})

TASK [init_dbserver : GRANT execute privilege to users] ************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : GRANT role to users] *************************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Copying the PG_COPY_SQL_SCRIPTS] *************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Execute PG_SQL_SCRIPTS] **********************************
skipping: [localhost] => (item=None) 
skipping: [localhost]

TASK [init_dbserver : Reset FORCE/SKIP_INITIALIZE based on the user input] *****
ok: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
ok: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 34.94.18.198"
}

TASK [init_dbserver : Set Node Type] *******************************************
ok: [localhost]

TASK [init_dbserver : set FORCE_INITIALIZE based on the user input] ************
skipping: [localhost]

TASK [init_dbserver : include_tasks] *******************************************
skipping: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
ok: [localhost]

TASK [init_dbserver : Enumerate disks] *****************************************
skipping: [localhost]

TASK [init_dbserver : Update the block devices] ********************************
skipping: [localhost] => (item=None) 

TASK [init_dbserver : Ensure /etc/tuned/edb directory exists] ******************
skipping: [localhost]

TASK [init_dbserver : Create tuned.conf for Postgres] **************************
skipping: [localhost] => (item=[main]) 
skipping: [localhost] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server) 
skipping: [localhost] => (item=[cpu]) 
skipping: [localhost] => (item=governor=performance) 
skipping: [localhost] => (item=energy_perf_bias=performance) 
skipping: [localhost] => (item=min_perf_pct=100) 
skipping: [localhost] => (item=[disk]) 
skipping: [localhost] => (item=readahead=>4096) 
skipping: [localhost] => (item=[sysctl]) 
skipping: [localhost] => (item=vm.overcommit_memory=2) 
skipping: [localhost] => (item=vm.swappiness=1) 
skipping: [localhost] => (item=vm.dirty_ratio=30) 
skipping: [localhost] => (item=vm.dirty_background_ratio=10) 
skipping: [localhost] => (item=[vm]) 
skipping: [localhost] => (item=transparent_hugepages=never) 

TASK [init_dbserver : Enable the tuned] ****************************************
skipping: [localhost]

TASK [init_dbserver : Load the new settings using tuned] ***********************
skipping: [localhost]

TASK [init_dbserver : Check if Cluster has been initialized] *******************
skipping: [localhost]

TASK [init_dbserver : Check if Cluster has been initialized] *******************
skipping: [localhost]

TASK [init_dbserver : Verify PGDATA and stop if exists] ************************
skipping: [localhost]

TASK [init_dbserver : Ensure Postgres Data directory exists] *******************
skipping: [localhost]

TASK [init_dbserver : Ensure Postgres Log directory exists] ********************
skipping: [localhost]

TASK [init_dbserver : Ensure Postgres WAL directory exists] ********************
skipping: [localhost]

TASK [init_dbserver : Create Unix Socket Domain Directories] *******************
skipping: [localhost] => (item=/var/run/edb) 

TASK [init_dbserver : Create hidden edb directory if not exists] ***************
skipping: [localhost]

TASK [init_dbserver : Define INITDB command.] **********************************
skipping: [localhost]

TASK [init_dbserver : Verify PG_WAL and accordingly add the in the INITDB] *****
skipping: [localhost]

TASK [init_dbserver : Verify PG_ENCODING and accordingly add the in the INITDB] ***
skipping: [localhost]

TASK [init_dbserver : Verify PG_LOCALE and accordingly add the in the INITDB] ***
skipping: [localhost]

TASK [init_dbserver : Add other initdb options] ********************************
skipping: [localhost]

TASK [init_dbserver : Initialize Database Postgres Service] ********************
skipping: [localhost]

TASK [init_dbserver : Update unix_socket_directories if provided] **************
skipping: [localhost] => (item={'From': '#unix_socket_directories =', 'To': "unix_socket_directories = '/var/run/edb'"}) 
skipping: [localhost] => (item={'From': 'shared_preload_libraries =', 'To': "shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'"}) 
skipping: [localhost] => (item={'From': '#shared_preload_libraries =', 'To': "shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'"}) 

TASK [init_dbserver : Check if we have the service file already created] *******
skipping: [localhost]

TASK [init_dbserver : Copy postgres service file] ******************************
skipping: [localhost]

TASK [init_dbserver : Update Postgres Service File] ****************************
skipping: [localhost] => (item={'From': 'Environment=PGDATA=/var/lib/edb/as12/data', 'To': 'Environment=PGDATA=/data/pgdata'}) 
skipping: [localhost] => (item={'From': 'PIDFile=/var/lib/edb/as12/data/postmaster.pid', 'To': 'PIDFile=/data/pgdata/postmaster.pid'}) 

TASK [init_dbserver : Start the PG Service] ************************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Set PG_SUPERUSER_PASSWORD if not provided] ***************
skipping: [localhost]

TASK [init_dbserver : Make sure file is has permission for owner only] *********
skipping: [localhost]

TASK [init_dbserver : Set Postgres Superuser's Database Cluster Password] ******
skipping: [localhost]

TASK [init_dbserver : Configure unix socket directory] *************************
skipping: [localhost] => (item={'name': 'unix_socket_directories', 'value': '/var/run/edb'}) 
skipping: [localhost] => (item={'name': 'listen_addresses', 'value': '*'}) 
skipping: [localhost] => (item={'name': 'wal_level', 'value': 'replica'}) 
skipping: [localhost] => (item={'name': 'max_wal_senders', 'value': 10}) 
skipping: [localhost] => (item={'name': 'hot_standby', 'value': True}) 
skipping: [localhost] => (item={'name': 'max_replication_slots', 'value': 10}) 
skipping: [localhost] => (item={'name': 'wal_compression', 'value': True}) 
skipping: [localhost] => (item={'name': 'wal_log_hints', 'value': True}) 
skipping: [localhost] => (item={'name': 'checkpoint_timeout', 'value': '15min'}) 
skipping: [localhost] => (item={'name': 'checkpoint_completion_target', 'value': 0.9}) 
skipping: [localhost] => (item={'name': 'archive_mode', 'value': True}) 
skipping: [localhost] => (item={'name': 'archive_command', 'value': '/bin/true'}) 
skipping: [localhost] => (item={'name': 'random_page_cost', 'value': 1.1}) 
skipping: [localhost] => (item={'name': 'cpu_tuple_cost', 'value': 0.03}) 
skipping: [localhost] => (item={'name': 'logging_collector', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_line_prefix', 'value': '%m [%p-%l] %u@%d app=%a '}) 
skipping: [localhost] => (item={'name': 'log_truncate_on_rotation', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_rotation_size', 'value': '1GB'}) 
skipping: [localhost] => (item={'name': 'log_lock_waits', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_connections', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_disconnections', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_error_verbosity', 'value': 'default'}) 
skipping: [localhost] => (item={'name': 'log_statement', 'value': 'ddl'}) 
skipping: [localhost] => (item={'name': 'log_temp_files', 'value': 0}) 
skipping: [localhost] => (item={'name': 'log_autovacuum_min_duration', 'value': 0}) 
skipping: [localhost] => (item={'name': 'autovacuum_max_workers', 'value': 5}) 
skipping: [localhost] => (item={'name': 'autovacuum_vacuum_cost_limit', 'value': 3000}) 
skipping: [localhost] => (item={'name': 'idle_in_transaction_session_timeout', 'value': '10 min'}) 
skipping: [localhost] => (item={'name': 'syslog_ident', 'value': 'edb'}) 

TASK [init_dbserver : Configure primary_slot_name] *****************************
skipping: [localhost]

TASK [init_dbserver : Configure log_file_name] *********************************
skipping: [localhost] => (item={'name': 'log_filename', 'value': 'edb-%a.log'}) 
skipping: [localhost] => (item={'name': 'log_directory', 'value': '/var/log/edb'}) 

TASK [init_dbserver : Remove default log location] *****************************
skipping: [localhost]

TASK [init_dbserver : Reload the PG Service] ***********************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Make sure we have PG_SSL_DIR] ****************************
skipping: [localhost]

TASK [init_dbserver : Check if we have CA key exists or not] *******************
skipping: [localhost]

TASK [init_dbserver : Check if we have CA certificate exists or not] ***********
skipping: [localhost]

TASK [init_dbserver : Check if we have root.crt exists or not] *****************
skipping: [localhost]

TASK [init_dbserver : Check if we have root crl exists or not] *****************
skipping: [localhost]

TASK [init_dbserver : Check if we have server.key exists or not] ***************
skipping: [localhost]

TASK [init_dbserver : Check if we have server.crt exists or not] ***************
skipping: [localhost]

TASK [init_dbserver : Create ssl extension in PG_DATABASE] *********************
skipping: [localhost]

TASK [init_dbserver : Create SSL cert key] *************************************
skipping: [localhost]

TASK [init_dbserver : CA key variable] *****************************************
skipping: [localhost]

TASK [init_dbserver : Create CA Key file in PG_DATA] ***************************
skipping: [localhost]

TASK [init_dbserver : Create a certificate authority key] **********************
skipping: [localhost]

TASK [init_dbserver : CA certificate variable] *********************************
skipping: [localhost]

TASK [init_dbserver : Create CA certificate file in PG_DATA] *******************
skipping: [localhost]

TASK [init_dbserver : Create root.crt using CA certificate file in PG_DATA] ****
skipping: [localhost]

TASK [init_dbserver : Create a root.crl] ***************************************
skipping: [localhost]

TASK [init_dbserver : Create root.crl] *****************************************
skipping: [localhost]

TASK [init_dbserver : Create SSL Server key] ***********************************
skipping: [localhost]

TASK [init_dbserver : Server key variable] *************************************
skipping: [localhost]

TASK [init_dbserver : Create Server Key file in PG_DATA] ***********************
skipping: [localhost]

TASK [init_dbserver : Create a Server cert] ************************************
skipping: [localhost]

TASK [init_dbserver : CA certificate variable] *********************************
skipping: [localhost]

TASK [init_dbserver : Create CA certificate file in PG_DATA] *******************
skipping: [localhost]

TASK [init_dbserver : Find the HBA File location] ******************************
skipping: [localhost]

TASK [init_dbserver : Update localhost addresses entries into pg_hba file] *****
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'replication'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'replication'}) 

TASK [init_dbserver : Update localhost addresses entries into pg_hba file] *****
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'replication'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'replication'}) 

TASK [init_dbserver : Configure ssl Settings in postgresql.auto.conf] **********
skipping: [localhost] => (item={'name': 'ssl', 'value': 'on'}) 
skipping: [localhost] => (item={'name': 'ssl_ca_file', 'value': '/etc/edb/certs/root.crt'}) 
skipping: [localhost] => (item={'name': 'ssl_key_file', 'value': '/etc/edb/certs/server.key'}) 
skipping: [localhost] => (item={'name': 'ssl_cert_file', 'value': '/etc/edb/certs/server.crt'}) 
skipping: [localhost] => (item={'name': 'ssl_crl_file', 'value': '/etc/edb/certs/root.crl'}) 

TASK [init_dbserver : Reload the PG Service] ***********************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Create optional Users] ***********************************
skipping: [localhost]

TASK [init_dbserver : Create optional Databases] *******************************

TASK [init_dbserver : Check user defined parameters and update] ****************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Find the HBA File location on primary] *******************
skipping: [localhost]

TASK [init_dbserver : Adding IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [init_dbserver : Adding IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [init_dbserver : Reload the PG Service] ***********************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Create Postgres extensions] ******************************
skipping: [localhost] => (item={'name': 'edb_wait_states', 'database': 'edb'}) 
skipping: [localhost] => (item={'name': 'edb_wait_states', 'database': 'postgres'}) 

TASK [init_dbserver : GRANT execute privilege to users] ************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : GRANT role to users] *************************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Copying the PG_COPY_SQL_SCRIPTS] *************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Execute PG_SQL_SCRIPTS] **********************************
skipping: [localhost] => (item=None) 
skipping: [localhost]

TASK [init_dbserver : Reset FORCE/SKIP_INITIALIZE based on the user input] *****
ok: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
ok: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
skipping: [localhost]

TASK [init_dbserver : debug] ***************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Database Engine = EPAS, Public IP = 35.236.109.234"
}

TASK [init_dbserver : Set Node Type] *******************************************
ok: [localhost]

TASK [init_dbserver : set FORCE_INITIALIZE based on the user input] ************
skipping: [localhost]

TASK [init_dbserver : include_tasks] *******************************************
skipping: [localhost]

TASK [init_dbserver : Reference EPAS Variables] ********************************
ok: [localhost]

TASK [init_dbserver : Enumerate disks] *****************************************
skipping: [localhost]

TASK [init_dbserver : Update the block devices] ********************************
skipping: [localhost] => (item=None) 

TASK [init_dbserver : Ensure /etc/tuned/edb directory exists] ******************
skipping: [localhost]

TASK [init_dbserver : Create tuned.conf for Postgres] **************************
skipping: [localhost] => (item=[main]) 
skipping: [localhost] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server) 
skipping: [localhost] => (item=[cpu]) 
skipping: [localhost] => (item=governor=performance) 
skipping: [localhost] => (item=energy_perf_bias=performance) 
skipping: [localhost] => (item=min_perf_pct=100) 
skipping: [localhost] => (item=[disk]) 
skipping: [localhost] => (item=readahead=>4096) 
skipping: [localhost] => (item=[sysctl]) 
skipping: [localhost] => (item=vm.overcommit_memory=2) 
skipping: [localhost] => (item=vm.swappiness=1) 
skipping: [localhost] => (item=vm.dirty_ratio=30) 
skipping: [localhost] => (item=vm.dirty_background_ratio=10) 
skipping: [localhost] => (item=[vm]) 
skipping: [localhost] => (item=transparent_hugepages=never) 

TASK [init_dbserver : Enable the tuned] ****************************************
skipping: [localhost]

TASK [init_dbserver : Load the new settings using tuned] ***********************
skipping: [localhost]

TASK [init_dbserver : Check if Cluster has been initialized] *******************
skipping: [localhost]

TASK [init_dbserver : Check if Cluster has been initialized] *******************
skipping: [localhost]

TASK [init_dbserver : Verify PGDATA and stop if exists] ************************
skipping: [localhost]

TASK [init_dbserver : Ensure Postgres Data directory exists] *******************
skipping: [localhost]

TASK [init_dbserver : Ensure Postgres Log directory exists] ********************
skipping: [localhost]

TASK [init_dbserver : Ensure Postgres WAL directory exists] ********************
skipping: [localhost]

TASK [init_dbserver : Create Unix Socket Domain Directories] *******************
skipping: [localhost] => (item=/var/run/edb) 

TASK [init_dbserver : Create hidden edb directory if not exists] ***************
skipping: [localhost]

TASK [init_dbserver : Define INITDB command.] **********************************
skipping: [localhost]

TASK [init_dbserver : Verify PG_WAL and accordingly add the in the INITDB] *****
skipping: [localhost]

TASK [init_dbserver : Verify PG_ENCODING and accordingly add the in the INITDB] ***
skipping: [localhost]

TASK [init_dbserver : Verify PG_LOCALE and accordingly add the in the INITDB] ***
skipping: [localhost]

TASK [init_dbserver : Add other initdb options] ********************************
skipping: [localhost]

TASK [init_dbserver : Initialize Database Postgres Service] ********************
skipping: [localhost]

TASK [init_dbserver : Update unix_socket_directories if provided] **************
skipping: [localhost] => (item={'From': '#unix_socket_directories =', 'To': "unix_socket_directories = '/var/run/edb'"}) 
skipping: [localhost] => (item={'From': 'shared_preload_libraries =', 'To': "shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'"}) 
skipping: [localhost] => (item={'From': '#shared_preload_libraries =', 'To': "shared_preload_libraries = '$libdir/dbms_pipe,$libdir/edb_gen,$libdir/dbms_aq,$libdir/edb_wait_states'"}) 

TASK [init_dbserver : Check if we have the service file already created] *******
skipping: [localhost]

TASK [init_dbserver : Copy postgres service file] ******************************
skipping: [localhost]

TASK [init_dbserver : Update Postgres Service File] ****************************
skipping: [localhost] => (item={'From': 'Environment=PGDATA=/var/lib/edb/as12/data', 'To': 'Environment=PGDATA=/data/pgdata'}) 
skipping: [localhost] => (item={'From': 'PIDFile=/var/lib/edb/as12/data/postmaster.pid', 'To': 'PIDFile=/data/pgdata/postmaster.pid'}) 

TASK [init_dbserver : Start the PG Service] ************************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Set PG_SUPERUSER_PASSWORD if not provided] ***************
skipping: [localhost]

TASK [init_dbserver : Make sure file is has permission for owner only] *********
skipping: [localhost]

TASK [init_dbserver : Set Postgres Superuser's Database Cluster Password] ******
skipping: [localhost]

TASK [init_dbserver : Configure unix socket directory] *************************
skipping: [localhost] => (item={'name': 'unix_socket_directories', 'value': '/var/run/edb'}) 
skipping: [localhost] => (item={'name': 'listen_addresses', 'value': '*'}) 
skipping: [localhost] => (item={'name': 'wal_level', 'value': 'replica'}) 
skipping: [localhost] => (item={'name': 'max_wal_senders', 'value': 10}) 
skipping: [localhost] => (item={'name': 'hot_standby', 'value': True}) 
skipping: [localhost] => (item={'name': 'max_replication_slots', 'value': 10}) 
skipping: [localhost] => (item={'name': 'wal_compression', 'value': True}) 
skipping: [localhost] => (item={'name': 'wal_log_hints', 'value': True}) 
skipping: [localhost] => (item={'name': 'checkpoint_timeout', 'value': '15min'}) 
skipping: [localhost] => (item={'name': 'checkpoint_completion_target', 'value': 0.9}) 
skipping: [localhost] => (item={'name': 'archive_mode', 'value': True}) 
skipping: [localhost] => (item={'name': 'archive_command', 'value': '/bin/true'}) 
skipping: [localhost] => (item={'name': 'random_page_cost', 'value': 1.1}) 
skipping: [localhost] => (item={'name': 'cpu_tuple_cost', 'value': 0.03}) 
skipping: [localhost] => (item={'name': 'logging_collector', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_line_prefix', 'value': '%m [%p-%l] %u@%d app=%a '}) 
skipping: [localhost] => (item={'name': 'log_truncate_on_rotation', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_rotation_size', 'value': '1GB'}) 
skipping: [localhost] => (item={'name': 'log_lock_waits', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_connections', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_disconnections', 'value': True}) 
skipping: [localhost] => (item={'name': 'log_error_verbosity', 'value': 'default'}) 
skipping: [localhost] => (item={'name': 'log_statement', 'value': 'ddl'}) 
skipping: [localhost] => (item={'name': 'log_temp_files', 'value': 0}) 
skipping: [localhost] => (item={'name': 'log_autovacuum_min_duration', 'value': 0}) 
skipping: [localhost] => (item={'name': 'autovacuum_max_workers', 'value': 5}) 
skipping: [localhost] => (item={'name': 'autovacuum_vacuum_cost_limit', 'value': 3000}) 
skipping: [localhost] => (item={'name': 'idle_in_transaction_session_timeout', 'value': '10 min'}) 
skipping: [localhost] => (item={'name': 'syslog_ident', 'value': 'edb'}) 

TASK [init_dbserver : Configure primary_slot_name] *****************************
skipping: [localhost]

TASK [init_dbserver : Configure log_file_name] *********************************
skipping: [localhost] => (item={'name': 'log_filename', 'value': 'edb-%a.log'}) 
skipping: [localhost] => (item={'name': 'log_directory', 'value': '/var/log/edb'}) 

TASK [init_dbserver : Remove default log location] *****************************
skipping: [localhost]

TASK [init_dbserver : Reload the PG Service] ***********************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Make sure we have PG_SSL_DIR] ****************************
skipping: [localhost]

TASK [init_dbserver : Check if we have CA key exists or not] *******************
skipping: [localhost]

TASK [init_dbserver : Check if we have CA certificate exists or not] ***********
skipping: [localhost]

TASK [init_dbserver : Check if we have root.crt exists or not] *****************
skipping: [localhost]

TASK [init_dbserver : Check if we have root crl exists or not] *****************
skipping: [localhost]

TASK [init_dbserver : Check if we have server.key exists or not] ***************
skipping: [localhost]

TASK [init_dbserver : Check if we have server.crt exists or not] ***************
skipping: [localhost]

TASK [init_dbserver : Create ssl extension in PG_DATABASE] *********************
skipping: [localhost]

TASK [init_dbserver : Create SSL cert key] *************************************
skipping: [localhost]

TASK [init_dbserver : CA key variable] *****************************************
skipping: [localhost]

TASK [init_dbserver : Create CA Key file in PG_DATA] ***************************
skipping: [localhost]

TASK [init_dbserver : Create a certificate authority key] **********************
skipping: [localhost]

TASK [init_dbserver : CA certificate variable] *********************************
skipping: [localhost]

TASK [init_dbserver : Create CA certificate file in PG_DATA] *******************
skipping: [localhost]

TASK [init_dbserver : Create root.crt using CA certificate file in PG_DATA] ****
skipping: [localhost]

TASK [init_dbserver : Create a root.crl] ***************************************
skipping: [localhost]

TASK [init_dbserver : Create root.crl] *****************************************
skipping: [localhost]

TASK [init_dbserver : Create SSL Server key] ***********************************
skipping: [localhost]

TASK [init_dbserver : Server key variable] *************************************
skipping: [localhost]

TASK [init_dbserver : Create Server Key file in PG_DATA] ***********************
skipping: [localhost]

TASK [init_dbserver : Create a Server cert] ************************************
skipping: [localhost]

TASK [init_dbserver : CA certificate variable] *********************************
skipping: [localhost]

TASK [init_dbserver : Create CA certificate file in PG_DATA] *******************
skipping: [localhost]

TASK [init_dbserver : Find the HBA File location] ******************************
skipping: [localhost]

TASK [init_dbserver : Update localhost addresses entries into pg_hba file] *****
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'replication'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'replication'}) 

TASK [init_dbserver : Update localhost addresses entries into pg_hba file] *****
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'replication'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'replication'}) 

TASK [init_dbserver : Configure ssl Settings in postgresql.auto.conf] **********
skipping: [localhost] => (item={'name': 'ssl', 'value': 'on'}) 
skipping: [localhost] => (item={'name': 'ssl_ca_file', 'value': '/etc/edb/certs/root.crt'}) 
skipping: [localhost] => (item={'name': 'ssl_key_file', 'value': '/etc/edb/certs/server.key'}) 
skipping: [localhost] => (item={'name': 'ssl_cert_file', 'value': '/etc/edb/certs/server.crt'}) 
skipping: [localhost] => (item={'name': 'ssl_crl_file', 'value': '/etc/edb/certs/root.crl'}) 

TASK [init_dbserver : Reload the PG Service] ***********************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Create optional Users] ***********************************
skipping: [localhost]

TASK [init_dbserver : Create optional Databases] *******************************

TASK [init_dbserver : Check user defined parameters and update] ****************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Find the HBA File location on primary] *******************
skipping: [localhost]

TASK [init_dbserver : Adding IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [init_dbserver : Adding IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [init_dbserver : Reload the PG Service] ***********************************
skipping: [localhost]

TASK [init_dbserver : Restart the PG Service] **********************************
skipping: [localhost]

TASK [init_dbserver : Create Postgres extensions] ******************************
skipping: [localhost] => (item={'name': 'edb_wait_states', 'database': 'edb'}) 
skipping: [localhost] => (item={'name': 'edb_wait_states', 'database': 'postgres'}) 

TASK [init_dbserver : GRANT execute privilege to users] ************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : GRANT role to users] *************************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Copying the PG_COPY_SQL_SCRIPTS] *************************
skipping: [localhost] => (item=) 

TASK [init_dbserver : Execute PG_SQL_SCRIPTS] **********************************
skipping: [localhost] => (item=None) 
skipping: [localhost]

TASK [init_dbserver : Reset FORCE/SKIP_INITIALIZE based on the user input] *****
ok: [localhost]

TASK [Iterate through replication role with items from hosts file] *************

TASK [setup_replication : Reference EPAS Variables] ****************************
ok: [localhost]

TASK [setup_replication : Reference EPAS Variables] ****************************
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
skipping: [localhost]

TASK [setup_replication : Set USE_HOSTNAME based on variable condition and users input] ***
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Node Type = pemserver, Public IP = 34.94.117.77, Postgres Type = EPAS, ALL_NODE_IPS = ['10.0.0.2', '10.0.0.5', '10.0.0.4', '10.0.0.3'], PRIMARY_PRIVATE_IP = 10.0.0.5, PRIMARY_HOST_NAME = , USE_HOSTNAME = False, STANDBY_NAMES = ['standby2', 'standby3']"
}

TASK [setup_replication : Assign variables] ************************************
ok: [localhost]

TASK [setup_replication : set FORCE_REPLICATION based on the user input] *******
skipping: [localhost]

TASK [setup_replication : include_tasks] ***************************************
skipping: [localhost]

TASK [setup_replication : list the ssl file] ***********************************
skipping: [localhost]

TASK [setup_replication : create the local ssl directory] **********************
skipping: [localhost]

TASK [setup_replication : create the ssl directory on the server] **************
skipping: [localhost]

TASK [setup_replication : fetch ssl to local] **********************************
skipping: [localhost] => (item=None) 

TASK [setup_replication : Copy the SSL files to standby] ***********************
skipping: [localhost] => (item=None) 

TASK [setup_replication : Change the SSL files permission] *********************
skipping: [localhost] => (item=None) 

TASK [setup_replication : Create .created_ssl file] ****************************
skipping: [localhost]

TASK [setup_replication : Remove the local ssl directory] **********************
skipping: [localhost]

TASK [setup_replication : Enumerate disks] *************************************
skipping: [localhost]

TASK [setup_replication : Update the block devices] ****************************
skipping: [localhost] => (item=None) 

TASK [setup_replication : Ensure /etc/tuned/edb directory exists] **************
skipping: [localhost]

TASK [setup_replication : Create tuned.conf for Postgres] **********************
skipping: [localhost] => (item=[main]) 
skipping: [localhost] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server) 
skipping: [localhost] => (item=[cpu]) 
skipping: [localhost] => (item=governor=performance) 
skipping: [localhost] => (item=energy_perf_bias=performance) 
skipping: [localhost] => (item=min_perf_pct=100) 
skipping: [localhost] => (item=[disk]) 
skipping: [localhost] => (item=readahead=>4096) 
skipping: [localhost] => (item=[sysctl]) 
skipping: [localhost] => (item=vm.overcommit_memory=2) 
skipping: [localhost] => (item=vm.swappiness=1) 
skipping: [localhost] => (item=vm.dirty_ratio=30) 
skipping: [localhost] => (item=vm.dirty_background_ratio=10) 
skipping: [localhost] => (item=[vm]) 
skipping: [localhost] => (item=transparent_hugepages=never) 

TASK [setup_replication : Enable the tuned] ************************************
skipping: [localhost]

TASK [setup_replication : Load the new settings using tuned] *******************
skipping: [localhost]

TASK [setup_replication : Check if Cluster has been initialized] ***************
skipping: [localhost]

TASK [setup_replication : Check if Cluster has been initialized] ***************
skipping: [localhost]

TASK [setup_replication : Verify PGDATA and stop if exists] ********************
skipping: [localhost]

TASK [setup_replication : Ensure Postgres Data directory exists] ***************
skipping: [localhost]

TASK [setup_replication : Ensure Postgres Log directory exists] ****************
skipping: [localhost]

TASK [setup_replication : Ensure Postgres WAL directory exists] ****************
skipping: [localhost]

TASK [setup_replication : Create Unix Socket Domain Directories] ***************
skipping: [localhost] => (item=/var/run/edb) 

TASK [setup_replication : Create hidden edb directory if not exists] ***********
skipping: [localhost]

TASK [setup_replication : Set PG_REPLICATION_USER pass file] *******************
skipping: [localhost]

TASK [setup_replication : Set PG_REPLICATION_USER_PASSWORD if not provided] ****
skipping: [localhost]

TASK [setup_replication : Create Replication user] *****************************
skipping: [localhost]

TASK [setup_replication : Create a .pgpass on primary] *************************
skipping: [localhost]

TASK [setup_replication : Find the HBA File location on primary] ***************
skipping: [localhost]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Create physical slots for standbys] ******************
skipping: [localhost] => (item=standby2) 
skipping: [localhost] => (item=standby3) 

TASK [setup_replication : Reload the Primary PG Service] ***********************
skipping: [localhost]

TASK [setup_replication : Define pg_basebackup command.] ***********************
skipping: [localhost]

TASK [setup_replication : Verify PG_WAL and accordingly add the in the INITDB] ***
skipping: [localhost]

TASK [setup_replication : Add slot_name in pg_basebackup] **********************
skipping: [localhost]

TASK [setup_replication : set replication user information] ********************
skipping: [localhost]

TASK [setup_replication : set host and port] ***********************************
skipping: [localhost]

TASK [setup_replication : set host and port] ***********************************
skipping: [localhost]

TASK [setup_replication : Use other supplied options if given] *****************
skipping: [localhost]

TASK [setup_replication : Create a .pgpass] ************************************
skipping: [localhost]

TASK [setup_replication : Create standby] **************************************
skipping: [localhost]

TASK [setup_replication : Check if we have the service file already created] ***
skipping: [localhost]

TASK [setup_replication : Copy postgres service file] **************************
skipping: [localhost]

TASK [setup_replication : Update Postgres Service File] ************************
skipping: [localhost] => (item={'From': 'Environment=PGDATA=/var/lib/edb/as12/data', 'To': 'Environment=PGDATA=/data/pgdata'}) 
skipping: [localhost] => (item={'From': 'PIDFile=/var/lib/edb/as12/data/postmaster.pid', 'To': 'PIDFile=/data/pgdata/postmaster.pid'}) 

TASK [setup_replication : Start the PG Service] ********************************
skipping: [localhost]

TASK [setup_replication : Restart the PG Service] ******************************
skipping: [localhost]

TASK [setup_replication : Configure Global Settings in postgresql.auto.conf] ***
skipping: [localhost] => (item={'name': 'log_filename', 'value': 'edb-%a.log'}) 
skipping: [localhost] => (item={'name': 'log_directory', 'value': '/var/log/edb'}) 

TASK [setup_replication : Remove the default directory based on PG_LOG] ********
skipping: [localhost]

TASK [setup_replication : Find the HBA File location on standby] ***************
skipping: [localhost]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on standby] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on standby] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Reload the Primary PG Service] ***********************
skipping: [localhost]

TASK [setup_replication : Set query if snchronous_standby_names is not empty] ***
skipping: [localhost]

TASK [setup_replication : Check if we have synchronous_standby_names set] ******
skipping: [localhost]

TASK [setup_replication : Standby Quorum string] *******************************
skipping: [localhost]

TASK [setup_replication : Build synchronous_standby_names] *********************
skipping: [localhost]

TASK [setup_replication : Build synchronous_standby_names on primary] **********
skipping: [localhost]

TASK [setup_replication : Set synchronous_standby_names] ***********************
skipping: [localhost]

TASK [setup_replication : Set synchronous parameters as per setting on primary] ***
skipping: [localhost] => (item={'name': 'synchronous_commit', 'value': 'remote_apply'}) 
skipping: [localhost] => (item={'name': 'synchronous_standby_names', 'value': ''}) 

TASK [setup_replication : Reload the Primary PG Service] ***********************
skipping: [localhost]

TASK [setup_replication : Check user defined parameters and update] ************
skipping: [localhost] => (item=) 

TASK [setup_replication : Find the HBA File location on primary] ***************
skipping: [localhost]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [setup_replication : Reload the PG Service] *******************************
skipping: [localhost]

TASK [setup_replication : Restart the PG Service] ******************************
skipping: [localhost]

TASK [setup_replication : Reset FORCE_REPLICATION based on the user input] *****
ok: [localhost]

TASK [setup_replication : Reference EPAS Variables] ****************************
ok: [localhost]

TASK [setup_replication : Reference EPAS Variables] ****************************
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
skipping: [localhost]

TASK [setup_replication : Set USE_HOSTNAME based on variable condition and users input] ***
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Node Type = primary, Public IP = 35.236.92.243, Postgres Type = EPAS, ALL_NODE_IPS = ['10.0.0.2', '10.0.0.5', '10.0.0.4', '10.0.0.3'], PRIMARY_PRIVATE_IP = 10.0.0.5, PRIMARY_HOST_NAME = , USE_HOSTNAME = False, STANDBY_NAMES = ['standby2', 'standby3']"
}

TASK [setup_replication : Assign variables] ************************************
ok: [localhost]

TASK [setup_replication : set FORCE_REPLICATION based on the user input] *******
skipping: [localhost]

TASK [setup_replication : include_tasks] ***************************************
skipping: [localhost]

TASK [setup_replication : list the ssl file] ***********************************
skipping: [localhost]

TASK [setup_replication : create the local ssl directory] **********************
skipping: [localhost]

TASK [setup_replication : create the ssl directory on the server] **************
skipping: [localhost]

TASK [setup_replication : fetch ssl to local] **********************************
skipping: [localhost] => (item=None) 

TASK [setup_replication : Copy the SSL files to standby] ***********************
skipping: [localhost] => (item=None) 

TASK [setup_replication : Change the SSL files permission] *********************
skipping: [localhost] => (item=None) 

TASK [setup_replication : Create .created_ssl file] ****************************
skipping: [localhost]

TASK [setup_replication : Remove the local ssl directory] **********************
skipping: [localhost]

TASK [setup_replication : Enumerate disks] *************************************
skipping: [localhost]

TASK [setup_replication : Update the block devices] ****************************
skipping: [localhost] => (item=None) 

TASK [setup_replication : Ensure /etc/tuned/edb directory exists] **************
skipping: [localhost]

TASK [setup_replication : Create tuned.conf for Postgres] **********************
skipping: [localhost] => (item=[main]) 
skipping: [localhost] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server) 
skipping: [localhost] => (item=[cpu]) 
skipping: [localhost] => (item=governor=performance) 
skipping: [localhost] => (item=energy_perf_bias=performance) 
skipping: [localhost] => (item=min_perf_pct=100) 
skipping: [localhost] => (item=[disk]) 
skipping: [localhost] => (item=readahead=>4096) 
skipping: [localhost] => (item=[sysctl]) 
skipping: [localhost] => (item=vm.overcommit_memory=2) 
skipping: [localhost] => (item=vm.swappiness=1) 
skipping: [localhost] => (item=vm.dirty_ratio=30) 
skipping: [localhost] => (item=vm.dirty_background_ratio=10) 
skipping: [localhost] => (item=[vm]) 
skipping: [localhost] => (item=transparent_hugepages=never) 

TASK [setup_replication : Enable the tuned] ************************************
skipping: [localhost]

TASK [setup_replication : Load the new settings using tuned] *******************
skipping: [localhost]

TASK [setup_replication : Check if Cluster has been initialized] ***************
skipping: [localhost]

TASK [setup_replication : Check if Cluster has been initialized] ***************
skipping: [localhost]

TASK [setup_replication : Verify PGDATA and stop if exists] ********************
skipping: [localhost]

TASK [setup_replication : Ensure Postgres Data directory exists] ***************
skipping: [localhost]

TASK [setup_replication : Ensure Postgres Log directory exists] ****************
skipping: [localhost]

TASK [setup_replication : Ensure Postgres WAL directory exists] ****************
skipping: [localhost]

TASK [setup_replication : Create Unix Socket Domain Directories] ***************
skipping: [localhost] => (item=/var/run/edb) 

TASK [setup_replication : Create hidden edb directory if not exists] ***********
skipping: [localhost]

TASK [setup_replication : Set PG_REPLICATION_USER pass file] *******************
skipping: [localhost]

TASK [setup_replication : Set PG_REPLICATION_USER_PASSWORD if not provided] ****
skipping: [localhost]

TASK [setup_replication : Create Replication user] *****************************
skipping: [localhost]

TASK [setup_replication : Create a .pgpass on primary] *************************
skipping: [localhost]

TASK [setup_replication : Find the HBA File location on primary] ***************
skipping: [localhost]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Create physical slots for standbys] ******************
skipping: [localhost] => (item=standby2) 
skipping: [localhost] => (item=standby3) 

TASK [setup_replication : Reload the Primary PG Service] ***********************
skipping: [localhost]

TASK [setup_replication : Define pg_basebackup command.] ***********************
skipping: [localhost]

TASK [setup_replication : Verify PG_WAL and accordingly add the in the INITDB] ***
skipping: [localhost]

TASK [setup_replication : Add slot_name in pg_basebackup] **********************
skipping: [localhost]

TASK [setup_replication : set replication user information] ********************
skipping: [localhost]

TASK [setup_replication : set host and port] ***********************************
skipping: [localhost]

TASK [setup_replication : set host and port] ***********************************
skipping: [localhost]

TASK [setup_replication : Use other supplied options if given] *****************
skipping: [localhost]

TASK [setup_replication : Create a .pgpass] ************************************
skipping: [localhost]

TASK [setup_replication : Create standby] **************************************
skipping: [localhost]

TASK [setup_replication : Check if we have the service file already created] ***
skipping: [localhost]

TASK [setup_replication : Copy postgres service file] **************************
skipping: [localhost]

TASK [setup_replication : Update Postgres Service File] ************************
skipping: [localhost] => (item={'From': 'Environment=PGDATA=/var/lib/edb/as12/data', 'To': 'Environment=PGDATA=/data/pgdata'}) 
skipping: [localhost] => (item={'From': 'PIDFile=/var/lib/edb/as12/data/postmaster.pid', 'To': 'PIDFile=/data/pgdata/postmaster.pid'}) 

TASK [setup_replication : Start the PG Service] ********************************
skipping: [localhost]

TASK [setup_replication : Restart the PG Service] ******************************
skipping: [localhost]

TASK [setup_replication : Configure Global Settings in postgresql.auto.conf] ***
skipping: [localhost] => (item={'name': 'log_filename', 'value': 'edb-%a.log'}) 
skipping: [localhost] => (item={'name': 'log_directory', 'value': '/var/log/edb'}) 

TASK [setup_replication : Remove the default directory based on PG_LOG] ********
skipping: [localhost]

TASK [setup_replication : Find the HBA File location on standby] ***************
skipping: [localhost]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on standby] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on standby] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Reload the Primary PG Service] ***********************
skipping: [localhost]

TASK [setup_replication : Set query if snchronous_standby_names is not empty] ***
skipping: [localhost]

TASK [setup_replication : Check if we have synchronous_standby_names set] ******
skipping: [localhost]

TASK [setup_replication : Standby Quorum string] *******************************
skipping: [localhost]

TASK [setup_replication : Build synchronous_standby_names] *********************
skipping: [localhost]

TASK [setup_replication : Build synchronous_standby_names on primary] **********
skipping: [localhost]

TASK [setup_replication : Set synchronous_standby_names] ***********************
skipping: [localhost]

TASK [setup_replication : Set synchronous parameters as per setting on primary] ***
skipping: [localhost] => (item={'name': 'synchronous_commit', 'value': 'remote_apply'}) 
skipping: [localhost] => (item={'name': 'synchronous_standby_names', 'value': ''}) 

TASK [setup_replication : Reload the Primary PG Service] ***********************
skipping: [localhost]

TASK [setup_replication : Check user defined parameters and update] ************
skipping: [localhost] => (item=) 

TASK [setup_replication : Find the HBA File location on primary] ***************
skipping: [localhost]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [setup_replication : Reload the PG Service] *******************************
skipping: [localhost]

TASK [setup_replication : Restart the PG Service] ******************************
skipping: [localhost]

TASK [setup_replication : Reset FORCE_REPLICATION based on the user input] *****
ok: [localhost]

TASK [setup_replication : Reference EPAS Variables] ****************************
ok: [localhost]

TASK [setup_replication : Reference EPAS Variables] ****************************
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
skipping: [localhost]

TASK [setup_replication : Set USE_HOSTNAME based on variable condition and users input] ***
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Node Type = standby, Public IP = 34.94.18.198, Postgres Type = EPAS, ALL_NODE_IPS = ['10.0.0.2', '10.0.0.5', '10.0.0.4', '10.0.0.3'], PRIMARY_PRIVATE_IP = 10.0.0.5, PRIMARY_HOST_NAME = , USE_HOSTNAME = False, STANDBY_NAMES = ['standby2', 'standby3']"
}

TASK [setup_replication : Assign variables] ************************************
ok: [localhost]

TASK [setup_replication : set FORCE_REPLICATION based on the user input] *******
skipping: [localhost]

TASK [setup_replication : include_tasks] ***************************************
skipping: [localhost]

TASK [setup_replication : list the ssl file] ***********************************
ok: [localhost -> 35.236.92.243]

TASK [setup_replication : create the local ssl directory] **********************
changed: [localhost -> localhost]

TASK [setup_replication : create the ssl directory on the server] **************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : fetch ssl to local] **********************************
changed: [localhost -> 35.236.92.243] => (item=ca_certificate.crt)
changed: [localhost -> 35.236.92.243] => (item=ca_key.key)
changed: [localhost -> 35.236.92.243] => (item=root.crl)
changed: [localhost -> 35.236.92.243] => (item=root.crt)
changed: [localhost -> 35.236.92.243] => (item=server.crt)
changed: [localhost -> 35.236.92.243] => (item=server.key)

TASK [setup_replication : Copy the SSL files to standby] ***********************
changed: [localhost -> 34.94.18.198] => (item=ca_certificate.crt)
changed: [localhost -> 34.94.18.198] => (item=ca_key.key)
changed: [localhost -> 34.94.18.198] => (item=root.crl)
changed: [localhost -> 34.94.18.198] => (item=root.crt)
changed: [localhost -> 34.94.18.198] => (item=server.crt)
changed: [localhost -> 34.94.18.198] => (item=server.key)

TASK [setup_replication : Change the SSL files permission] *********************
changed: [localhost -> 34.94.18.198] => (item=ca_certificate.crt)
changed: [localhost -> 34.94.18.198] => (item=ca_key.key)
changed: [localhost -> 34.94.18.198] => (item=root.crl)
changed: [localhost -> 34.94.18.198] => (item=root.crt)
changed: [localhost -> 34.94.18.198] => (item=server.crt)
changed: [localhost -> 34.94.18.198] => (item=server.key)

TASK [setup_replication : Create .created_ssl file] ****************************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Remove the local ssl directory] **********************
changed: [localhost -> localhost]

TASK [setup_replication : Enumerate disks] *************************************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Update the block devices] ****************************
ok: [localhost -> 34.94.18.198] => (item=sda)

TASK [setup_replication : Ensure /etc/tuned/edb directory exists] **************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Create tuned.conf for Postgres] **********************
changed: [localhost -> 34.94.18.198] => (item=[main])
changed: [localhost -> 34.94.18.198] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server)
changed: [localhost -> 34.94.18.198] => (item=[cpu])
changed: [localhost -> 34.94.18.198] => (item=governor=performance)
changed: [localhost -> 34.94.18.198] => (item=energy_perf_bias=performance)
changed: [localhost -> 34.94.18.198] => (item=min_perf_pct=100)
changed: [localhost -> 34.94.18.198] => (item=[disk])
changed: [localhost -> 34.94.18.198] => (item=readahead=>4096)
changed: [localhost -> 34.94.18.198] => (item=[sysctl])
changed: [localhost -> 34.94.18.198] => (item=vm.overcommit_memory=2)
changed: [localhost -> 34.94.18.198] => (item=vm.swappiness=1)
changed: [localhost -> 34.94.18.198] => (item=vm.dirty_ratio=30)
changed: [localhost -> 34.94.18.198] => (item=vm.dirty_background_ratio=10)
changed: [localhost -> 34.94.18.198] => (item=[vm])
changed: [localhost -> 34.94.18.198] => (item=transparent_hugepages=never)

TASK [setup_replication : Enable the tuned] ************************************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Load the new settings using tuned] *******************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Check if Cluster has been initialized] ***************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Check if Cluster has been initialized] ***************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Verify PGDATA and stop if exists] ********************
skipping: [localhost]

TASK [setup_replication : Ensure Postgres Data directory exists] ***************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Ensure Postgres Log directory exists] ****************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Ensure Postgres WAL directory exists] ****************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Create Unix Socket Domain Directories] ***************
changed: [localhost -> 34.94.18.198] => (item=/var/run/edb)

TASK [setup_replication : Create hidden edb directory if not exists] ***********
ok: [localhost -> localhost]

TASK [setup_replication : Set PG_REPLICATION_USER pass file] *******************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Set PG_REPLICATION_USER_PASSWORD if not provided] ****
ok: [localhost -> localhost]

TASK [setup_replication : Create Replication user] *****************************
changed: [localhost -> 35.236.92.243]

TASK [setup_replication : Create a .pgpass on primary] *************************
changed: [localhost -> 35.236.92.243]

TASK [setup_replication : Find the HBA File location on primary] ***************
changed: [localhost -> 35.236.92.243]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
changed: [localhost -> 35.236.92.243] => (item=10.0.0.2)
skipping: [localhost] => (item=10.0.0.5) 
changed: [localhost -> 35.236.92.243] => (item=10.0.0.4)
changed: [localhost -> 35.236.92.243] => (item=10.0.0.3)

TASK [setup_replication : Create physical slots for standbys] ******************
changed: [localhost -> 35.236.92.243] => (item=standby2)
changed: [localhost -> 35.236.92.243] => (item=standby3)

TASK [setup_replication : Reload the Primary PG Service] ***********************
changed: [localhost -> 35.236.92.243]

TASK [setup_replication : Define pg_basebackup command.] ***********************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Verify PG_WAL and accordingly add the in the INITDB] ***
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Add slot_name in pg_basebackup] **********************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : set replication user information] ********************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : set host and port] ***********************************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : set host and port] ***********************************
skipping: [localhost]

TASK [setup_replication : Use other supplied options if given] *****************
skipping: [localhost]

TASK [setup_replication : Create a .pgpass] ************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Create standby] **************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Check if we have the service file already created] ***
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Copy postgres service file] **************************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Update Postgres Service File] ************************
changed: [localhost -> 34.94.18.198] => (item={'From': 'Environment=PGDATA=/var/lib/edb/as12/data', 'To': 'Environment=PGDATA=/data/pgdata'})
changed: [localhost -> 34.94.18.198] => (item={'From': 'PIDFile=/var/lib/edb/as12/data/postmaster.pid', 'To': 'PIDFile=/data/pgdata/postmaster.pid'})

TASK [setup_replication : Start the PG Service] ********************************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Restart the PG Service] ******************************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Configure Global Settings in postgresql.auto.conf] ***
ok: [localhost -> 34.94.18.198] => (item={'name': 'log_filename', 'value': 'edb-%a.log'})
ok: [localhost -> 34.94.18.198] => (item={'name': 'log_directory', 'value': '/var/log/edb'})

TASK [setup_replication : Remove the default directory based on PG_LOG] ********
skipping: [localhost]

TASK [setup_replication : Find the HBA File location on standby] ***************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on standby] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on standby] ***
ok: [localhost -> 34.94.18.198] => (item=10.0.0.2)
changed: [localhost -> 34.94.18.198] => (item=10.0.0.5)
skipping: [localhost] => (item=10.0.0.4) 
ok: [localhost -> 34.94.18.198] => (item=10.0.0.3)

TASK [setup_replication : Reload the Primary PG Service] ***********************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Set query if snchronous_standby_names is not empty] ***
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Check if we have synchronous_standby_names set] ******
changed: [localhost -> 35.236.92.243]

TASK [setup_replication : Standby Quorum string] *******************************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Build synchronous_standby_names] *********************
ok: [localhost -> 34.94.18.198]

TASK [setup_replication : Build synchronous_standby_names on primary] **********
skipping: [localhost]

TASK [setup_replication : Set synchronous_standby_names] ***********************
skipping: [localhost]

TASK [setup_replication : Set synchronous parameters as per setting on primary] ***
skipping: [localhost] => (item={'name': 'synchronous_commit', 'value': 'remote_apply'}) 
skipping: [localhost] => (item={'name': 'synchronous_standby_names', 'value': 'ANY 1 (standby2)'}) 

TASK [setup_replication : Reload the Primary PG Service] ***********************
skipping: [localhost]

TASK [setup_replication : Check user defined parameters and update] ************
skipping: [localhost] => (item=) 

TASK [setup_replication : Find the HBA File location on primary] ***************
changed: [localhost -> 34.94.18.198]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [setup_replication : Reload the PG Service] *******************************
skipping: [localhost]

TASK [setup_replication : Restart the PG Service] ******************************
skipping: [localhost]

TASK [setup_replication : Reset FORCE_REPLICATION based on the user input] *****
ok: [localhost]

TASK [setup_replication : Reference EPAS Variables] ****************************
ok: [localhost]

TASK [setup_replication : Reference EPAS Variables] ****************************
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
skipping: [localhost]

TASK [setup_replication : Set USE_HOSTNAME based on variable condition and users input] ***
skipping: [localhost]

TASK [setup_replication : debug] ***********************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: Postgres Version = 12, Node Type = standby, Public IP = 35.236.109.234, Postgres Type = EPAS, ALL_NODE_IPS = ['10.0.0.2', '10.0.0.5', '10.0.0.4', '10.0.0.3'], PRIMARY_PRIVATE_IP = 10.0.0.5, PRIMARY_HOST_NAME = , USE_HOSTNAME = False, STANDBY_NAMES = ['standby2', 'standby3']"
}

TASK [setup_replication : Assign variables] ************************************
ok: [localhost]

TASK [setup_replication : set FORCE_REPLICATION based on the user input] *******
skipping: [localhost]

TASK [setup_replication : include_tasks] ***************************************
skipping: [localhost]

TASK [setup_replication : list the ssl file] ***********************************
ok: [localhost -> 35.236.92.243]

TASK [setup_replication : create the local ssl directory] **********************
changed: [localhost -> localhost]

TASK [setup_replication : create the ssl directory on the server] **************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : fetch ssl to local] **********************************
changed: [localhost -> 35.236.92.243] => (item=ca_certificate.crt)
changed: [localhost -> 35.236.92.243] => (item=ca_key.key)
changed: [localhost -> 35.236.92.243] => (item=root.crl)
changed: [localhost -> 35.236.92.243] => (item=root.crt)
changed: [localhost -> 35.236.92.243] => (item=server.crt)
changed: [localhost -> 35.236.92.243] => (item=server.key)

TASK [setup_replication : Copy the SSL files to standby] ***********************
changed: [localhost -> 35.236.109.234] => (item=ca_certificate.crt)
changed: [localhost -> 35.236.109.234] => (item=ca_key.key)
changed: [localhost -> 35.236.109.234] => (item=root.crl)
changed: [localhost -> 35.236.109.234] => (item=root.crt)
changed: [localhost -> 35.236.109.234] => (item=server.crt)
changed: [localhost -> 35.236.109.234] => (item=server.key)

TASK [setup_replication : Change the SSL files permission] *********************
changed: [localhost -> 35.236.109.234] => (item=ca_certificate.crt)
changed: [localhost -> 35.236.109.234] => (item=ca_key.key)
changed: [localhost -> 35.236.109.234] => (item=root.crl)
changed: [localhost -> 35.236.109.234] => (item=root.crt)
changed: [localhost -> 35.236.109.234] => (item=server.crt)
changed: [localhost -> 35.236.109.234] => (item=server.key)

TASK [setup_replication : Create .created_ssl file] ****************************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Remove the local ssl directory] **********************
changed: [localhost -> localhost]

TASK [setup_replication : Enumerate disks] *************************************
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : Update the block devices] ****************************
ok: [localhost -> 35.236.109.234] => (item=sda)

TASK [setup_replication : Ensure /etc/tuned/edb directory exists] **************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Create tuned.conf for Postgres] **********************
changed: [localhost -> 35.236.109.234] => (item=[main])
changed: [localhost -> 35.236.109.234] => (item=summary=Tuned profiles for EnterpriseDB Postgres Advanced Server)
changed: [localhost -> 35.236.109.234] => (item=[cpu])
changed: [localhost -> 35.236.109.234] => (item=governor=performance)
changed: [localhost -> 35.236.109.234] => (item=energy_perf_bias=performance)
changed: [localhost -> 35.236.109.234] => (item=min_perf_pct=100)
changed: [localhost -> 35.236.109.234] => (item=[disk])
changed: [localhost -> 35.236.109.234] => (item=readahead=>4096)
changed: [localhost -> 35.236.109.234] => (item=[sysctl])
changed: [localhost -> 35.236.109.234] => (item=vm.overcommit_memory=2)
changed: [localhost -> 35.236.109.234] => (item=vm.swappiness=1)
changed: [localhost -> 35.236.109.234] => (item=vm.dirty_ratio=30)
changed: [localhost -> 35.236.109.234] => (item=vm.dirty_background_ratio=10)
changed: [localhost -> 35.236.109.234] => (item=[vm])
changed: [localhost -> 35.236.109.234] => (item=transparent_hugepages=never)

TASK [setup_replication : Enable the tuned] ************************************
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : Load the new settings using tuned] *******************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Check if Cluster has been initialized] ***************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Check if Cluster has been initialized] ***************
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : Verify PGDATA and stop if exists] ********************
skipping: [localhost]

TASK [setup_replication : Ensure Postgres Data directory exists] ***************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Ensure Postgres Log directory exists] ****************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Ensure Postgres WAL directory exists] ****************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Create Unix Socket Domain Directories] ***************
changed: [localhost -> 35.236.109.234] => (item=/var/run/edb)

TASK [setup_replication : Create hidden edb directory if not exists] ***********
ok: [localhost -> localhost]

TASK [setup_replication : Set PG_REPLICATION_USER pass file] *******************
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : Set PG_REPLICATION_USER_PASSWORD if not provided] ****
skipping: [localhost]

TASK [setup_replication : Create Replication user] *****************************
changed: [localhost -> 35.236.92.243]

TASK [setup_replication : Create a .pgpass on primary] *************************
ok: [localhost -> 35.236.92.243]

TASK [setup_replication : Find the HBA File location on primary] ***************
changed: [localhost -> 35.236.92.243]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
ok: [localhost -> 35.236.92.243] => (item=10.0.0.2)
skipping: [localhost] => (item=10.0.0.5) 
ok: [localhost -> 35.236.92.243] => (item=10.0.0.4)
ok: [localhost -> 35.236.92.243] => (item=10.0.0.3)

TASK [setup_replication : Create physical slots for standbys] ******************
ok: [localhost -> 35.236.92.243] => (item=standby2)
ok: [localhost -> 35.236.92.243] => (item=standby3)

TASK [setup_replication : Reload the Primary PG Service] ***********************
skipping: [localhost]

TASK [setup_replication : Define pg_basebackup command.] ***********************
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : Verify PG_WAL and accordingly add the in the INITDB] ***
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : Add slot_name in pg_basebackup] **********************
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : set replication user information] ********************
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : set host and port] ***********************************
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : set host and port] ***********************************
skipping: [localhost]

TASK [setup_replication : Use other supplied options if given] *****************
skipping: [localhost]

TASK [setup_replication : Create a .pgpass] ************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Create standby] **************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Check if we have the service file already created] ***
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : Copy postgres service file] **************************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Update Postgres Service File] ************************
changed: [localhost -> 35.236.109.234] => (item={'From': 'Environment=PGDATA=/var/lib/edb/as12/data', 'To': 'Environment=PGDATA=/data/pgdata'})
changed: [localhost -> 35.236.109.234] => (item={'From': 'PIDFile=/var/lib/edb/as12/data/postmaster.pid', 'To': 'PIDFile=/data/pgdata/postmaster.pid'})

TASK [setup_replication : Start the PG Service] ********************************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Restart the PG Service] ******************************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Configure Global Settings in postgresql.auto.conf] ***
ok: [localhost -> 35.236.109.234] => (item={'name': 'log_filename', 'value': 'edb-%a.log'})
ok: [localhost -> 35.236.109.234] => (item={'name': 'log_directory', 'value': '/var/log/edb'})

TASK [setup_replication : Remove the default directory based on PG_LOG] ********
skipping: [localhost]

TASK [setup_replication : Find the HBA File location on standby] ***************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on standby] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on standby] ***
ok: [localhost -> 35.236.109.234] => (item=10.0.0.2)
changed: [localhost -> 35.236.109.234] => (item=10.0.0.5)
ok: [localhost -> 35.236.109.234] => (item=10.0.0.4)
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_replication : Reload the Primary PG Service] ***********************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Set query if snchronous_standby_names is not empty] ***
ok: [localhost -> 35.236.109.234]

TASK [setup_replication : Check if we have synchronous_standby_names set] ******
changed: [localhost -> 35.236.92.243]

TASK [setup_replication : Standby Quorum string] *******************************
skipping: [localhost]

TASK [setup_replication : Build synchronous_standby_names] *********************
skipping: [localhost]

TASK [setup_replication : Build synchronous_standby_names on primary] **********
skipping: [localhost]

TASK [setup_replication : Set synchronous_standby_names] ***********************
skipping: [localhost]

TASK [setup_replication : Set synchronous parameters as per setting on primary] ***
skipping: [localhost] => (item={'name': 'synchronous_commit', 'value': 'remote_apply'}) 
skipping: [localhost] => (item={'name': 'synchronous_standby_names', 'value': 'ANY 1 (standby2)'}) 

TASK [setup_replication : Reload the Primary PG Service] ***********************
skipping: [localhost]

TASK [setup_replication : Check user defined parameters and update] ************
skipping: [localhost] => (item=) 

TASK [setup_replication : Find the HBA File location on primary] ***************
changed: [localhost -> 35.236.109.234]

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [setup_replication : Adding standby IP address entries into pg_hba file on primary] ***
skipping: [localhost] => (item=) 

TASK [setup_replication : Reload the PG Service] *******************************
skipping: [localhost]

TASK [setup_replication : Restart the PG Service] ******************************
skipping: [localhost]

TASK [setup_replication : Reset FORCE_REPLICATION based on the user input] *****
ok: [localhost]

TASK [Iterate through efm install role with items from hosts file] *************

TASK [setup_efm : Reference EPAS Variables] ************************************
ok: [localhost]

TASK [setup_efm : Reference PG Variables] **************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : Set Node Type] ***********************************************
ok: [localhost]

TASK [setup_efm : Set EFM nodes and witness Type] ******************************
ok: [localhost]

TASK [setup_efm : Prepare EFM node list] ***************************************
ok: [localhost] => (item=10.0.0.5)
ok: [localhost] => (item=10.0.0.4)
ok: [localhost] => (item=10.0.0.3)

TASK [setup_efm : Set USE_HOSTNAME based on variable condition and users input] ***
ok: [localhost]

TASK [setup_efm : debug] *******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = pemserver, PG_DATA = /data/pgdata, EFM_SERVICE = edb-efm-4.0, EFM_NODES_LIST = 10.0.0.5:7800 10.0.0.4:7800 10.0.0.3:7800 , USE_HOSTNAME = False, EFM_WITNESS =  False, PG_EFM_USER = efm, Public IP = 34.94.117.77"
}

TASK [setup_efm : Set FORCE_EFM_INSTALL based on the user input] ***************
skipping: [localhost]

TASK [setup_efm : Prepare EFM node list based on hostname] *********************
skipping: [localhost] => (item=) 

TASK [setup_efm : include_tasks] ***********************************************
skipping: [localhost]

TASK [setup_efm : include_tasks] ***********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_efm/tasks/C07-RH07-EFM-user.yml for localhost

TASK [setup_efm : Set PG_REPLICATION_USER_PASSWORD if not provided] ************
ok: [localhost -> localhost]

TASK [setup_efm : Create EDB efm role if not exists] ***************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : GRANT execute privilege on system functions to EFM user] *****
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Find the HBA File location on the node] **********************
skipping: [localhost]

TASK [setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ***
skipping: [localhost]

TASK [setup_efm : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ***
skipping: [localhost]

TASK [setup_efm : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_efm : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_efm : Install Software for EFM] ************************************
skipping: [localhost]

TASK [setup_efm : Install EFM dependencies] ************************************
skipping: [localhost]

TASK [setup_efm : Check if we have efm.properties file or not] *****************
skipping: [localhost]

TASK [setup_efm : Check if we have efm.nodes file or not] **********************
skipping: [localhost]

TASK [setup_efm : Create EFM properties File] **********************************
skipping: [localhost]

TASK [setup_efm : Create EFM nodes File] ***************************************
skipping: [localhost]

TASK [setup_efm : Update private IPs in efm.nodes file] ************************
skipping: [localhost]

TASK [setup_efm : Update private IPs in efm.nodes file] ************************
skipping: [localhost]

TASK [setup_efm : Generate EFM encrypted Password] *****************************
skipping: [localhost]

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item={'name': 'db.user', 'value': 'efm'}) 
skipping: [localhost] => (item={'name': 'db.port', 'value': 5444}) 
skipping: [localhost] => (item={'name': 'db.database', 'value': 'edb'}) 
skipping: [localhost] => (item={'name': 'db.service.owner', 'value': 'enterprisedb'}) 
skipping: [localhost] => (item={'name': 'db.service.name', 'value': 'edb-as-12'}) 
skipping: [localhost] => (item={'name': 'db.bin', 'value': '/usr/edb/as12/bin'}) 
skipping: [localhost] => (item={'name': 'db.recovery.dir', 'value': '/data/pgdata'}) 
skipping: [localhost] => (item={'name': 'db.data.dir', 'value': '/data/pgdata'}) 
skipping: [localhost] => (item={'name': 'user.email', 'value': 'unknown@gmail.com'}) 
skipping: [localhost] => (item={'name': 'auto.allow.hosts', 'value': True}) 
skipping: [localhost] => (item={'name': 'stable.nodes.file', 'value': True}) 
skipping: [localhost] => (item={'name': 'update.physical.slots.period', 'value': '5'}) 
skipping: [localhost] => (item={'name': 'local.period', 'value': '3'}) 
skipping: [localhost] => (item={'name': 'local.timeout', 'value': '5'}) 
skipping: [localhost] => (item={'name': 'local.timeout.final', 'value': '5'}) 
skipping: [localhost] => (item={'name': 'remote.timeout', 'value': '5'}) 
skipping: [localhost] => (item={'name': 'node.timeout', 'value': '5'}) 

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item=None) 

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item=None) 

TASK [setup_efm : Stop the EFM service on all the nodes if change in nodes file or properties] ***
skipping: [localhost] => (item=35.236.92.243) 
skipping: [localhost] => (item=34.94.18.198) 
skipping: [localhost] => (item=35.236.109.234) 

TASK [setup_efm : Start EFM service] *******************************************
skipping: [localhost]

TASK [setup_efm : Restart the EFM service] *************************************
skipping: [localhost]

TASK [setup_efm : Allow efm node on all the host] ******************************
skipping: [localhost]

TASK [setup_efm : Allow efm node on all the host] ******************************
skipping: [localhost]

TASK [setup_efm : Copying the scripts] *****************************************
skipping: [localhost] => (item=) 

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item=) 

TASK [setup_efm : Restart the EFM service] *************************************
skipping: [localhost]

TASK [setup_efm : Reset FORCE/SKIPP_EFM_INSTALL based on the user input] *******
ok: [localhost]

TASK [setup_efm : Reference EPAS Variables] ************************************
ok: [localhost]

TASK [setup_efm : Reference PG Variables] **************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : Set Node Type] ***********************************************
ok: [localhost]

TASK [setup_efm : Set EFM nodes and witness Type] ******************************
ok: [localhost]

TASK [setup_efm : Prepare EFM node list] ***************************************
ok: [localhost] => (item=10.0.0.5)
ok: [localhost] => (item=10.0.0.4)
ok: [localhost] => (item=10.0.0.3)

TASK [setup_efm : Set USE_HOSTNAME based on variable condition and users input] ***
ok: [localhost]

TASK [setup_efm : debug] *******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = primary, PG_DATA = /data/pgdata, EFM_SERVICE = edb-efm-4.0, EFM_NODES_LIST = 10.0.0.5:7800 10.0.0.4:7800 10.0.0.3:7800 , USE_HOSTNAME = False, EFM_WITNESS =  False, PG_EFM_USER = efm, Public IP = 35.236.92.243"
}

TASK [setup_efm : Set FORCE_EFM_INSTALL based on the user input] ***************
skipping: [localhost]

TASK [setup_efm : Prepare EFM node list based on hostname] *********************
skipping: [localhost] => (item=) 

TASK [setup_efm : include_tasks] ***********************************************
skipping: [localhost]

TASK [setup_efm : include_tasks] ***********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_efm/tasks/C07-RH07-EFM-user.yml for localhost

TASK [setup_efm : Set PG_REPLICATION_USER_PASSWORD if not provided] ************
skipping: [localhost]

TASK [setup_efm : Create EDB efm role if not exists] ***************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : GRANT execute privilege on system functions to EFM user] *****
ok: [localhost -> 35.236.92.243]

TASK [setup_efm : Find the HBA File location on the node] **********************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ***
skipping: [localhost]

TASK [setup_efm : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ***
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Add all node IP address entries into pg_hba file for efm user] ***
changed: [localhost -> 35.236.92.243] => (item=10.0.0.2)
changed: [localhost -> 35.236.92.243] => (item=10.0.0.5)
changed: [localhost -> 35.236.92.243] => (item=10.0.0.4)
changed: [localhost -> 35.236.92.243] => (item=10.0.0.3)

TASK [setup_efm : Reload the PG Service] ***************************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Install Software for EFM] ************************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Install EFM dependencies] ************************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Check if we have efm.properties file or not] *****************
ok: [localhost -> 35.236.92.243]

TASK [setup_efm : Check if we have efm.nodes file or not] **********************
ok: [localhost -> 35.236.92.243]

TASK [setup_efm : Create EFM properties File] **********************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Create EFM nodes File] ***************************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Update private IPs in efm.nodes file] ************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Update private IPs in efm.nodes file] ************************
skipping: [localhost]

TASK [setup_efm : Generate EFM encrypted Password] *****************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Update EFM efm.properties File] ******************************
changed: [localhost -> 35.236.92.243] => (item={'name': 'db.user', 'value': 'efm'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'db.port', 'value': 5444})
changed: [localhost -> 35.236.92.243] => (item={'name': 'db.database', 'value': 'edb'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'db.service.owner', 'value': 'enterprisedb'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'db.service.name', 'value': 'edb-as-12'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'db.bin', 'value': '/usr/edb/as12/bin'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'db.recovery.dir', 'value': '/data/pgdata'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'db.data.dir', 'value': '/data/pgdata'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'user.email', 'value': 'unknown@gmail.com'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'auto.allow.hosts', 'value': True})
changed: [localhost -> 35.236.92.243] => (item={'name': 'stable.nodes.file', 'value': True})
changed: [localhost -> 35.236.92.243] => (item={'name': 'update.physical.slots.period', 'value': '5'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'local.period', 'value': '3'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'local.timeout', 'value': '5'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'local.timeout.final', 'value': '5'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'remote.timeout', 'value': '5'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'node.timeout', 'value': '5'})

TASK [setup_efm : Update EFM efm.properties File] ******************************
changed: [localhost -> 35.236.92.243] => (item={'name': 'db.password.encrypted', 'value': '2ec5710ed29266f783e6a9c5e4c1ccd3e8a386b6cc4abbb7a0af2396e0e457d8'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'bind.address', 'value': '10.0.0.5:7800'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'application.name', 'value': 'primary1'})
changed: [localhost -> 35.236.92.243] => (item={'name': 'is.witness', 'value': False})

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item=None) 

TASK [setup_efm : Stop the EFM service on all the nodes if change in nodes file or properties] ***
skipping: [localhost] => (item=35.236.92.243) 
skipping: [localhost] => (item=34.94.18.198) 
skipping: [localhost] => (item=35.236.109.234) 

TASK [setup_efm : Start EFM service] *******************************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : Restart the EFM service] *************************************
skipping: [localhost]

TASK [setup_efm : Allow efm node on all the host] ******************************
ok: [localhost -> 35.236.92.243]

TASK [setup_efm : Allow efm node on all the host] ******************************
skipping: [localhost]

TASK [setup_efm : Copying the scripts] *****************************************
skipping: [localhost] => (item=) 

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item=) 

TASK [setup_efm : Restart the EFM service] *************************************
skipping: [localhost]

TASK [setup_efm : Reset FORCE/SKIPP_EFM_INSTALL based on the user input] *******
ok: [localhost]

TASK [setup_efm : Reference EPAS Variables] ************************************
ok: [localhost]

TASK [setup_efm : Reference PG Variables] **************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : Set Node Type] ***********************************************
ok: [localhost]

TASK [setup_efm : Set EFM nodes and witness Type] ******************************
ok: [localhost]

TASK [setup_efm : Prepare EFM node list] ***************************************
ok: [localhost] => (item=10.0.0.5)
ok: [localhost] => (item=10.0.0.4)
ok: [localhost] => (item=10.0.0.3)

TASK [setup_efm : Set USE_HOSTNAME based on variable condition and users input] ***
ok: [localhost]

TASK [setup_efm : debug] *******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = standby, PG_DATA = /data/pgdata, EFM_SERVICE = edb-efm-4.0, EFM_NODES_LIST = 10.0.0.5:7800 10.0.0.4:7800 10.0.0.3:7800 , USE_HOSTNAME = False, EFM_WITNESS =  False, PG_EFM_USER = efm, Public IP = 34.94.18.198"
}

TASK [setup_efm : Set FORCE_EFM_INSTALL based on the user input] ***************
skipping: [localhost]

TASK [setup_efm : Prepare EFM node list based on hostname] *********************
skipping: [localhost] => (item=) 

TASK [setup_efm : include_tasks] ***********************************************
skipping: [localhost]

TASK [setup_efm : include_tasks] ***********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_efm/tasks/C07-RH07-EFM-user.yml for localhost

TASK [setup_efm : Set PG_REPLICATION_USER_PASSWORD if not provided] ************
skipping: [localhost]

TASK [setup_efm : Create EDB efm role if not exists] ***************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : GRANT execute privilege on system functions to EFM user] *****
ok: [localhost -> 35.236.92.243]

TASK [setup_efm : Find the HBA File location on the node] **********************
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ***
skipping: [localhost]

TASK [setup_efm : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ***
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Add all node IP address entries into pg_hba file for efm user] ***
changed: [localhost -> 34.94.18.198] => (item=10.0.0.2)
changed: [localhost -> 34.94.18.198] => (item=10.0.0.5)
changed: [localhost -> 34.94.18.198] => (item=10.0.0.4)
changed: [localhost -> 34.94.18.198] => (item=10.0.0.3)

TASK [setup_efm : Reload the PG Service] ***************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Install Software for EFM] ************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Install EFM dependencies] ************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Check if we have efm.properties file or not] *****************
ok: [localhost -> 34.94.18.198]

TASK [setup_efm : Check if we have efm.nodes file or not] **********************
ok: [localhost -> 34.94.18.198]

TASK [setup_efm : Create EFM properties File] **********************************
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Create EFM nodes File] ***************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Update private IPs in efm.nodes file] ************************
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Update private IPs in efm.nodes file] ************************
skipping: [localhost]

TASK [setup_efm : Generate EFM encrypted Password] *****************************
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Update EFM efm.properties File] ******************************
changed: [localhost -> 34.94.18.198] => (item={'name': 'db.user', 'value': 'efm'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'db.port', 'value': 5444})
changed: [localhost -> 34.94.18.198] => (item={'name': 'db.database', 'value': 'edb'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'db.service.owner', 'value': 'enterprisedb'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'db.service.name', 'value': 'edb-as-12'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'db.bin', 'value': '/usr/edb/as12/bin'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'db.recovery.dir', 'value': '/data/pgdata'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'db.data.dir', 'value': '/data/pgdata'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'user.email', 'value': 'unknown@gmail.com'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'auto.allow.hosts', 'value': True})
changed: [localhost -> 34.94.18.198] => (item={'name': 'stable.nodes.file', 'value': True})
changed: [localhost -> 34.94.18.198] => (item={'name': 'update.physical.slots.period', 'value': '5'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'local.period', 'value': '3'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'local.timeout', 'value': '5'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'local.timeout.final', 'value': '5'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'remote.timeout', 'value': '5'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'node.timeout', 'value': '5'})

TASK [setup_efm : Update EFM efm.properties File] ******************************
changed: [localhost -> 34.94.18.198] => (item={'name': 'db.password.encrypted', 'value': '2ec5710ed29266f783e6a9c5e4c1ccd3e8a386b6cc4abbb7a0af2396e0e457d8'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'bind.address', 'value': '10.0.0.4:7800'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'application.name', 'value': 'standby2'})
changed: [localhost -> 34.94.18.198] => (item={'name': 'is.witness', 'value': False})

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item=None) 

TASK [setup_efm : Stop the EFM service on all the nodes if change in nodes file or properties] ***
skipping: [localhost] => (item=35.236.92.243) 
skipping: [localhost] => (item=34.94.18.198) 
skipping: [localhost] => (item=35.236.109.234) 

TASK [setup_efm : Start EFM service] *******************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_efm : Restart the EFM service] *************************************
skipping: [localhost]

TASK [setup_efm : Allow efm node on all the host] ******************************
ok: [localhost -> 34.94.18.198]

TASK [setup_efm : Allow efm node on all the host] ******************************
skipping: [localhost]

TASK [setup_efm : Copying the scripts] *****************************************
skipping: [localhost] => (item=) 

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item=) 

TASK [setup_efm : Restart the EFM service] *************************************
skipping: [localhost]

TASK [setup_efm : Reset FORCE/SKIPP_EFM_INSTALL based on the user input] *******
ok: [localhost]

TASK [setup_efm : Reference EPAS Variables] ************************************
ok: [localhost]

TASK [setup_efm : Reference PG Variables] **************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : debug] *******************************************************
skipping: [localhost]

TASK [setup_efm : Set Node Type] ***********************************************
ok: [localhost]

TASK [setup_efm : Set EFM nodes and witness Type] ******************************
ok: [localhost]

TASK [setup_efm : Prepare EFM node list] ***************************************
ok: [localhost] => (item=10.0.0.5)
ok: [localhost] => (item=10.0.0.4)
ok: [localhost] => (item=10.0.0.3)

TASK [setup_efm : Set USE_HOSTNAME based on variable condition and users input] ***
ok: [localhost]

TASK [setup_efm : debug] *******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = standby, PG_DATA = /data/pgdata, EFM_SERVICE = edb-efm-4.0, EFM_NODES_LIST = 10.0.0.5:7800 10.0.0.4:7800 10.0.0.3:7800 , USE_HOSTNAME = False, EFM_WITNESS =  False, PG_EFM_USER = efm, Public IP = 35.236.109.234"
}

TASK [setup_efm : Set FORCE_EFM_INSTALL based on the user input] ***************
skipping: [localhost]

TASK [setup_efm : Prepare EFM node list based on hostname] *********************
skipping: [localhost] => (item=) 

TASK [setup_efm : include_tasks] ***********************************************
skipping: [localhost]

TASK [setup_efm : include_tasks] ***********************************************
included: /home/doug/.ansible/collections/ansible_collections/edb_devops/edb_postgres/roles/setup_efm/tasks/C07-RH07-EFM-user.yml for localhost

TASK [setup_efm : Set PG_REPLICATION_USER_PASSWORD if not provided] ************
skipping: [localhost]

TASK [setup_efm : Create EDB efm role if not exists] ***************************
changed: [localhost -> 35.236.92.243]

TASK [setup_efm : GRANT execute privilege on system functions to EFM user] *****
ok: [localhost -> 35.236.92.243]

TASK [setup_efm : Find the HBA File location on the node] **********************
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ***
skipping: [localhost]

TASK [setup_efm : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item=10.0.0.2) 
skipping: [localhost] => (item=10.0.0.5) 
skipping: [localhost] => (item=10.0.0.4) 
skipping: [localhost] => (item=10.0.0.3) 

TASK [setup_efm : Add localhost IP address entries into pg_hba file for EFM user] ***
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Add all node IP address entries into pg_hba file for efm user] ***
changed: [localhost -> 35.236.109.234] => (item=10.0.0.2)
changed: [localhost -> 35.236.109.234] => (item=10.0.0.5)
changed: [localhost -> 35.236.109.234] => (item=10.0.0.4)
changed: [localhost -> 35.236.109.234] => (item=10.0.0.3)

TASK [setup_efm : Reload the PG Service] ***************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Install Software for EFM] ************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Install EFM dependencies] ************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Check if we have efm.properties file or not] *****************
ok: [localhost -> 35.236.109.234]

TASK [setup_efm : Check if we have efm.nodes file or not] **********************
ok: [localhost -> 35.236.109.234]

TASK [setup_efm : Create EFM properties File] **********************************
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Create EFM nodes File] ***************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Update private IPs in efm.nodes file] ************************
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Update private IPs in efm.nodes file] ************************
skipping: [localhost]

TASK [setup_efm : Generate EFM encrypted Password] *****************************
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Update EFM efm.properties File] ******************************
changed: [localhost -> 35.236.109.234] => (item={'name': 'db.user', 'value': 'efm'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'db.port', 'value': 5444})
changed: [localhost -> 35.236.109.234] => (item={'name': 'db.database', 'value': 'edb'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'db.service.owner', 'value': 'enterprisedb'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'db.service.name', 'value': 'edb-as-12'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'db.bin', 'value': '/usr/edb/as12/bin'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'db.recovery.dir', 'value': '/data/pgdata'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'db.data.dir', 'value': '/data/pgdata'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'user.email', 'value': 'unknown@gmail.com'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'auto.allow.hosts', 'value': True})
changed: [localhost -> 35.236.109.234] => (item={'name': 'stable.nodes.file', 'value': True})
changed: [localhost -> 35.236.109.234] => (item={'name': 'update.physical.slots.period', 'value': '5'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'local.period', 'value': '3'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'local.timeout', 'value': '5'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'local.timeout.final', 'value': '5'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'remote.timeout', 'value': '5'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'node.timeout', 'value': '5'})

TASK [setup_efm : Update EFM efm.properties File] ******************************
changed: [localhost -> 35.236.109.234] => (item={'name': 'db.password.encrypted', 'value': '2ec5710ed29266f783e6a9c5e4c1ccd3e8a386b6cc4abbb7a0af2396e0e457d8'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'bind.address', 'value': '10.0.0.3:7800'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'application.name', 'value': 'standby3'})
changed: [localhost -> 35.236.109.234] => (item={'name': 'is.witness', 'value': False})

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item=None) 

TASK [setup_efm : Stop the EFM service on all the nodes if change in nodes file or properties] ***
skipping: [localhost] => (item=35.236.92.243) 
skipping: [localhost] => (item=34.94.18.198) 
skipping: [localhost] => (item=35.236.109.234) 

TASK [setup_efm : Start EFM service] *******************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_efm : Restart the EFM service] *************************************
skipping: [localhost]

TASK [setup_efm : Allow efm node on all the host] ******************************
ok: [localhost -> 35.236.109.234]

TASK [setup_efm : Allow efm node on all the host] ******************************
skipping: [localhost]

TASK [setup_efm : Copying the scripts] *****************************************
skipping: [localhost] => (item=) 

TASK [setup_efm : Update EFM efm.properties File] ******************************
skipping: [localhost] => (item=) 

TASK [setup_efm : Restart the EFM service] *************************************
skipping: [localhost]

TASK [setup_efm : Reset FORCE/SKIPP_EFM_INSTALL based on the user input] *******
ok: [localhost]

TASK [Iterate through pem install role with items from hosts file] *************

TASK [setup_pem : Reference EPAS Variables] ************************************
ok: [localhost]

TASK [setup_pem : Reference PG Variables] **************************************
skipping: [localhost]

TASK [setup_pem : debug] *******************************************************
skipping: [localhost]

TASK [setup_pem : debug] *******************************************************
skipping: [localhost]

TASK [setup_pem : Set Node Type] ***********************************************
ok: [localhost]

TASK [setup_pem : debug] *******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = pemserver, PG_DATA = /data/pgdata, Public IP = 34.94.117.77"
}

TASK [setup_pem : Set FORCE_INSTALL based on the user input] *******************
skipping: [localhost]

TASK [setup_pem : Set PEM_AGENT based on the user input] ***********************
skipping: [localhost]

TASK [setup_pem : Stopped pemagent] ********************************************
skipping: [localhost]

TASK [setup_pem : Install require packages for PEM] ****************************
skipping: [localhost]

TASK [setup_pem : Remove pem ceritficate directory] ****************************
skipping: [localhost]

TASK [setup_pem : Remove agent.cfg] ********************************************
skipping: [localhost]

TASK [setup_pem : Remove worker.log] *******************************************
skipping: [localhost]

TASK [setup_pem : Set PG_PEM_ADMIN_PASSWORD if not provided] *******************
ok: [localhost -> localhost]

TASK [setup_pem : Create EDB pem superuser role if not exists] *****************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Install require packages for PEM] ****************************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Check if we PEM server is already configured] ****************
ok: [localhost -> 34.94.117.77]

TASK [setup_pem : Find the HBA File location] **********************************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})

TASK [setup_pem : Reload the PG Service] ***************************************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Install pem server] ******************************************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Update agent to use hostssl] *********************************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})

TASK [setup_pem : Update localhost addresses entries for hostssl into pg_hba file] ***
changed: [localhost -> 34.94.117.77] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})

TASK [setup_pem : Add all node IP address entries into pg_hba file for efm user] ***
ok: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '10.0.0.2/32', 'method': 'scram-sha-256'})
changed: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '10.0.0.2/32', 'method': 'cert'})
ok: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '127.0.0.1/32', 'method': 'cert'})
ok: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '0.0.0.0/0', 'method': 'scram-sha-256'})
ok: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '0.0.0.0/0', 'method': 'cert'})

TASK [setup_pem : Reload the PG Service] ***************************************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Start the PEM agent Service] *********************************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Assign pg_monitor to PG_PEM_ADMIN_USER] **********************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Reduce the privileges of PEM user] ***************************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Find the HBA File location on the node] **********************
changed: [localhost -> 34.94.117.77]

TASK [setup_pem : Add all node IP address entries into pg_hba file for efm user] ***
ok: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '10.0.0.2/32', 'method': 'scram-sha-256'})
ok: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '10.0.0.2/32', 'method': 'cert'})
ok: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '127.0.0.1/32', 'method': 'cert'})
ok: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '0.0.0.0/0', 'method': 'scram-sha-256'})
ok: [localhost -> 34.94.117.77] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '0.0.0.0/0', 'method': 'cert'})

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Set query variables for PEM probe] ***************************
ok: [localhost -> 34.94.117.77]

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
changed: [localhost -> 34.94.117.77] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"})
changed: [localhost -> 34.94.117.77] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"})

TASK [setup_pem : Set PG_PEM_AGENT_PASSWORD if not provided] *******************
skipping: [localhost]

TASK [setup_pem : Create EDB pem agent role if not exists] *********************
skipping: [localhost]

TASK [setup_pem : Assign pg_monitor to PG_PEM_AGENT_USER] **********************
skipping: [localhost]

TASK [setup_pem : Find the HBA File location] **********************************
skipping: [localhost]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '10.0.0.2', 'database': 'all'}) 

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '::1/128', 'database': 'all'}) 
skipping: [localhost] => (item={'ip_addr': '10.0.0.2', 'database': 'all'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Install require packages for PEM] ****************************
skipping: [localhost]

TASK [setup_pem : Check if agent was registered] *******************************
skipping: [localhost]

TASK [setup_pem : Check if agent key was registered] ***************************
skipping: [localhost]

TASK [setup_pem : Install pem agent] *******************************************
skipping: [localhost]

TASK [setup_pem : Create lock file for avoiding duplication] *******************
skipping: [localhost]

TASK [setup_pem : Register server with agent] **********************************
skipping: [localhost]

TASK [setup_pem : Create lock file for avoiding duplication] *******************
skipping: [localhost]

TASK [setup_pem : Start the PEM Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Set query variables for PEM probe] ***************************
skipping: [localhost]

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Reset FORCE/SKIP_PEM_INSTALL based on the user input] ********
ok: [localhost]

TASK [setup_pem : Reference EPAS Variables] ************************************
ok: [localhost]

TASK [setup_pem : Reference PG Variables] **************************************
skipping: [localhost]

TASK [setup_pem : debug] *******************************************************
skipping: [localhost]

TASK [setup_pem : debug] *******************************************************
skipping: [localhost]

TASK [setup_pem : Set Node Type] ***********************************************
ok: [localhost]

TASK [setup_pem : debug] *******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = primary, PG_DATA = /data/pgdata, Public IP = 35.236.92.243"
}

TASK [setup_pem : Set FORCE_INSTALL based on the user input] *******************
skipping: [localhost]

TASK [setup_pem : Set PEM_AGENT based on the user input] ***********************
ok: [localhost]

TASK [setup_pem : Stopped pemagent] ********************************************
skipping: [localhost]

TASK [setup_pem : Install require packages for PEM] ****************************
skipping: [localhost]

TASK [setup_pem : Remove pem ceritficate directory] ****************************
skipping: [localhost]

TASK [setup_pem : Remove agent.cfg] ********************************************
skipping: [localhost]

TASK [setup_pem : Remove worker.log] *******************************************
skipping: [localhost]

TASK [setup_pem : Set PG_PEM_ADMIN_PASSWORD if not provided] *******************
skipping: [localhost]

TASK [setup_pem : Create EDB pem superuser role if not exists] *****************
skipping: [localhost]

TASK [setup_pem : Install require packages for PEM] ****************************
skipping: [localhost]

TASK [setup_pem : Check if we PEM server is already configured] ****************
skipping: [localhost]

TASK [setup_pem : Find the HBA File location] **********************************
skipping: [localhost]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Install pem server] ******************************************
skipping: [localhost]

TASK [setup_pem : Update agent to use hostssl] *********************************
skipping: [localhost]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 

TASK [setup_pem : Update localhost addresses entries for hostssl into pg_hba file] ***
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 

TASK [setup_pem : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '10.0.0.5/32', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '10.0.0.5/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '127.0.0.1/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '0.0.0.0/0', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '0.0.0.0/0', 'method': 'cert'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Start the PEM agent Service] *********************************
skipping: [localhost]

TASK [setup_pem : Assign pg_monitor to PG_PEM_ADMIN_USER] **********************
skipping: [localhost]

TASK [setup_pem : Reduce the privileges of PEM user] ***************************
skipping: [localhost]

TASK [setup_pem : Find the HBA File location on the node] **********************
skipping: [localhost]

TASK [setup_pem : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '10.0.0.5/32', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '10.0.0.5/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '127.0.0.1/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '0.0.0.0/0', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '0.0.0.0/0', 'method': 'cert'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Set query variables for PEM probe] ***************************
skipping: [localhost]

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Set PG_PEM_AGENT_PASSWORD if not provided] *******************
ok: [localhost -> localhost]

TASK [setup_pem : Create EDB pem agent role if not exists] *********************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Assign pg_monitor to PG_PEM_AGENT_USER] **********************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Find the HBA File location] **********************************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '10.0.0.2', 'database': 'all'})

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 35.236.92.243] => (item={'ip_addr': '10.0.0.2', 'database': 'all'})

TASK [setup_pem : Reload the PG Service] ***************************************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Install require packages for PEM] ****************************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Check if agent was registered] *******************************
ok: [localhost -> 35.236.92.243]

TASK [setup_pem : Check if agent key was registered] ***************************
ok: [localhost -> 35.236.92.243]

TASK [setup_pem : Install pem agent] *******************************************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Create lock file for avoiding duplication] *******************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Register server with agent] **********************************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Create lock file for avoiding duplication] *******************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Start the PEM Service] ***************************************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Set query variables for PEM probe] ***************************
ok: [localhost -> 35.236.92.243]

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
ok: [localhost -> 35.236.92.243] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"})
changed: [localhost -> 35.236.92.243] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"})

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Reset FORCE/SKIP_PEM_INSTALL based on the user input] ********
ok: [localhost]

TASK [setup_pem : Reference EPAS Variables] ************************************
ok: [localhost]

TASK [setup_pem : Reference PG Variables] **************************************
skipping: [localhost]

TASK [setup_pem : debug] *******************************************************
skipping: [localhost]

TASK [setup_pem : debug] *******************************************************
skipping: [localhost]

TASK [setup_pem : Set Node Type] ***********************************************
ok: [localhost]

TASK [setup_pem : debug] *******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = standby, PG_DATA = /data/pgdata, Public IP = 34.94.18.198"
}

TASK [setup_pem : Set FORCE_INSTALL based on the user input] *******************
skipping: [localhost]

TASK [setup_pem : Set PEM_AGENT based on the user input] ***********************
ok: [localhost]

TASK [setup_pem : Stopped pemagent] ********************************************
skipping: [localhost]

TASK [setup_pem : Install require packages for PEM] ****************************
skipping: [localhost]

TASK [setup_pem : Remove pem ceritficate directory] ****************************
skipping: [localhost]

TASK [setup_pem : Remove agent.cfg] ********************************************
skipping: [localhost]

TASK [setup_pem : Remove worker.log] *******************************************
skipping: [localhost]

TASK [setup_pem : Set PG_PEM_ADMIN_PASSWORD if not provided] *******************
skipping: [localhost]

TASK [setup_pem : Create EDB pem superuser role if not exists] *****************
skipping: [localhost]

TASK [setup_pem : Install require packages for PEM] ****************************
skipping: [localhost]

TASK [setup_pem : Check if we PEM server is already configured] ****************
skipping: [localhost]

TASK [setup_pem : Find the HBA File location] **********************************
skipping: [localhost]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Install pem server] ******************************************
skipping: [localhost]

TASK [setup_pem : Update agent to use hostssl] *********************************
skipping: [localhost]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 

TASK [setup_pem : Update localhost addresses entries for hostssl into pg_hba file] ***
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 

TASK [setup_pem : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '10.0.0.4/32', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '10.0.0.4/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '127.0.0.1/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '0.0.0.0/0', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '0.0.0.0/0', 'method': 'cert'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Start the PEM agent Service] *********************************
skipping: [localhost]

TASK [setup_pem : Assign pg_monitor to PG_PEM_ADMIN_USER] **********************
skipping: [localhost]

TASK [setup_pem : Reduce the privileges of PEM user] ***************************
skipping: [localhost]

TASK [setup_pem : Find the HBA File location on the node] **********************
skipping: [localhost]

TASK [setup_pem : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '10.0.0.4/32', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '10.0.0.4/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '127.0.0.1/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '0.0.0.0/0', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '0.0.0.0/0', 'method': 'cert'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Set query variables for PEM probe] ***************************
skipping: [localhost]

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Set PG_PEM_AGENT_PASSWORD if not provided] *******************
skipping: [localhost]

TASK [setup_pem : Create EDB pem agent role if not exists] *********************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Assign pg_monitor to PG_PEM_AGENT_USER] **********************
ok: [localhost -> 35.236.92.243]

TASK [setup_pem : Find the HBA File location] **********************************
changed: [localhost -> 34.94.18.198]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
changed: [localhost -> 34.94.18.198] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 34.94.18.198] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 34.94.18.198] => (item={'ip_addr': '10.0.0.2', 'database': 'all'})

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
changed: [localhost -> 34.94.18.198] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 34.94.18.198] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 34.94.18.198] => (item={'ip_addr': '10.0.0.2', 'database': 'all'})

TASK [setup_pem : Reload the PG Service] ***************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_pem : Install require packages for PEM] ****************************
changed: [localhost -> 34.94.18.198]

TASK [setup_pem : Check if agent was registered] *******************************
ok: [localhost -> 34.94.18.198]

TASK [setup_pem : Check if agent key was registered] ***************************
ok: [localhost -> 34.94.18.198]

TASK [setup_pem : Install pem agent] *******************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_pem : Create lock file for avoiding duplication] *******************
changed: [localhost -> 34.94.18.198]

TASK [setup_pem : Register server with agent] **********************************
changed: [localhost -> 34.94.18.198]

TASK [setup_pem : Create lock file for avoiding duplication] *******************
changed: [localhost -> 34.94.18.198]

TASK [setup_pem : Start the PEM Service] ***************************************
changed: [localhost -> 34.94.18.198]

TASK [setup_pem : Set query variables for PEM probe] ***************************
ok: [localhost -> 34.94.18.198]

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
ok: [localhost -> 34.94.18.198] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"})
changed: [localhost -> 34.94.18.198] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"})

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Reset FORCE/SKIP_PEM_INSTALL based on the user input] ********
ok: [localhost]

TASK [setup_pem : Reference EPAS Variables] ************************************
ok: [localhost]

TASK [setup_pem : Reference PG Variables] **************************************
skipping: [localhost]

TASK [setup_pem : debug] *******************************************************
skipping: [localhost]

TASK [setup_pem : debug] *******************************************************
skipping: [localhost]

TASK [setup_pem : Set Node Type] ***********************************************
ok: [localhost]

TASK [setup_pem : debug] *******************************************************
ok: [localhost] => {
    "msg": "Operating System = CentOS7: PG_TYPE = EPAS, Node Type = standby, PG_DATA = /data/pgdata, Public IP = 35.236.109.234"
}

TASK [setup_pem : Set FORCE_INSTALL based on the user input] *******************
skipping: [localhost]

TASK [setup_pem : Set PEM_AGENT based on the user input] ***********************
ok: [localhost]

TASK [setup_pem : Stopped pemagent] ********************************************
skipping: [localhost]

TASK [setup_pem : Install require packages for PEM] ****************************
skipping: [localhost]

TASK [setup_pem : Remove pem ceritficate directory] ****************************
skipping: [localhost]

TASK [setup_pem : Remove agent.cfg] ********************************************
skipping: [localhost]

TASK [setup_pem : Remove worker.log] *******************************************
skipping: [localhost]

TASK [setup_pem : Set PG_PEM_ADMIN_PASSWORD if not provided] *******************
skipping: [localhost]

TASK [setup_pem : Create EDB pem superuser role if not exists] *****************
skipping: [localhost]

TASK [setup_pem : Install require packages for PEM] ****************************
skipping: [localhost]

TASK [setup_pem : Check if we PEM server is already configured] ****************
skipping: [localhost]

TASK [setup_pem : Find the HBA File location] **********************************
skipping: [localhost]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Install pem server] ******************************************
skipping: [localhost]

TASK [setup_pem : Update agent to use hostssl] *********************************
skipping: [localhost]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 

TASK [setup_pem : Update localhost addresses entries for hostssl into pg_hba file] ***
skipping: [localhost] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'}) 

TASK [setup_pem : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '10.0.0.3/32', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '10.0.0.3/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '127.0.0.1/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '0.0.0.0/0', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '0.0.0.0/0', 'method': 'cert'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Start the PEM agent Service] *********************************
skipping: [localhost]

TASK [setup_pem : Assign pg_monitor to PG_PEM_ADMIN_USER] **********************
skipping: [localhost]

TASK [setup_pem : Reduce the privileges of PEM user] ***************************
skipping: [localhost]

TASK [setup_pem : Find the HBA File location on the node] **********************
skipping: [localhost]

TASK [setup_pem : Add all node IP address entries into pg_hba file for efm user] ***
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '10.0.0.3/32', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '10.0.0.3/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '127.0.0.1/32', 'method': 'cert'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_user', 'ip_addr': '0.0.0.0/0', 'method': 'scram-sha-256'}) 
skipping: [localhost] => (item={'database': 'pem', 'group': 'pem_agent', 'ip_addr': '0.0.0.0/0', 'method': 'cert'}) 

TASK [setup_pem : Reload the PG Service] ***************************************
skipping: [localhost]

TASK [setup_pem : Set query variables for PEM probe] ***************************
skipping: [localhost]

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Set PG_PEM_AGENT_PASSWORD if not provided] *******************
skipping: [localhost]

TASK [setup_pem : Create EDB pem agent role if not exists] *********************
changed: [localhost -> 35.236.92.243]

TASK [setup_pem : Assign pg_monitor to PG_PEM_AGENT_USER] **********************
ok: [localhost -> 35.236.92.243]

TASK [setup_pem : Find the HBA File location] **********************************
changed: [localhost -> 35.236.109.234]

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
changed: [localhost -> 35.236.109.234] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 35.236.109.234] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 35.236.109.234] => (item={'ip_addr': '10.0.0.2', 'database': 'all'})

TASK [setup_pem : Update localhost addresses entries into pg_hba file] *********
changed: [localhost -> 35.236.109.234] => (item={'ip_addr': '127.0.0.1/32', 'database': 'all'})
changed: [localhost -> 35.236.109.234] => (item={'ip_addr': '::1/128', 'database': 'all'})
changed: [localhost -> 35.236.109.234] => (item={'ip_addr': '10.0.0.2', 'database': 'all'})

TASK [setup_pem : Reload the PG Service] ***************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_pem : Install require packages for PEM] ****************************
changed: [localhost -> 35.236.109.234]

TASK [setup_pem : Check if agent was registered] *******************************
ok: [localhost -> 35.236.109.234]

TASK [setup_pem : Check if agent key was registered] ***************************
ok: [localhost -> 35.236.109.234]

TASK [setup_pem : Install pem agent] *******************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_pem : Create lock file for avoiding duplication] *******************
changed: [localhost -> 35.236.109.234]

TASK [setup_pem : Register server with agent] **********************************
changed: [localhost -> 35.236.109.234]

TASK [setup_pem : Create lock file for avoiding duplication] *******************
changed: [localhost -> 35.236.109.234]

TASK [setup_pem : Start the PEM Service] ***************************************
changed: [localhost -> 35.236.109.234]

TASK [setup_pem : Set query variables for PEM probe] ***************************
ok: [localhost -> 35.236.109.234]

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
ok: [localhost -> 35.236.109.234] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"})
changed: [localhost -> 35.236.109.234] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"})

TASK [setup_pem : Update PEM Server for unnecessary alerts/probes] *************
skipping: [localhost] => (item={'query': "UPDATE pem.probe SET enabled_by_default = TRUE WHERE internal_name NOT IN ('slony_replication', 'xdb_smr_mmr_replication', 'sql_protect') AND target_type_id = 200 AND enabled_by_default = FALSE;"}) 
skipping: [localhost] => (item={'query': "UPDATE pem.alert a SET enabled = FALSE FROM pem.alert_template t WHERE a.template_id = t.id AND (t.display_name ~ '^Last' OR t.display_name ~ '^Largest index' OR t.display_name = 'Database size in server' OR t.display_name ~ 'Alert Errors') AND t.is_auto_create = TRUE AND a.enabled;"}) 

TASK [setup_pem : Reset FORCE/SKIP_PEM_INSTALL based on the user input] ********
ok: [localhost]

PLAY RECAP *********************************************************************
localhost                  : ok=489  changed=251  unreachable=0    failed=0    skipped=638  rescued=0    ignored=0   

PEM SERVER:
-----------
  PEM URL:	https://34.94.117.77:8443/pem
  Username:	enterprisedb
  Password:	lSfjTBiCxQIeIUCUNCzQ

PRIMARY SERVER
--------------
  Username:	centos
  Public Ip:	35.236.92.243

STANDBY SERVERS
--------------
  Username:	centos
  Public Ip:	34.94.18.198

  Username:	centos
  Public Ip:	35.236.109.234

