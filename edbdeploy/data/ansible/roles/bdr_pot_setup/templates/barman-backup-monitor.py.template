#!/usr/bin/python3

import sys
import json
import os
import subprocess
import argparse
from subprocess import CalledProcessError

def print_to_stdout(*a):
    """
    function to print string to stdout
    """

    print(*a, file = sys.stdout)


def print_to_stderr(*a):
    """
    function to print string to stderr
    """

    print(*a, file = sys.stderr)


def exec_shell(args, environ=os.environ, cwd=None):
    """
    function to execute shell command
    """
    return subprocess.check_output(
        ' '.join(args),
        stderr=subprocess.STDOUT,
        shell=True,
        cwd=cwd,
        env=environ
    )


def barman_backup_info():
    """
    Function to list the backups using barman
    """

    try:
        output = exec_shell(
                [
                "barman",
                "-f json",
                "list-backup all"
                ],
                cwd="/tmp"
            )  
        data = json.loads(output.decode("utf-8"))
    except CalledProcessError as e:
        print_to_stderr("Failed to execute the command: %s", e.cmd)
        print_to_stderr("Return code is %s", e.returncode)
        print_to_stderr("Output: %s", e.output)

    print_to_stdout("%s\t%s\t%s\t%s\t%s\t%s"
                    %
                    (
                        "server_name",
                        "backup_id",
                        "end_time",
                        "retention_status",
                        "size",
                        "status"
                    )
        )   

    for backup_server in data:
        for backup_server_info in data[backup_server]:
            print_to_stdout("%s\t%s\t%s\t%s\t%s\t%s"
                    %
                    ( backup_server,
                      backup_server_info['backup_id'],
                      backup_server_info['end_time'],
                      backup_server_info['retention_status'],
                      backup_server_info['size'],
                      backup_server_info['status'],
                    )
                )



def barman_status():
    """
    function to find the status of the backup
    """

    try:
        output = exec_shell(
                [
                "barman",
                "-f json",
                "check all"
                ],
                cwd="/tmp"
            )  
        data = json.loads(output.decode("utf-8"))
    except CalledProcessError as e:
        print_to_stderr("Failed to execute the command: %s", e.cmd)
        print_to_stderr("Return code is %s", e.returncode)
        print_to_stderr("Output: %s", e.output)

    print_to_stdout("%s\t%s\t%s"
        %
        ("server_name",
         "barman_component",
         "status"
        )
    )

    for backup_server in data:
        for backup_status_info in data[backup_server]:
            print_to_stdout("%s\t%s\t%s"
                    %
                    (
                        backup_server,
                        backup_status_info,
                        data[backup_server][backup_status_info]['status']
                    )
                )



monitor_parser = argparse.ArgumentParser(prog='PEM Agent barman-backup-monitor',
                                     description='PEM Agent backup monitoring script')

monitor_parser.add_argument('-s','--status',dest='status',
                        action='store_true',
                        help='Check the barman status. default: false'
                       )

monitor_parser.add_argument('-i','--backup-info',dest='backup_info',
                        action='store_true',
                        help='Check the barman backup_info. default: false'
                       )
monitor_barman_args = monitor_parser.parse_args()

if monitor_barman_args.status:
    barman_status()
elif monitor_barman_args.backup_info:
    barman_backup_info()
else:
    monitor_parser.print_help()
 
