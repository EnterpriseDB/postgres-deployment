--
-- HAProxy Availability Chart
--

INSERT INTO pem.chart(cid,
                      type,
                      level,
                      name,
                      descp,
                      owner,
                      shared,
                      ref_cnt,
                      reload)
VALUES(1,
       'TB',
       (ARRAY[100])::int4[],
       'HAProxy Availability',
       'Chart for HAProxy Availability',
       (SELECT oid
        FROM pg_roles
        WHERE rolname = current_user
       )::oid,
       ('{}')::oid[],
       1,
       120000
);

INSERT INTO pem.tbl_chart
            (cid,
             chart)
SELECT id  AS cid,
       'D' AS chart
FROM   pem.chart
WHERE  name ~* 'HAProxy Availability';

INSERT INTO pem.data_chart
            (
                        cid,
                        tbl,
                        metrices,
                        orderby,
                        orderdir,
                        glimit,
                        r_sys_obj
            )
WITH probes_column_information AS
(
         SELECT   pc.probe_id,
                  p.internal_name                tbl,
                  ARRAY_AGG(pc.internal_name) AS metrices
         FROM     pem.probe p
         join     pem.probe_column pc
         ON       (
                           p.id=pc.probe_id)
         WHERE    p.internal_name ~* 'haproxy_availability'
         GROUP BY pc.probe_id,
                  p.internal_name )
SELECT c.id,
       pc.tbl,
       pc.metrices,
       (NULL)::text[        ],
       (NULL)::CHARACTER(1)[],
       (NULL)::             int4,
       (
              SELECT applies_to_id >= 200
              FROM   pem.probe
              WHERE  id = pc.probe_id)::BOOLEAN
FROM   pem.chart c,
       probes_column_information pc
WHERE  c.name ~* 'HAProxy Availability';

--
-- HAProxy Stats Chart
--
INSERT INTO pem.chart
            (
              cid,
              TYPE,
              LEVEL,
              name,
              descp,
              owner,
              SHARED,
              ref_cnt,
              reload
            )
VALUES( 1,
        'TB',
        (array[100])::int4[],
        'HAProxy Statistics',
        'Chart for HAProxy Statistics',
        (
          SELECT oid
          FROM   pg_roles
          WHERE  rolname = current_user)::oid,
        ('{}')::oid[],
        1,
        120000
);

INSERT INTO pem.tbl_chart
            (cid,
             chart)
SELECT id  AS cid,
       'D' AS chart
FROM   pem.chart
WHERE  name ~* 'HAProxy Statistics';

INSERT INTO pem.data_chart(
                           cid,
                           tbl,
                           metrices,
                           orderby,
                           orderdir,
                           glimit,
                           r_sys_obj
                          )
WITH probes_column_information AS (
    SELECT
        probe_id,
        tbl,
        ARRAY_AGG(internal_name) AS metrices
    FROM (
        SELECT
            pc.probe_id,
            p.internal_name tbl,
            pc.internal_name,
            pc.display_position
        FROM
            pem.probe p
            JOIN pem.probe_column pc ON (p.id = pc.probe_id)
        WHERE
            p.internal_name ~* 'haproxy_stats'
            AND pc.internal_name IN ('check_status', 'proxy_name', 'service_name', 'status', 'total_sessions', 'queued_requests', 'current_sessions')
        ORDER BY
            pc.display_position)
    GROUP BY
        probe_id,
        tbl
)
SELECT
    c.id,
    pc.tbl,
    pc.metrices,
    ARRAY['check_status']::text[],
    ARRAY['A']::character (1)[],
    200, (
        SELECT
            applies_to_id >= 200
        FROM pem.probe
    WHERE
        id = pc.probe_id)::boolean
FROM
    pem.chart c,
    probes_column_information pc
WHERE
    c.name ~* 'HAProxy Statistics';


--
-- Pgbouncer Availability Chart
--
INSERT INTO pem.chart (cid, type, level, name, descp, OWNER, shared, ref_cnt, reload)
    VALUES (1, 'TB', (ARRAY[100])::int4[], 'Pgbouncer Availability', 'Chart for Pgbouncer Availability', (
            SELECT
                oid
            FROM
                pg_roles
            WHERE
                rolname = CURRENT_USER)::oid,
            ('{}')::oid[],
            1,
            120000);

INSERT INTO pem.tbl_chart (cid, chart)
SELECT
    id AS cid,
    'D' AS chart
FROM
    pem.chart
WHERE
    name ~* 'Pgbouncer Availability';

INSERT INTO pem.data_chart (cid, tbl, metrices, orderby, orderdir, glimit, r_sys_obj)
WITH probes_column_information AS (
    SELECT
        pc.probe_id,
        p.internal_name tbl,
        array_agg(pc.internal_name) AS metrices
    FROM
        pem.probe p
        JOIN pem.probe_column pc ON (p.id = pc.probe_id)
    WHERE
        p.internal_name ~* 'pgbouncer_availability'
    GROUP BY
        pc.probe_id,
        p.internal_name
)
SELECT
    c.id,
    pc.tbl,
    pc.metrices,
    (NULL)::text[],
    (NULL)::character (1)[],
    (NULL)::int4,
    (
        SELECT
            applies_to_id >= 200
        FROM
            pem.probe
        WHERE
            id = pc.probe_id)::boolean
FROM
    pem.chart c,
    probes_column_information pc
WHERE
    c.name ~* 'Pgbouncer Availability';


--
-- Pgbouncer Statistics Chart
--
INSERT INTO pem.chart (cid, type, level, name, descp, owner, shared, ref_cnt, reload)
    VALUES (1, 'TB', (ARRAY[100])::int4[], 'Pgbouncer Statistics', 'Chart for Pgbouncer Statistics', (
            SELECT
                oid
            FROM
                pg_roles
            WHERE
                rolname = CURRENT_USER)::oid,
            ('{}')::oid[],
            1,
            120000);

INSERT INTO pem.tbl_chart (cid, chart)
SELECT
    id AS cid,
    'D' AS chart
FROM
    pem.chart
WHERE
    name ~* 'Pgbouncer Statistics';


INSERT INTO pem.data_chart(
                           cid,
                           tbl,
                           metrices,
                           orderby,
                           orderdir,
                           glimit,
                           r_sys_obj
                          )
WITH probes_column_information AS (
    SELECT
        probe_id,
        tbl,
        ARRAY_AGG(internal_name) AS metrices
    FROM (
        SELECT
            pc.probe_id,
            p.internal_name tbl,
            pc.internal_name,
            pc.display_position
        FROM
            pem.probe p
            JOIN pem.probe_column pc ON (p.id = pc.probe_id)
        WHERE
            p.internal_name ~* 'pgbouncer_stats'
            AND pc.internal_name IN ('database', 'total_query_count', 'total_wait_time', 'total_xact_count', 'avg_query_count', 'avg_query_time')
        ORDER BY
            pc.display_position
            )
    GROUP BY
        probe_id,
        tbl
)
SELECT
    c.id,
    pc.tbl,
    pc.metrices,
    ARRAY['database']::text[],
    ARRAY['A']::character (1)[],
    200, (
        SELECT
            applies_to_id >= 200
        FROM pem.probe
    WHERE
        id = pc.probe_id)::boolean
FROM
    pem.chart c,
    probes_column_information pc
WHERE
    c.name ~* 'Pgbouncer Statistics';

--
-- Barman Availability Chart
--

INSERT INTO pem.chart(cid,
                      type,
                      level,
                      name,
                      descp,
                      owner,
                      shared,
                      ref_cnt,
                      reload)
VALUES(1,
       'TB',
       (ARRAY[100])::int4[],
       'Barman Availability',
       'Chart for Barman Availability',
       (SELECT oid
        FROM pg_roles
        WHERE rolname = current_user
       )::oid,
       ('{}')::oid[],
       1,
       120000
);


INSERT INTO pem.tbl_chart
            (cid,
             chart)
SELECT id  AS cid,
       'D' AS chart
FROM   pem.chart
WHERE  name ~* 'Barman Availability';

INSERT INTO pem.data_chart(
                           cid,
                           tbl,
                           metrices,
                           orderby,
                           orderdir,
                           glimit,
                           r_sys_obj
                          )
WITH probes_column_information AS (
    SELECT
        probe_id,
        tbl,
        ARRAY_AGG(internal_name) AS metrices
    FROM (
        SELECT
            pc.probe_id,
            p.internal_name tbl,
            pc.internal_name,
            pc.display_position
        FROM
            pem.probe p
            JOIN pem.probe_column pc ON (p.id = pc.probe_id)
        WHERE
            p.internal_name ~* 'barman_availability'
        ORDER BY
            pc.display_position
            )
    GROUP BY
        probe_id,
        tbl
)
SELECT
    c.id,
    pc.tbl,
    pc.metrices,
    ARRAY['barman_component']::text[],
    ARRAY['A']::character (1)[],
    200, (
        SELECT
            applies_to_id >= 200
        FROM pem.probe
    WHERE
        id = pc.probe_id)::boolean
FROM
    pem.chart c,
    probes_column_information pc
WHERE
    c.name ~* 'Barman Availability';


--
-- Barman Backup Info Chart
--

INSERT INTO pem.chart(cid,
                      type,
                      level,
                      name,
                      descp,
                      owner,
                      shared,
                      ref_cnt,
                      reload)
VALUES(1,
       'TB',
       (ARRAY[100])::int4[],
       'Barman Backup Detail',
       'Chart for Barman Backup Detail',
       (SELECT oid
        FROM pg_roles
        WHERE rolname = current_user
       )::oid,
       ('{}')::oid[],
       1,
       120000
);

INSERT INTO pem.tbl_chart
            (cid,
             chart)
SELECT id  AS cid,
       'D' AS chart
FROM   pem.chart
WHERE  name ~* 'Barman Backup Detail';


INSERT INTO pem.data_chart(
                           cid,
                           tbl,
                           metrices,
                           orderby,
                           orderdir,
                           glimit,
                           r_sys_obj
                          )
WITH probes_column_information AS (
    SELECT
        probe_id,
        tbl,
        ARRAY_AGG(internal_name) AS metrices
    FROM (
        SELECT
            pc.probe_id,
            p.internal_name tbl,
            pc.internal_name,
            pc.display_position
        FROM
            pem.probe p
            JOIN pem.probe_column pc ON (p.id = pc.probe_id)
        WHERE
            p.internal_name ~* 'barman_backup_info'
        ORDER BY
            pc.display_position
            )
    GROUP BY
        probe_id,
        tbl
)
SELECT
    c.id,
    pc.tbl,
    pc.metrices,
    ARRAY['backup_id']::text[],
    ARRAY['A']::character (1)[],
    200, (
        SELECT
            applies_to_id >= 200
        FROM pem.probe
    WHERE
        id = pc.probe_id)::boolean
FROM
    pem.chart c,
    probes_column_information pc
WHERE
    c.name ~* 'Barman Backup Detail';
