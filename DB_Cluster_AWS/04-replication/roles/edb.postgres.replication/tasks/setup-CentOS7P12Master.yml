---
# Empty Postgres Data Directory 
- name: Empty Postgres Data Directory
  shell: |
    rm -rf /var/lib/pgsql/12/data
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

# Start InitDB Postgres Service
- name: Start InitDB process
  shell: |
    {{ POSTGRES12_BIN_FOLDER }}postgresql-12-setup initdb
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

# Wait for 10 seconds for Service to Start
- name: Wait for 10 Seconds
  wait_for:
    timeout: 0
  delegate_to: "{{ item.value.public_ip }}"

# Enable Postgres Service
- name: Enable Postgres Service
  shell: |
    systemctl enable postgresql-12.service
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

# Wait for 20 seconds for Service to Start
- name: Wait for 20 Seconds
  wait_for:
    timeout: 20
  delegate_to: "{{ item.value.public_ip }}"

# Restart Postgres Service
- name: Restart Postgres Service
  shell: |
    systemctl restart postgresql-12.service
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

# Wait for 10 seconds for Service to Start
- name: Wait for 10 Seconds
  wait_for:
    timeout: 10
  delegate_to: "{{ item.value.public_ip }}"

- name: Adding Entry into pg_hba file
  blockinfile:
    path: /var/lib/pgsql/12/data/pg_hba.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR REPLICATION"
    block: |
      host replication {{ EDBREPUSER }} {{ item.value.private_ip1 }}/32 md5
      host replication {{ EDBREPUSER }} {{ item.value.private_ip2 }}/32 md5
      host replication {{ EDBREPUSER }} {{ item.value.private_ip3 }}/32 md5
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

- name: Display current Node to Install
  block:
    - debug:
        msg: 
            "Operating System = {{ OS }}:
             Postgres Version = {{ PG_VERSION }},
             Node Type = {{ item.value.node_type }},
             Public IP = {{ item.value.public_ip }},
             S3 Bucket = {{ item.value.s3bucket }},
             NODE_TYPE = {{ NODE_TYPE }},
             S3BUCKET = {{ S3BUCKET }},
             PUBLIC_IP = {{ PUBLIC_IP }},
             PGDBUSER = {{ PGDBUSER }},
             REPLICATION_USER_PASSWORD = {{ REPLICATION_USER_PASSWORD }},
             DBPASSWORD = {{ DBPASSWORD }}"

- name: Uncomment parameters in Postgresql Configuration File
  lineinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    regexp: '{{item.From}}'
    line: '{{item.To}}'
  with_items:
    - { From: "#wal_level = replica", To: "wal_level = replica" }
    - { From: "#max_wal_senders = 10", To: "max_wal_senders = 5" }
    - { From: "#max_replication_slots = 10", To: "max_replication_slots = 10" }
    - { From: "#wal_keep_segments = 0", To: "wal_keep_segments = 500" }
    - { From: "#hot_standby = on", To: "hot_standby = on" }
    - { From: "#hot_standby_feedback = off", To: "hot_standby_feedback = on" }
    - { From: "#max_logical_replication_workers = 4", To: "max_logical_replication_workers = 6" }
    - { From: "#max_sync_workers_per_subscription = 2", To: "max_sync_workers_per_subscription = 2" }
    - { From: "#listen_addresses = 'localhost'", To: "listen_addresses = '*'" } 
    - { From: "#max_connections = 100", To: "max_connections = 200" }
    - { From: "#archive_mode = off", To: "archive_mode = on" }
    # AWS CLI does not require installation but it will not work automatically.
    # For the archive command to work the AWS CLI must be installed along with the 
    # AWS Credentials being fully configured.
    #- { From: "#archive_command = ''", To: "archive_command = 'aws s3 cp %p s3://{{ S3BUCKET }}/%f'"}
  become: yes
  delegate_to: "{{ PUBLIC_IP }}"

- name: Update synchronous commit setting
  lineinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    regexp: '^#synchronous_commit = on'
    line: synchronous_commit = on
  become: yes
  when: item.value.replication_type == 'synchronous'
  delegate_to: "{{ item.value.public_ip }}"

# Stop Postgres Service
- name: Stop Postgres Service
  shell: |
    systemctl stop postgresql-12.service
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

# Restart Postgres Service
- name: Restart Postgres Service
  shell: |
    systemctl restart postgresql-12.service
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

# Wait for 10 seconds for Service to Start
- name: Wait for 10 Seconds
  wait_for:
    timeout: 10
  delegate_to: "{{ item.value.public_ip }}"

- name: Create replication role
  shell: |
    sudo -u {{PGDBUSER}} psql -c "CREATE ROLE {{ EDBREPUSER }} WITH REPLICATION LOGIN PASSWORD '{{REPLICATION_USER_PASSWORD}}'"
    sudo -u {{PGDBUSER}} psql -c "ALTER USER {{ PGDBUSER }} WITH ENCRYPTED PASSWORD '{{DBPASSWORD}}'"
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

- name: Change standby names setting in postgresql.conf file
  lineinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    regexp: "^#synchronous_standby_names = .*"
    line: synchronous_standby_names = 'any 1 (slave1,slave2)'
  become: yes
  #run_once: true
  when: item.value.replication_type == 'synchronous'
  delegate_to: "{{ PUBLIC_IP }}"
