---
# Standby configuration settings

# Display details of Node being configured
- name: Display Details of Standby Node to Configure
  block:
    - debug:
        msg: 
            "Operating System = {{ OS }}:
             Postgres Version = {{ PG_VERSION }},
             Node Type = {{ item.value.node_type }},
             Public IP = {{ item.value.public_ip }},
             S3BUCKET = {{ S3BUCKET }},
             PUBLIC_IP = {{ PUBLIC_IP }},
             EDBREPUSER = {{ EDBREPUSER }},
             REPLICATION_TYPE = {{ REPLICATION_TYPE }},
             REPLICATION_USER_PASSWORD = {{ REPLICATION_USER_PASSWORD }},
             Private IP 1 = {{ item.value.private_ip1 }},
             Private IP 2 = {{ item.value.private_ip2 }},
             PRIVATE_IP1 = {{ PRIVATE_IP1 }},
             PRIVATE_IP2 = {{ PRIVATE_IP2 }},
             POSTGRES12 BIN FOLDER = {{ DEBIAN_POSTGRES12_BIN_FOLDER }},
             POSTGRES12 DATA FOLDER = {{ DEBIAN_POSTGRES12_DATA_FOLDER }}"

- name: Create pgpass file
  lineinfile:
    path: "{{ DEBIAN_POSTGRES12_PGPASS_FOLDER_AND_FILE }}"
    line: "*:{{ REPLICATION_PORT }}:*:{{ EDBREPUSER }}:{{ REPLICATION_USER_PASSWORD }}"
    create: yes
    owner: "{{ PGDBUSER }}"
    group: "{{ PGDBUSER }}"
    mode: '0600'
  become: yes
  delegate_to: "{{ PUBLIC_IP }}"

- name: Stop Postgres Database Service
  shell: |
    systemctl stop postgresql
  become: yes
  delegate_to: "{{ item.value.public_ip }}"
                                                                                                                 
- name: Initialize Postgres Data Folder
  file:
    path: "{{ DEBIAN_POSTGRES12_DATA_FOLDER }}"
    state: absent
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

- name: Perform pgbase back-up
  shell: |
    PGPASSWORD="{{ REPLICATION_USER_PASSWORD }}" {{ DEBIAN_POSTGRES12_BIN_FOLDER }}pg_basebackup -R -D {{ DEBIAN_POSTGRES12_DATA_FOLDER }} --host={{ item.value.private_ip1 }} --port={{ REPLICATION_PORT }} --username={{ EDBREPUSER }}
  become: yes
  delegate_to: "{{ item.value.public_ip }}"

- name: Change Permissions of Data Folder
  file:
    path: "{{ DEBIAN_POSTGRES12_DATA_FOLDER }}"
    state: directory
    owner: "{{ PGDBUSER }}"
    group: "{{ PGDBUSER }}"
    recurse: yes
  become: yes
  delegate_to: "{{ item.value.public_ip }}"



- name: Uncomment parameters in postgresql.conf file
  lineinfile:
    path: "{{ DEBIAN_POSTGRES12_CONF_FOLDER }}postgresql.conf"
    regexp: "{{item.From}}"
    line: "{{item.To}}"
  with_items:
    - { From: "#wal_level = replica", To: "wal_level = replica" }
    - { From: "#max_wal_senders = 10", To: "max_wal_senders = 5" }
    - { From: "#max_replication_slots = 10", To: "max_replication_slots = 10" }
    - { From: "#wal_keep_segments = 0", To: "wal_keep_segments = 500" }
    - { From: "#hot_standby = on", To: "hot_standby = on" }
    - { From: "#hot_standby_feedback = off", To: "hot_standby_feedback = on" }
    - { From: "#max_logical_replication_workers = 4", To: "max_logical_replication_workers = 6" }
    - { From: "#max_sync_workers_per_subscription = 2", To: "max_sync_workers_per_subscription = 2" }
    - { From: "#listen_addresses = 'localhost'", To: "listen_addresses = '*'" }
    - { From: "#max_connections = 100", To: "max_connections = 200" }
    #- { From: "#archive_mode = off", To: "archive_mode = on" }
    # AWS CLI does not require installation but it will not work automatically.
    # For the archive command to work the AWS CLI must be installed along with the
    # AWS Credentials being fully configured.
    #- { From: "#archive_command = ''", To: "archive_command = 'aws s3 cp %p s3://{{ S3BUCKET }}/%f'"}
    - { From: "^#promote_trigger_file = ''", To: "promote_trigger_file = '{{ DEBIAN_POSTGRES12_DATA_FOLDER }}waltrigger'" }
    # AWS CLI must be installed on each standby node in order for the command to work from each node
    - { From: "^#restore_command = ''", To: "restore_command = 'aws s3 cp s3://{{ S3BUCKET }}/%f %p'" }
    - { From: "#recovery_target_timeline = 'latest'", To: "recovery_target_timeline = 'latest'" }
  become: yes
  delegate_to: "{{ PUBLIC_IP }}"

- name: Configure Replication Parameters in postgresql.conf file
  shell: | 
    sed -i "s@#primary_conninfo = ''@primary_conninfo = 'user={{ EDBREPUSER }} password={{ REPLICATION_USER_PASSWORD }} host={{ PRIVATE_IP1 }} port={{ REPLICATION_PORT }} sslmode=prefer sslcompression=0 gssencmode=prefer krbsrvname=postgres target_session_attrs=any application_name=slave1'@g" {{ DEBIAN_POSTGRES12_CONF_FOLDER }}postgresql.conf
    sed -i -e 's/target_session_attrs=any/& application_name=slave1/' {{ DEBIAN_POSTGRES12_DATA_FOLDER }}postgresql.auto.conf 
  become: yes
  when: REPLICATION_TYPE == 'synchronous' and item.key == 'standby1'
  delegate_to: "{{ PUBLIC_IP }}"

- name: Configure Replication Connection Parameters in postgresql.conf file
  shell: |
    sed -i "s@#primary_conninfo = ''@primary_conninfo = 'user={{ EDBREPUSER }} password={{ REPLICATION_USER_PASSWORD }} host={{ PRIVATE_IP1 }} port={{ REPLICATION_PORT }} sslmode=prefer sslcompression=0 gssencmode=prefer krbsrvname=postgres target_session_attrs=any application_name=slave2'@g" '{{ DEBIAN_POSTGRES12_CONF_FOLDER }}postgresql.conf'
    sed -i -e 's/target_session_attrs=any/& application_name=slave2/' '{{ DEBIAN_POSTGRES12_DATA_FOLDER }}postgresql.auto.conf'
  become: yes
  when: REPLICATION_TYPE == 'synchronous' and item.key == 'standby2'
  delegate_to: "{{ item.value.public_ip }}"

- name: Add Replication IP Address 1 Entry to pg_hba Configuration File
  lineinfile:
    path: "{{ DEBIAN_POSTGRES12_CONF_FOLDER }}pg_hba.conf"
    line: host replication {{ EDBREPUSER }} {{ PRIVATE_IP2 }}/32 md5
  become: yes
  delegate_to: "{{ PUBLIC_IP }}"

- name: Add Replication IP Address 2 Entry to pg_hba Configuration File
  lineinfile:
    path: "{{ DEBIAN_POSTGRES12_CONF_FOLDER}}pg_hba.conf"
    line: host replication {{ EDBREPUSER }} {{ PRIVATE_IP1 }}/32 md5
  become: yes
  delegate_to: "{{ PUBLIC_IP }}"

- name: Wait for 10 seconds
  wait_for:
    timeout: 10
  delegate_to: "{{ PUBLIC_IP }}"

- name: Restart DB service
  shell: |
    systemctl restart postgresql
  become: yes
  delegate_to: "{{ item.value.public_ip }}"
