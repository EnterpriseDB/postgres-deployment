---
# Master Configuration Settings
- name: Rule for checking if pg_hba.conf File Exists
  stat:
    path: /var/lib/pgsql/12/data/pg_hba.conf
  register: pg_hba_conf_rule
  delegate_to: "{{ item.value.public_ip }}"

- name: Create pg_hba File
  file: 
    path: /var/lib/pgsql/12/data/pg_hba.conf
    state: touch
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'master' and pg_hba_conf_rule.stat.exists == false
  delegate_to: "{{ item.value.public_ip }}"

- name: Adding Entry into pg_hba file
  blockinfile:
    path: /var/lib/pgsql/12/data/pg_hba.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR REPLICATION"
    block: |
      host replication edbrepuser {{ item.value.private_ip1 }}/32 md5
      host replication edbrepuser {{ item.value.private_ip2 }}/32 md5
      host replication edbrepuser {{ item.value.private_ip3 }}/32 md5
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'master'
  delegate_to: "{{ item.value.public_ip }}"

- name: Rule for checking if postgresql.conf File Exists
  stat:
    path: /var/lib/pgsql/12/data/postgresql.conf
  register: postgresql_conf_rule
  delegate_to: "{{ item.value.public_ip }}"

- name: Create Postgresql Configuration File
  file: 
    path: /var/lib/pgsql/12/data/postgresql.conf
    state: touch
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'master' and postgresql_conf_rule.stat.exists == false
  delegate_to: "{{ item.value.public_ip }}"

- name: Create parameters in Postgresql Configuration File because file did not exist
  blockinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR REPLICATION"
    block: |
      wal_level = replica
      max_wal_senders = 10
      max_replication_slots = 10
      wal_keep_segments = 0
      hot_standby = on
      hot_standby_feedback = off
      max_logical_replication_workers = 4
      max_sync_workers_per_subscription = 2
      listen_addresses = 'localhost'
      max_connections = 100
      archive_mode = off"
      archive_command = ''
  become: yes
  when: PG_VERSION == '12' and 'master' in item.value.node_type and postgresql_conf_rule.stat.exists == false
  delegate_to: "{{ item.value.public_ip }}"

- name: Assign node type
  set_fact:
    NODE_TYPE: "{{ item.value.node_type }}"
  register: output

- name: Assign S3 Bucket
  set_fact:
    S3BUCKET: "{{ item.value.s3bucket }}"
  register: output

- name: Assign Public IP Address
  set_fact:
    PUBLIC_IP: "{{ item.value.public_ip}}"
  register: output

- name: Display current Node to Install
  block:
    - debug:
        msg: 
            "Operating System = {{ OS }}:
             Postgres Version = {{ PG_VERSION }},
             Node Type = {{ item.value.node_type }},
             Public IP = {{ item.value.public_ip }},
             S3 Bucket = {{ item.value.s3bucket }},
             NODE_TYPE = {{ NODE_TYPE }},
             S3BUCKET = {{ S3BUCKET }},
             PUBLIC_IP = {{ PUBLIC_IP }}"

- name: Update parameters in Postgresql Configuration File if File did not exist
  lineinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    regexp: '{{line.From}}'
    line: '{{line.To}}'
  with_items:
    - { From: "wal_level = replica", To: "wal_level = replica" }
    - { From: "max_wal_senders = 10", To: "max_wal_senders = 5" }
    - { From: "max_replication_slots = 10", To: "max_replication_slots = 10" }
    - { From: "wal_keep_segments = 0", To: "wal_keep_segments = 500" }
    - { From: "hot_standby = on", To: "hot_standby = on" }
    - { From: "hot_standby_feedback = off", To: "hot_standby_feedback = on" }
    - { From: "max_logical_replication_workers = 4", To: "max_logical_replication_workers = 6" }
    - { From: "max_sync_workers_per_subscription = 2", To: "max_sync_workers_per_subscription = 2" }
    - { From: "listen_addresses = 'localhost'", To: "listen_addresses = '*'" } 
    - { From: "ax_connections = 100", To: "max_connections = 200" }
    - { From: "archive_mode = off", To: "archive_mode = on" }
    - { From: "archive_command = ''", To: "archive_command = 'aws s3 cp %p s3://{{ S3BUCKET }}/%f'"}
  become: yes
  when: PG_VERSION == '12' and NODE_TYPE == 'master' and postgresql_conf_rule.stat.exists == false
  delegate_to: "{{ PUBLIC_IP }}"

- name: Update parameters in Postgresql Configuration File
  lineinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    regexp: '{{item.From}}'
    line: '{{item.To}}'
  with_items:
    - { From: "#wal_level = replica", To: "wal_level = replica" }
    - { From: "#max_wal_senders = 10", To: "max_wal_senders = 5" }
    - { From: "#max_replication_slots = 10", To: "max_replication_slots = 10" }
    - { From: "#wal_keep_segments = 0", To: "wal_keep_segments = 500" }
    - { From: "#hot_standby = on", To: "hot_standby = on" }
    - { From: "#hot_standby_feedback = off", To: "hot_standby_feedback = on" }
    - { From: "#max_logical_replication_workers = 4", To: "max_logical_replication_workers = 6" }
    - { From: "#max_sync_workers_per_subscription = 2", To: "max_sync_workers_per_subscription = 2" }
    - { From: "#listen_addresses = 'localhost'", To: "listen_addresses = '*'" } 
    - { From: "#max_connections = 100", To: "max_connections = 200" }
    - { From: "#archive_mode = off", To: "archive_mode = on" }
    - { From: "#archive_command = ''", To: "archive_command = 'aws s3 cp %p s3://{{ S3BUCKET }}/%f'"}
  become: yes
  when: PG_VERSION == '12' and NODE_TYPE == 'master' and postgresql_conf_rule.stat.exists == true
  delegate_to: "{{ PUBLIC_IP }}"

- name: Update synchronous setting
  lineinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    regexp: '^#synchronous_commit = on'
    line: synchronous_commit = on
  become: yes
  when: PG_VERSION == '12' and item.value.replication_type == 'synchronous' and NODE_TYPE == 'master'
  delegate_to: "{{ item.value.public_ip }}"

- name: Restart Postgres 12 Service
  systemd:
    name: postgresql-12
    state: restarted
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'master'
  delegate_to: "{{ item.value.public_ip }}"

- name: Create replication role
  shell: |
    psql -d postgres -U {{PGDBUSER}} -c "CREATE ROLE edbrepuser WITH REPLICATION LOGIN PASSWORD '{{ item.value.replication_user_password }}'"
    psql -d postgres -U {{PGDBUSER}} -c "ALTER USER {{item.value.pgdbuser}} WITH ENCRYPTED PASSWORD '{{item.value.dbpassword}}'"
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'master'
  delegate_to: "{{ item.value.public_ip }}"


# Standby configuration settings
- name: Create pgpass file
  lineinfile:
    path: /var/lib/edb/.pgpass
    line: "*:5444:*:edbrepuser:{{ item.value.replication_user_password }}"
    create: yes
    owner: enterprisedb
    group: enterprisedb
    mode: '0600'
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'standby'
  delegate_to: "{{ item.value.public_ip }}"

- name: Stop DB service
  systemd:
    name: edb-as-12
    state: stopped
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'standby'
  delegate_to: "{{ item.value.public_ip }}"
                                                                                                                 
- name: Delete data directory
  file:
    path: /var/lib/edb/as12/data
    state: absent
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'standby'
  delegate_to: "{{ item.value.public_ip }}"

- name: Take pgbase back-up
  shell: PGPASSWORD="{{ REPLICATION_USER_PASSWORD }}" /usr/edb/as12/bin/pg_basebackup -R -D /var/lib/edb/as12/data --host={{ item.value.private_ip1 }} --port=5444 --username=edbrepuser
  become: yes
  when: PG_VERSION == '12' and {{ item.value.node_type }} == 'standby'
  delegate_to: "{{ item.value.public_ip }}"

- name: Change permission of data directory
  file:
    path: /var/lib/edb/as12/data
    state: directory
    owner: enterprisedb
    group: enterprisedb
    recurse: yes
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'standby'
  delegate_to: "{{ item.value.public_ip }}"

- name: Update parameter in postgresql.conf file
  lineinfile:
    path: /var/lib/edb/as12/data/postgresql.conf
    regexp: "{{line.From}}"
    line: "{{line.To}}"
  with_items:
    - { From: "^#promote_trigger_file = ''", To: "promote_trigger_file = '/var/lib/edb/as12/data/waltrigger'" }
    - { From: "^#restore_command = ''", To: "restore_command = 'aws s3 cp s3://{{ item.value.s3bucket }}/%f %p'" }
    - { From: "#recovery_target_timeline = 'latest'", To: "recovery_target_timeline = 'latest'" }
  become: yes
  when: PG_VERSION == '12' and item.value.node_type == 'standby'
  delegate_to: "{{ item.value.public_ip }}"

- name: Modify paramter in postgresql.conf file if synchronous replication
  shell: | 
    sed -i "s@#primary_conninfo = ''@primary_conninfo = 'user=edbrepuser password={{ item.value.replication_user_password }} host={{ item.value.private_ip1 }} port=5444 sslmode=prefer sslcompression=0 gssencmode=prefer krbsrvname=postgres target_session_attrs=any application_name=slave1'@g" /var/lib/edb/as12/data/postgresql.conf
    sed -i -e 's/target_session_attrs=any/& application_name=slave1/' /var/lib/edb/as12/data/postgresql.auto.conf 
  become: yes
  when: REPLICATION_TYPE == 'synchronous' and PG_VERSION == '12' and item.value.node_type == 'standby'
  delegate_to: "{{ item.value.public_ip }}"

- name: Update parameter in postgresql.conf file if synchronous replication
  shell: |
    sed -i "s@#primary_conninfo = ''@primary_conninfo = 'user=edbrepuser password={{ item.value.replication_user_password }} host={{ item.value.private_ip1 }} port=5444 sslmode=prefer sslcompression=0 gssencmode=prefer krbsrvname=postgres target_session_attrs=any application_name=slave2'@g" /var/lib/edb/as12/data/postgresql.conf
    sed -i -e 's/target_session_attrs=any/& application_name=slave2/' /var/lib/edb/as12/data/postgresql.auto.conf 
  become: yes
  when: REPLICATION_TYPE == 'synchronous' and PG_VERSION == '12' and item.value.node_type == 'standby'
  delegate_to: "{{ item.value.public_ip }}"

- name: Add entry in pg_hba file
  lineinfile:
    path: /var/lib/edb/as12/data/pg_hba.conf
    line: host replication edbrepuser {{ item.value.private_ip2 }}/32 md5
  become: yes
  #when: inventory_hostname == SLAVE1
  when: PG_VERSION == '12' and item.value.node_type == 'standby' and pg_hba_conf_rule.stat.exists == false
  delegate_to: "{{ item.value.public_ip }}"

- name: Add entry in pg_hba file
  lineinfile:
    path: /var/lib/edb/as12/data/pg_hba.conf
    line: host replication edbrepuser {{ item.value.private_ip1 }}/32 md5
  become: yes
  #when: inventory_hostname == SLAVE2
  when: PG_VERSION == '12' and item.value.node_type == 'standby'
  delegate_to: "{{ item.value.public_ip }}"

- name: Start DB process
  systemd:
    name: edb-as-12
    state: restarted
  become: yes
  delegate_to: "{{ item.value.public_ip }}"
